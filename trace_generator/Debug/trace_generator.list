
trace_generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08002c40  08002c40  00012c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e28  08002e28  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002e28  08002e28  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e28  08002e28  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e28  08002e28  00012e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e2c  08002e2c  00012e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08002e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  24000010  08002e40  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000044  08002e40  00020044  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfb8  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a2b  00000000  00000000  0002dff6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f0  00000000  00000000  0002fa28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  00030118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034041  00000000  00000000  00030760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006600  00000000  00000000  000647a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0014cc80  00000000  00000000  0006ada1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b7a21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c68  00000000  00000000  001b7a9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002c24 	.word	0x08002c24

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08002c24 	.word	0x08002c24

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	f5ad 6dfb 	sub.w	sp, sp, #2008	; 0x7d8
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e0:	f000 fa34 	bl	800074c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e4:	f000 f85a 	bl	800039c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e8:	f000 f8f4 	bl	80004d4 <MX_GPIO_Init>
  MX_DAC1_Init();
 80002ec:	f000 f8c0 	bl	8000470 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t arr_1[1000];
  for(uint16_t i = 0; i < 1000; i++) {
 80002f0:	2300      	movs	r3, #0
 80002f2:	f8a7 37d6 	strh.w	r3, [r7, #2006]	; 0x7d6
 80002f6:	e026      	b.n	8000346 <main+0x6e>
	  arr_1[i] = (sin(i / 20.) + 1) * 2000;
 80002f8:	f8b7 37d6 	ldrh.w	r3, [r7, #2006]	; 0x7d6
 80002fc:	ee07 3a90 	vmov	s15, r3
 8000300:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000304:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8000308:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800030c:	eeb0 0b45 	vmov.f64	d0, d5
 8000310:	f001 fe9e 	bl	8002050 <sin>
 8000314:	eeb0 6b40 	vmov.f64	d6, d0
 8000318:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800031c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000320:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8000390 <main+0xb8>
 8000324:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000328:	f8b7 27d6 	ldrh.w	r2, [r7, #2006]	; 0x7d6
 800032c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000330:	ee17 3a90 	vmov	r3, s15
 8000334:	b299      	uxth	r1, r3
 8000336:	463b      	mov	r3, r7
 8000338:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(uint16_t i = 0; i < 1000; i++) {
 800033c:	f8b7 37d6 	ldrh.w	r3, [r7, #2006]	; 0x7d6
 8000340:	3301      	adds	r3, #1
 8000342:	f8a7 37d6 	strh.w	r3, [r7, #2006]	; 0x7d6
 8000346:	f8b7 37d6 	ldrh.w	r3, [r7, #2006]	; 0x7d6
 800034a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800034e:	d3d3      	bcc.n	80002f8 <main+0x20>
  }
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8000350:	2100      	movs	r1, #0
 8000352:	4811      	ldr	r0, [pc, #68]	; (8000398 <main+0xc0>)
 8000354:	f000 fbbf 	bl	8000ad6 <HAL_DAC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(int i=0; i<1000;i++)
 8000358:	2300      	movs	r3, #0
 800035a:	f8c7 37d0 	str.w	r3, [r7, #2000]	; 0x7d0
 800035e:	e00e      	b.n	800037e <main+0xa6>
	  {
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, arr_1[i]);
 8000360:	463b      	mov	r3, r7
 8000362:	f8d7 27d0 	ldr.w	r2, [r7, #2000]	; 0x7d0
 8000366:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800036a:	2200      	movs	r2, #0
 800036c:	2100      	movs	r1, #0
 800036e:	480a      	ldr	r0, [pc, #40]	; (8000398 <main+0xc0>)
 8000370:	f000 fc03 	bl	8000b7a <HAL_DAC_SetValue>
	  for(int i=0; i<1000;i++)
 8000374:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 8000378:	3301      	adds	r3, #1
 800037a:	f8c7 37d0 	str.w	r3, [r7, #2000]	; 0x7d0
 800037e:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 8000382:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000386:	dbeb      	blt.n	8000360 <main+0x88>
 8000388:	e7e6      	b.n	8000358 <main+0x80>
 800038a:	bf00      	nop
 800038c:	f3af 8000 	nop.w
 8000390:	00000000 	.word	0x00000000
 8000394:	409f4000 	.word	0x409f4000
 8000398:	2400002c 	.word	0x2400002c

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b09c      	sub	sp, #112	; 0x70
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003a6:	224c      	movs	r2, #76	; 0x4c
 80003a8:	2100      	movs	r1, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 fe48 	bl	8002040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2220      	movs	r2, #32
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f001 fe42 	bl	8002040 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003bc:	2002      	movs	r0, #2
 80003be:	f000 fee1 	bl	8001184 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003c2:	2300      	movs	r3, #0
 80003c4:	603b      	str	r3, [r7, #0]
 80003c6:	4b28      	ldr	r3, [pc, #160]	; (8000468 <SystemClock_Config+0xcc>)
 80003c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ca:	4a27      	ldr	r2, [pc, #156]	; (8000468 <SystemClock_Config+0xcc>)
 80003cc:	f023 0301 	bic.w	r3, r3, #1
 80003d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003d2:	4b25      	ldr	r3, [pc, #148]	; (8000468 <SystemClock_Config+0xcc>)
 80003d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	603b      	str	r3, [r7, #0]
 80003dc:	4b23      	ldr	r3, [pc, #140]	; (800046c <SystemClock_Config+0xd0>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003e4:	4a21      	ldr	r2, [pc, #132]	; (800046c <SystemClock_Config+0xd0>)
 80003e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b1f      	ldr	r3, [pc, #124]	; (800046c <SystemClock_Config+0xd0>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003f4:	603b      	str	r3, [r7, #0]
 80003f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003f8:	bf00      	nop
 80003fa:	4b1c      	ldr	r3, [pc, #112]	; (800046c <SystemClock_Config+0xd0>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000406:	d1f8      	bne.n	80003fa <SystemClock_Config+0x5e>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000408:	2302      	movs	r3, #2
 800040a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800040c:	2301      	movs	r3, #1
 800040e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000410:	2340      	movs	r3, #64	; 0x40
 8000412:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000414:	2300      	movs	r3, #0
 8000416:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800041c:	4618      	mov	r0, r3
 800041e:	f000 feeb 	bl	80011f8 <HAL_RCC_OscConfig>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000428:	f000 f86e 	bl	8000508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042c:	233f      	movs	r3, #63	; 0x3f
 800042e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000430:	2300      	movs	r3, #0
 8000432:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000438:	2300      	movs	r3, #0
 800043a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2100      	movs	r1, #0
 8000450:	4618      	mov	r0, r3
 8000452:	f001 faa9 	bl	80019a8 <HAL_RCC_ClockConfig>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800045c:	f000 f854 	bl	8000508 <Error_Handler>
  }
}
 8000460:	bf00      	nop
 8000462:	3770      	adds	r7, #112	; 0x70
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	58000400 	.word	0x58000400
 800046c:	58024800 	.word	0x58024800

08000470 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b08a      	sub	sp, #40	; 0x28
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2224      	movs	r2, #36	; 0x24
 800047a:	2100      	movs	r1, #0
 800047c:	4618      	mov	r0, r3
 800047e:	f001 fddf 	bl	8002040 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <MX_DAC1_Init+0x5c>)
 8000484:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <MX_DAC1_Init+0x60>)
 8000486:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000488:	4810      	ldr	r0, [pc, #64]	; (80004cc <MX_DAC1_Init+0x5c>)
 800048a:	f000 fb02 	bl	8000a92 <HAL_DAC_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000494:	f000 f838 	bl	8000508 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000498:	2300      	movs	r3, #0
 800049a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800049c:	2300      	movs	r3, #0
 800049e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80004a4:	2301      	movs	r3, #1
 80004a6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	4619      	mov	r1, r3
 80004b2:	4806      	ldr	r0, [pc, #24]	; (80004cc <MX_DAC1_Init+0x5c>)
 80004b4:	f000 fb86 	bl	8000bc4 <HAL_DAC_ConfigChannel>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80004be:	f000 f823 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	3728      	adds	r7, #40	; 0x28
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	2400002c 	.word	0x2400002c
 80004d0:	40007400 	.word	0x40007400

080004d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <MX_GPIO_Init+0x30>)
 80004dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004e0:	4a08      	ldr	r2, [pc, #32]	; (8000504 <MX_GPIO_Init+0x30>)
 80004e2:	f043 0301 	orr.w	r3, r3, #1
 80004e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MX_GPIO_Init+0x30>)
 80004ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004f0:	f003 0301 	and.w	r3, r3, #1
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]

}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	58024400 	.word	0x58024400

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
	...

08000518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051e:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <HAL_MspInit+0x30>)
 8000520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000524:	4a08      	ldr	r2, [pc, #32]	; (8000548 <HAL_MspInit+0x30>)
 8000526:	f043 0302 	orr.w	r3, r3, #2
 800052a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_MspInit+0x30>)
 8000530:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000534:	f003 0302 	and.w	r3, r3, #2
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	58024400 	.word	0x58024400

0800054c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08a      	sub	sp, #40	; 0x28
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a18      	ldr	r2, [pc, #96]	; (80005cc <HAL_DAC_MspInit+0x80>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d129      	bne.n	80005c2 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800056e:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <HAL_DAC_MspInit+0x84>)
 8000570:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000574:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <HAL_DAC_MspInit+0x84>)
 8000576:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800057a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800057e:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <HAL_DAC_MspInit+0x84>)
 8000580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000588:	613b      	str	r3, [r7, #16]
 800058a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <HAL_DAC_MspInit+0x84>)
 800058e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000592:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <HAL_DAC_MspInit+0x84>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <HAL_DAC_MspInit+0x84>)
 800059e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005aa:	2310      	movs	r3, #16
 80005ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ae:	2303      	movs	r3, #3
 80005b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <HAL_DAC_MspInit+0x88>)
 80005be:	f000 fc31 	bl	8000e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80005c2:	bf00      	nop
 80005c4:	3728      	adds	r7, #40	; 0x28
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40007400 	.word	0x40007400
 80005d0:	58024400 	.word	0x58024400
 80005d4:	58020000 	.word	0x58020000

080005d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <HardFault_Handler+0x4>

080005ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <MemManage_Handler+0x4>

080005f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <BusFault_Handler+0x4>

080005f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <UsageFault_Handler+0x4>

080005fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062c:	f000 f900 	bl	8000830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000638:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <SystemInit+0xac>)
 800063a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800063e:	4a28      	ldr	r2, [pc, #160]	; (80006e0 <SystemInit+0xac>)
 8000640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000648:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <SystemInit+0xb0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a25      	ldr	r2, [pc, #148]	; (80006e4 <SystemInit+0xb0>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemInit+0xb0>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemInit+0xb0>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4921      	ldr	r1, [pc, #132]	; (80006e4 <SystemInit+0xb0>)
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <SystemInit+0xb4>)
 8000662:	4013      	ands	r3, r2
 8000664:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemInit+0xb0>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SystemInit+0xb0>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SystemInit+0xb0>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <SystemInit+0xb0>)
 800067a:	2200      	movs	r2, #0
 800067c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemInit+0xb0>)
 8000680:	2200      	movs	r2, #0
 8000682:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <SystemInit+0xb0>)
 8000686:	2200      	movs	r2, #0
 8000688:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <SystemInit+0xb0>)
 800068c:	2200      	movs	r2, #0
 800068e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <SystemInit+0xb0>)
 8000692:	2200      	movs	r2, #0
 8000694:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <SystemInit+0xb0>)
 8000698:	2200      	movs	r2, #0
 800069a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <SystemInit+0xb0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <SystemInit+0xb0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <SystemInit+0xb0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <SystemInit+0xb0>)
 80006ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <SystemInit+0xb0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <SystemInit+0xb8>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <SystemInit+0xbc>)
 80006c0:	4013      	ands	r3, r2
 80006c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006c6:	d202      	bcs.n	80006ce <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <SystemInit+0xc0>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006ce:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <SystemInit+0xac>)
 80006d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	58024400 	.word	0x58024400
 80006e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006ec:	5c001000 	.word	0x5c001000
 80006f0:	ffff0000 	.word	0xffff0000
 80006f4:	51008108 	.word	0x51008108

080006f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80006f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000730 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80006fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80006fe:	e003      	b.n	8000708 <LoopCopyDataInit>

08000700 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000702:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000704:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000706:	3104      	adds	r1, #4

08000708 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000708:	480b      	ldr	r0, [pc, #44]	; (8000738 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800070c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800070e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000710:	d3f6      	bcc.n	8000700 <CopyDataInit>
  ldr  r2, =_sbss
 8000712:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000714:	e002      	b.n	800071c <LoopFillZerobss>

08000716 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000716:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000718:	f842 3b04 	str.w	r3, [r2], #4

0800071c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800071e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000720:	d3f9      	bcc.n	8000716 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000722:	f7ff ff87 	bl	8000634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000726:	f001 fc67 	bl	8001ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800072a:	f7ff fdd5 	bl	80002d8 <main>
  bx  lr    
 800072e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000730:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000734:	08002e30 	.word	0x08002e30
  ldr  r0, =_sdata
 8000738:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800073c:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8000740:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8000744:	24000044 	.word	0x24000044

08000748 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC3_IRQHandler>
	...

0800074c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000752:	2003      	movs	r0, #3
 8000754:	f000 f96c 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000758:	f001 fadc 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 800075c:	4601      	mov	r1, r0
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <HAL_Init+0x68>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	0a1b      	lsrs	r3, r3, #8
 8000764:	f003 030f 	and.w	r3, r3, #15
 8000768:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <HAL_Init+0x6c>)
 800076a:	5cd3      	ldrb	r3, [r2, r3]
 800076c:	f003 031f 	and.w	r3, r3, #31
 8000770:	fa21 f303 	lsr.w	r3, r1, r3
 8000774:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <HAL_Init+0x68>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <HAL_Init+0x6c>)
 8000780:	5cd3      	ldrb	r3, [r2, r3]
 8000782:	f003 031f 	and.w	r3, r3, #31
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	fa22 f303 	lsr.w	r3, r2, r3
 800078c:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <HAL_Init+0x70>)
 800078e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000790:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <HAL_Init+0x74>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000796:	2000      	movs	r0, #0
 8000798:	f000 f814 	bl	80007c4 <HAL_InitTick>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e002      	b.n	80007ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007a6:	f7ff feb7 	bl	8000518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007aa:	2300      	movs	r3, #0
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	58024400 	.word	0x58024400
 80007b8:	08002c40 	.word	0x08002c40
 80007bc:	24000004 	.word	0x24000004
 80007c0:	24000000 	.word	0x24000000

080007c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <HAL_InitTick+0x60>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d101      	bne.n	80007d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80007d4:	2301      	movs	r3, #1
 80007d6:	e021      	b.n	800081c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <HAL_InitTick+0x64>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <HAL_InitTick+0x60>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f943 	bl	8000a7a <HAL_SYSTICK_Config>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e00e      	b.n	800081c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b0f      	cmp	r3, #15
 8000802:	d80a      	bhi.n	800081a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000804:	2200      	movs	r2, #0
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	f000 f91b 	bl	8000a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000810:	4a06      	ldr	r2, [pc, #24]	; (800082c <HAL_InitTick+0x68>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000816:	2300      	movs	r3, #0
 8000818:	e000      	b.n	800081c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	2400000c 	.word	0x2400000c
 8000828:	24000000 	.word	0x24000000
 800082c:	24000008 	.word	0x24000008

08000830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_IncTick+0x20>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_IncTick+0x24>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4413      	add	r3, r2
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_IncTick+0x24>)
 8000842:	6013      	str	r3, [r2, #0]
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	2400000c 	.word	0x2400000c
 8000854:	24000040 	.word	0x24000040

08000858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return uwTick;
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <HAL_GetTick+0x14>)
 800085e:	681b      	ldr	r3, [r3, #0]
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	24000040 	.word	0x24000040

08000870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000878:	f7ff ffee 	bl	8000858 <HAL_GetTick>
 800087c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000888:	d005      	beq.n	8000896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_Delay+0x40>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4413      	add	r3, r2
 8000894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000896:	bf00      	nop
 8000898:	f7ff ffde 	bl	8000858 <HAL_GetTick>
 800089c:	4602      	mov	r2, r0
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d8f7      	bhi.n	8000898 <HAL_Delay+0x28>
  {
  }
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2400000c 	.word	0x2400000c

080008b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <HAL_GetREVID+0x14>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	0c1b      	lsrs	r3, r3, #16
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	5c001000 	.word	0x5c001000

080008cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <__NVIC_SetPriorityGrouping+0x40>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e8:	4013      	ands	r3, r2
 80008ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 80008f6:	4313      	orrs	r3, r2
 80008f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fa:	4a04      	ldr	r2, [pc, #16]	; (800090c <__NVIC_SetPriorityGrouping+0x40>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60d3      	str	r3, [r2, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000ed00 	.word	0xe000ed00
 8000910:	05fa0000 	.word	0x05fa0000

08000914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <__NVIC_GetPriorityGrouping+0x18>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	f003 0307 	and.w	r3, r3, #7
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800093c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000940:	2b00      	cmp	r3, #0
 8000942:	db0a      	blt.n	800095a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	490c      	ldr	r1, [pc, #48]	; (800097c <__NVIC_SetPriority+0x4c>)
 800094a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800094e:	0112      	lsls	r2, r2, #4
 8000950:	b2d2      	uxtb	r2, r2
 8000952:	440b      	add	r3, r1
 8000954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000958:	e00a      	b.n	8000970 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	4908      	ldr	r1, [pc, #32]	; (8000980 <__NVIC_SetPriority+0x50>)
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	f003 030f 	and.w	r3, r3, #15
 8000966:	3b04      	subs	r3, #4
 8000968:	0112      	lsls	r2, r2, #4
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	440b      	add	r3, r1
 800096e:	761a      	strb	r2, [r3, #24]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000e100 	.word	0xe000e100
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000984:	b480      	push	{r7}
 8000986:	b089      	sub	sp, #36	; 0x24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	f1c3 0307 	rsb	r3, r3, #7
 800099e:	2b04      	cmp	r3, #4
 80009a0:	bf28      	it	cs
 80009a2:	2304      	movcs	r3, #4
 80009a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3304      	adds	r3, #4
 80009aa:	2b06      	cmp	r3, #6
 80009ac:	d902      	bls.n	80009b4 <NVIC_EncodePriority+0x30>
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3b03      	subs	r3, #3
 80009b2:	e000      	b.n	80009b6 <NVIC_EncodePriority+0x32>
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	f04f 32ff 	mov.w	r2, #4294967295
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43da      	mvns	r2, r3
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	401a      	ands	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009cc:	f04f 31ff 	mov.w	r1, #4294967295
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	fa01 f303 	lsl.w	r3, r1, r3
 80009d6:	43d9      	mvns	r1, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	4313      	orrs	r3, r2
         );
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3724      	adds	r7, #36	; 0x24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009fc:	d301      	bcc.n	8000a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00f      	b.n	8000a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <SysTick_Config+0x40>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a10:	f7ff ff8e 	bl	8000930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <SysTick_Config+0x40>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SysTick_Config+0x40>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff47 	bl	80008cc <__NVIC_SetPriorityGrouping>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a54:	f7ff ff5e 	bl	8000914 <__NVIC_GetPriorityGrouping>
 8000a58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	6978      	ldr	r0, [r7, #20]
 8000a60:	f7ff ff90 	bl	8000984 <NVIC_EncodePriority>
 8000a64:	4602      	mov	r2, r0
 8000a66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff5f 	bl	8000930 <__NVIC_SetPriority>
}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffb2 	bl	80009ec <SysTick_Config>
 8000a88:	4603      	mov	r3, r0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d101      	bne.n	8000aa4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e014      	b.n	8000ace <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	791b      	ldrb	r3, [r3, #4]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d105      	bne.n	8000aba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff fd49 	bl	800054c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2202      	movs	r2, #2
 8000abe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2201      	movs	r2, #1
 8000aca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	795b      	ldrb	r3, [r3, #5]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d101      	bne.n	8000aec <HAL_DAC_Start+0x16>
 8000ae8:	2302      	movs	r3, #2
 8000aea:	e040      	b.n	8000b6e <HAL_DAC_Start+0x98>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2201      	movs	r2, #1
 8000af0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2202      	movs	r2, #2
 8000af6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	6819      	ldr	r1, [r3, #0]
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	f003 0310 	and.w	r3, r3, #16
 8000b04:	2201      	movs	r2, #1
 8000b06:	409a      	lsls	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d10f      	bne.n	8000b36 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d11d      	bne.n	8000b60 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f042 0201 	orr.w	r2, r2, #1
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	e014      	b.n	8000b60 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	f003 0310 	and.w	r3, r3, #16
 8000b46:	2102      	movs	r1, #2
 8000b48:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d107      	bne.n	8000b60 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	685a      	ldr	r2, [r3, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f042 0202 	orr.w	r2, r2, #2
 8000b5e:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2201      	movs	r2, #1
 8000b64:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b087      	sub	sp, #28
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	60f8      	str	r0, [r7, #12]
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d105      	bne.n	8000ba4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	3308      	adds	r3, #8
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	e004      	b.n	8000bae <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	3314      	adds	r3, #20
 8000bac:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	371c      	adds	r7, #28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	795b      	ldrb	r3, [r3, #5]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d101      	bne.n	8000bdc <HAL_DAC_ConfigChannel+0x18>
 8000bd8:	2302      	movs	r3, #2
 8000bda:	e11d      	b.n	8000e18 <HAL_DAC_ConfigChannel+0x254>
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2201      	movs	r2, #1
 8000be0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	2202      	movs	r2, #2
 8000be6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d174      	bne.n	8000cda <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000bf0:	f7ff fe32 	bl	8000858 <HAL_GetTick>
 8000bf4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d134      	bne.n	8000c66 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000bfc:	e011      	b.n	8000c22 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000bfe:	f7ff fe2b 	bl	8000858 <HAL_GetTick>
 8000c02:	4602      	mov	r2, r0
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d90a      	bls.n	8000c22 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	f043 0208 	orr.w	r2, r3, #8
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e0fa      	b.n	8000e18 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c28:	4b7d      	ldr	r3, [pc, #500]	; (8000e20 <HAL_DAC_ConfigChannel+0x25c>)
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d1e6      	bne.n	8000bfe <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f7ff fe1d 	bl	8000870 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	6992      	ldr	r2, [r2, #24]
 8000c3e:	641a      	str	r2, [r3, #64]	; 0x40
 8000c40:	e01e      	b.n	8000c80 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000c42:	f7ff fe09 	bl	8000858 <HAL_GetTick>
 8000c46:	4602      	mov	r2, r0
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d90a      	bls.n	8000c66 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	691b      	ldr	r3, [r3, #16]
 8000c54:	f043 0208 	orr.w	r2, r3, #8
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2203      	movs	r2, #3
 8000c60:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e0d8      	b.n	8000e18 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	dbe8      	blt.n	8000c42 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f7ff fdfd 	bl	8000870 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	6992      	ldr	r2, [r2, #24]
 8000c7e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f003 0310 	and.w	r3, r3, #16
 8000c8c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	ea02 0103 	and.w	r1, r2, r3
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	69da      	ldr	r2, [r3, #28]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f003 0310 	and.w	r3, r3, #16
 8000ca4:	409a      	lsls	r2, r3
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	430a      	orrs	r2, r1
 8000cac:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	21ff      	movs	r1, #255	; 0xff
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	ea02 0103 	and.w	r1, r2, r3
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	6a1a      	ldr	r2, [r3, #32]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f003 0310 	and.w	r3, r3, #16
 8000cd0:	409a      	lsls	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d11d      	bne.n	8000d1e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce8:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f003 0310 	and.w	r3, r3, #16
 8000cf0:	221f      	movs	r2, #31
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0310 	and.w	r3, r3, #16
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d24:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f003 0310 	and.w	r3, r3, #16
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	4013      	ands	r3, r2
 8000d38:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d102      	bne.n	8000d48 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
 8000d46:	e00f      	b.n	8000d68 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d102      	bne.n	8000d56 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61fb      	str	r3, [r7, #28]
 8000d54:	e008      	b.n	8000d68 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d102      	bne.n	8000d64 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	61fb      	str	r3, [r7, #28]
 8000d62:	e001      	b.n	8000d68 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	69fa      	ldr	r2, [r7, #28]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0310 	and.w	r3, r3, #16
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	6819      	ldr	r1, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	400a      	ands	r2, r1
 8000dae:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f003 0310 	and.w	r3, r3, #16
 8000dbe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	6819      	ldr	r1, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0310 	and.w	r3, r3, #16
 8000dfa:	22c0      	movs	r2, #192	; 0xc0
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43da      	mvns	r2, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	400a      	ands	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2200      	movs	r2, #0
 8000e14:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3720      	adds	r7, #32
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20008000 	.word	0x20008000

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000e32:	4b89      	ldr	r3, [pc, #548]	; (8001058 <HAL_GPIO_Init+0x234>)
 8000e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000e36:	e194      	b.n	8001162 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 8186 	beq.w	800115c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d00b      	beq.n	8000e70 <HAL_GPIO_Init+0x4c>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d007      	beq.n	8000e70 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e64:	2b11      	cmp	r3, #17
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b12      	cmp	r3, #18
 8000e6e:	d130      	bne.n	8000ed2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	68da      	ldr	r2, [r3, #12]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	091b      	lsrs	r3, r3, #4
 8000ebc:	f003 0201 	and.w	r2, r3, #1
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	2203      	movs	r2, #3
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0xee>
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b12      	cmp	r3, #18
 8000f10:	d123      	bne.n	8000f5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	08da      	lsrs	r2, r3, #3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3208      	adds	r2, #8
 8000f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	220f      	movs	r2, #15
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	691a      	ldr	r2, [r3, #16]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	08da      	lsrs	r2, r3, #3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3208      	adds	r2, #8
 8000f54:	69b9      	ldr	r1, [r7, #24]
 8000f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	2203      	movs	r2, #3
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0203 	and.w	r2, r3, #3
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 80e0 	beq.w	800115c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9c:	4b2f      	ldr	r3, [pc, #188]	; (800105c <HAL_GPIO_Init+0x238>)
 8000f9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fa2:	4a2e      	ldr	r2, [pc, #184]	; (800105c <HAL_GPIO_Init+0x238>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <HAL_GPIO_Init+0x238>)
 8000fae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fba:	4a29      	ldr	r2, [pc, #164]	; (8001060 <HAL_GPIO_Init+0x23c>)
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a20      	ldr	r2, [pc, #128]	; (8001064 <HAL_GPIO_Init+0x240>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d052      	beq.n	800108c <HAL_GPIO_Init+0x268>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a1f      	ldr	r2, [pc, #124]	; (8001068 <HAL_GPIO_Init+0x244>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d031      	beq.n	8001052 <HAL_GPIO_Init+0x22e>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a1e      	ldr	r2, [pc, #120]	; (800106c <HAL_GPIO_Init+0x248>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d02b      	beq.n	800104e <HAL_GPIO_Init+0x22a>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <HAL_GPIO_Init+0x24c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d025      	beq.n	800104a <HAL_GPIO_Init+0x226>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <HAL_GPIO_Init+0x250>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01f      	beq.n	8001046 <HAL_GPIO_Init+0x222>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <HAL_GPIO_Init+0x254>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0x21e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a1a      	ldr	r2, [pc, #104]	; (800107c <HAL_GPIO_Init+0x258>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d013      	beq.n	800103e <HAL_GPIO_Init+0x21a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a19      	ldr	r2, [pc, #100]	; (8001080 <HAL_GPIO_Init+0x25c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00d      	beq.n	800103a <HAL_GPIO_Init+0x216>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a18      	ldr	r2, [pc, #96]	; (8001084 <HAL_GPIO_Init+0x260>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x212>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a17      	ldr	r2, [pc, #92]	; (8001088 <HAL_GPIO_Init+0x264>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_GPIO_Init+0x20e>
 800102e:	2309      	movs	r3, #9
 8001030:	e02d      	b.n	800108e <HAL_GPIO_Init+0x26a>
 8001032:	230a      	movs	r3, #10
 8001034:	e02b      	b.n	800108e <HAL_GPIO_Init+0x26a>
 8001036:	2308      	movs	r3, #8
 8001038:	e029      	b.n	800108e <HAL_GPIO_Init+0x26a>
 800103a:	2307      	movs	r3, #7
 800103c:	e027      	b.n	800108e <HAL_GPIO_Init+0x26a>
 800103e:	2306      	movs	r3, #6
 8001040:	e025      	b.n	800108e <HAL_GPIO_Init+0x26a>
 8001042:	2305      	movs	r3, #5
 8001044:	e023      	b.n	800108e <HAL_GPIO_Init+0x26a>
 8001046:	2304      	movs	r3, #4
 8001048:	e021      	b.n	800108e <HAL_GPIO_Init+0x26a>
 800104a:	2303      	movs	r3, #3
 800104c:	e01f      	b.n	800108e <HAL_GPIO_Init+0x26a>
 800104e:	2302      	movs	r3, #2
 8001050:	e01d      	b.n	800108e <HAL_GPIO_Init+0x26a>
 8001052:	2301      	movs	r3, #1
 8001054:	e01b      	b.n	800108e <HAL_GPIO_Init+0x26a>
 8001056:	bf00      	nop
 8001058:	58000080 	.word	0x58000080
 800105c:	58024400 	.word	0x58024400
 8001060:	58000400 	.word	0x58000400
 8001064:	58020000 	.word	0x58020000
 8001068:	58020400 	.word	0x58020400
 800106c:	58020800 	.word	0x58020800
 8001070:	58020c00 	.word	0x58020c00
 8001074:	58021000 	.word	0x58021000
 8001078:	58021400 	.word	0x58021400
 800107c:	58021800 	.word	0x58021800
 8001080:	58021c00 	.word	0x58021c00
 8001084:	58022000 	.word	0x58022000
 8001088:	58022400 	.word	0x58022400
 800108c:	2300      	movs	r3, #0
 800108e:	69fa      	ldr	r2, [r7, #28]
 8001090:	f002 0203 	and.w	r2, r2, #3
 8001094:	0092      	lsls	r2, r2, #2
 8001096:	4093      	lsls	r3, r2
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800109e:	4938      	ldr	r1, [pc, #224]	; (8001180 <HAL_GPIO_Init+0x35c>)
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800112e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	3301      	adds	r3, #1
 8001160:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa22 f303 	lsr.w	r3, r2, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	f47f ae63 	bne.w	8000e38 <HAL_GPIO_Init+0x14>
  }
}
 8001172:	bf00      	nop
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	58000400 	.word	0x58000400

08001184 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_PWREx_ConfigSupply+0x70>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b04      	cmp	r3, #4
 8001196:	d00a      	beq.n	80011ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_PWREx_ConfigSupply+0x70>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d001      	beq.n	80011aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e01f      	b.n	80011ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e01d      	b.n	80011ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_PWREx_ConfigSupply+0x70>)
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	f023 0207 	bic.w	r2, r3, #7
 80011b6:	490f      	ldr	r1, [pc, #60]	; (80011f4 <HAL_PWREx_ConfigSupply+0x70>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80011be:	f7ff fb4b 	bl	8000858 <HAL_GetTick>
 80011c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011c4:	e009      	b.n	80011da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80011c6:	f7ff fb47 	bl	8000858 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011d4:	d901      	bls.n	80011da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e007      	b.n	80011ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_PWREx_ConfigSupply+0x70>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011e6:	d1ee      	bne.n	80011c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	58024800 	.word	0x58024800

080011f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	; 0x30
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e3c4      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 8087 	beq.w	8001326 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001218:	4ba2      	ldr	r3, [pc, #648]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001222:	4ba0      	ldr	r3, [pc, #640]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122a:	2b10      	cmp	r3, #16
 800122c:	d007      	beq.n	800123e <HAL_RCC_OscConfig+0x46>
 800122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001230:	2b18      	cmp	r3, #24
 8001232:	d110      	bne.n	8001256 <HAL_RCC_OscConfig+0x5e>
 8001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001236:	f003 0303 	and.w	r3, r3, #3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d10b      	bne.n	8001256 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123e:	4b99      	ldr	r3, [pc, #612]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d06c      	beq.n	8001324 <HAL_RCC_OscConfig+0x12c>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d168      	bne.n	8001324 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e39e      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125e:	d106      	bne.n	800126e <HAL_RCC_OscConfig+0x76>
 8001260:	4b90      	ldr	r3, [pc, #576]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a8f      	ldr	r2, [pc, #572]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 8001266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	e02e      	b.n	80012cc <HAL_RCC_OscConfig+0xd4>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10c      	bne.n	8001290 <HAL_RCC_OscConfig+0x98>
 8001276:	4b8b      	ldr	r3, [pc, #556]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a8a      	ldr	r2, [pc, #552]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 800127c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4b88      	ldr	r3, [pc, #544]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a87      	ldr	r2, [pc, #540]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	e01d      	b.n	80012cc <HAL_RCC_OscConfig+0xd4>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001298:	d10c      	bne.n	80012b4 <HAL_RCC_OscConfig+0xbc>
 800129a:	4b82      	ldr	r3, [pc, #520]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a81      	ldr	r2, [pc, #516]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4b7f      	ldr	r3, [pc, #508]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a7e      	ldr	r2, [pc, #504]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e00b      	b.n	80012cc <HAL_RCC_OscConfig+0xd4>
 80012b4:	4b7b      	ldr	r3, [pc, #492]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a7a      	ldr	r2, [pc, #488]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 80012ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b78      	ldr	r3, [pc, #480]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a77      	ldr	r2, [pc, #476]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 80012c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d013      	beq.n	80012fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d4:	f7ff fac0 	bl	8000858 <HAL_GetTick>
 80012d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fabc 	bl	8000858 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e352      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012ee:	4b6d      	ldr	r3, [pc, #436]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0xe4>
 80012fa:	e014      	b.n	8001326 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff faac 	bl	8000858 <HAL_GetTick>
 8001300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff faa8 	bl	8000858 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e33e      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001316:	4b63      	ldr	r3, [pc, #396]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x10c>
 8001322:	e000      	b.n	8001326 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8092 	beq.w	8001458 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001334:	4b5b      	ldr	r3, [pc, #364]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800133c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800133e:	4b59      	ldr	r3, [pc, #356]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d007      	beq.n	800135a <HAL_RCC_OscConfig+0x162>
 800134a:	6a3b      	ldr	r3, [r7, #32]
 800134c:	2b18      	cmp	r3, #24
 800134e:	d12d      	bne.n	80013ac <HAL_RCC_OscConfig+0x1b4>
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d128      	bne.n	80013ac <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800135a:	4b52      	ldr	r3, [pc, #328]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	2b00      	cmp	r3, #0
 8001364:	d005      	beq.n	8001372 <HAL_RCC_OscConfig+0x17a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e310      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001372:	f7ff fa9f 	bl	80008b4 <HAL_GetREVID>
 8001376:	4602      	mov	r2, r0
 8001378:	f241 0303 	movw	r3, #4099	; 0x1003
 800137c:	429a      	cmp	r2, r3
 800137e:	d80a      	bhi.n	8001396 <HAL_RCC_OscConfig+0x19e>
 8001380:	4b48      	ldr	r3, [pc, #288]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	031b      	lsls	r3, r3, #12
 800138e:	4945      	ldr	r1, [pc, #276]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 8001390:	4313      	orrs	r3, r2
 8001392:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001394:	e060      	b.n	8001458 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b43      	ldr	r3, [pc, #268]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	061b      	lsls	r3, r3, #24
 80013a4:	493f      	ldr	r1, [pc, #252]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013aa:	e055      	b.n	8001458 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d038      	beq.n	8001426 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013b4:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f023 0219 	bic.w	r2, r3, #25
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	4938      	ldr	r1, [pc, #224]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c6:	f7ff fa47 	bl	8000858 <HAL_GetTick>
 80013ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ce:	f7ff fa43 	bl	8000858 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e2d9      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013e0:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ec:	f7ff fa62 	bl	80008b4 <HAL_GetREVID>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f241 0303 	movw	r3, #4099	; 0x1003
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d80a      	bhi.n	8001410 <HAL_RCC_OscConfig+0x218>
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	031b      	lsls	r3, r3, #12
 8001408:	4926      	ldr	r1, [pc, #152]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]
 800140e:	e023      	b.n	8001458 <HAL_RCC_OscConfig+0x260>
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	061b      	lsls	r3, r3, #24
 800141e:	4921      	ldr	r1, [pc, #132]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
 8001424:	e018      	b.n	8001458 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001432:	f7ff fa11 	bl	8000858 <HAL_GetTick>
 8001436:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143a:	f7ff fa0d 	bl	8000858 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e2a3      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f0      	bne.n	800143a <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 8091 	beq.w	8001588 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800146e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	2b08      	cmp	r3, #8
 800147a:	d007      	beq.n	800148c <HAL_RCC_OscConfig+0x294>
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	2b18      	cmp	r3, #24
 8001480:	d12f      	bne.n	80014e2 <HAL_RCC_OscConfig+0x2ea>
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b01      	cmp	r3, #1
 800148a:	d12a      	bne.n	80014e2 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_RCC_OscConfig+0x2ac>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001494:	2b00      	cmp	r3, #0
 8001496:	d007      	beq.n	80014a8 <HAL_RCC_OscConfig+0x2b0>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	2b80      	cmp	r3, #128	; 0x80
 800149e:	d003      	beq.n	80014a8 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e277      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
 80014a4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014a8:	f7ff fa04 	bl	80008b4 <HAL_GetREVID>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f241 0303 	movw	r3, #4099	; 0x1003
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d80a      	bhi.n	80014cc <HAL_RCC_OscConfig+0x2d4>
 80014b6:	4ba2      	ldr	r3, [pc, #648]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	069b      	lsls	r3, r3, #26
 80014c4:	499e      	ldr	r1, [pc, #632]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014ca:	e05d      	b.n	8001588 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014cc:	4b9c      	ldr	r3, [pc, #624]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	061b      	lsls	r3, r3, #24
 80014da:	4999      	ldr	r1, [pc, #612]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014e0:	e052      	b.n	8001588 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d035      	beq.n	8001556 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80014ea:	4b95      	ldr	r3, [pc, #596]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a94      	ldr	r2, [pc, #592]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 80014f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f6:	f7ff f9af 	bl	8000858 <HAL_GetTick>
 80014fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80014fe:	f7ff f9ab 	bl	8000858 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e241      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001510:	4b8b      	ldr	r3, [pc, #556]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800151c:	f7ff f9ca 	bl	80008b4 <HAL_GetREVID>
 8001520:	4602      	mov	r2, r0
 8001522:	f241 0303 	movw	r3, #4099	; 0x1003
 8001526:	429a      	cmp	r2, r3
 8001528:	d80a      	bhi.n	8001540 <HAL_RCC_OscConfig+0x348>
 800152a:	4b85      	ldr	r3, [pc, #532]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	069b      	lsls	r3, r3, #26
 8001538:	4981      	ldr	r1, [pc, #516]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 800153a:	4313      	orrs	r3, r2
 800153c:	604b      	str	r3, [r1, #4]
 800153e:	e023      	b.n	8001588 <HAL_RCC_OscConfig+0x390>
 8001540:	4b7f      	ldr	r3, [pc, #508]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	061b      	lsls	r3, r3, #24
 800154e:	497c      	ldr	r1, [pc, #496]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 8001550:	4313      	orrs	r3, r2
 8001552:	60cb      	str	r3, [r1, #12]
 8001554:	e018      	b.n	8001588 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001556:	4b7a      	ldr	r3, [pc, #488]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a79      	ldr	r2, [pc, #484]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 800155c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001562:	f7ff f979 	bl	8000858 <HAL_GetTick>
 8001566:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800156a:	f7ff f975 	bl	8000858 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e20b      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800157c:	4b70      	ldr	r3, [pc, #448]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f0      	bne.n	800156a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d036      	beq.n	8001602 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d019      	beq.n	80015d0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159c:	4b68      	ldr	r3, [pc, #416]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 800159e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a0:	4a67      	ldr	r2, [pc, #412]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a8:	f7ff f956 	bl	8000858 <HAL_GetTick>
 80015ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b0:	f7ff f952 	bl	8000858 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e1e8      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015c2:	4b5f      	ldr	r3, [pc, #380]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 80015c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x3b8>
 80015ce:	e018      	b.n	8001602 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d0:	4b5b      	ldr	r3, [pc, #364]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 80015d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d4:	4a5a      	ldr	r2, [pc, #360]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 80015d6:	f023 0301 	bic.w	r3, r3, #1
 80015da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015dc:	f7ff f93c 	bl	8000858 <HAL_GetTick>
 80015e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e4:	f7ff f938 	bl	8000858 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e1ce      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015f6:	4b52      	ldr	r3, [pc, #328]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 80015f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	2b00      	cmp	r3, #0
 800160c:	d036      	beq.n	800167c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d019      	beq.n	800164a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001616:	4b4a      	ldr	r3, [pc, #296]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a49      	ldr	r2, [pc, #292]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 800161c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001620:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001622:	f7ff f919 	bl	8000858 <HAL_GetTick>
 8001626:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800162a:	f7ff f915 	bl	8000858 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e1ab      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800163c:	4b40      	ldr	r3, [pc, #256]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x432>
 8001648:	e018      	b.n	800167c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800164a:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a3c      	ldr	r2, [pc, #240]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 8001650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001654:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001656:	f7ff f8ff 	bl	8000858 <HAL_GetTick>
 800165a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800165e:	f7ff f8fb 	bl	8000858 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e191      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001670:	4b33      	ldr	r3, [pc, #204]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f0      	bne.n	800165e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 8086 	beq.w	8001796 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800168a:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <HAL_RCC_OscConfig+0x54c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a2d      	ldr	r2, [pc, #180]	; (8001744 <HAL_RCC_OscConfig+0x54c>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001696:	f7ff f8df 	bl	8000858 <HAL_GetTick>
 800169a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800169e:	f7ff f8db 	bl	8000858 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b64      	cmp	r3, #100	; 0x64
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e171      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016b0:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_RCC_OscConfig+0x54c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x4da>
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 80016c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c8:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6713      	str	r3, [r2, #112]	; 0x70
 80016d0:	e02d      	b.n	800172e <HAL_RCC_OscConfig+0x536>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x4fc>
 80016da:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 80016dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016de:	4a18      	ldr	r2, [pc, #96]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	6713      	str	r3, [r2, #112]	; 0x70
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	4a15      	ldr	r2, [pc, #84]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 80016ec:	f023 0304 	bic.w	r3, r3, #4
 80016f0:	6713      	str	r3, [r2, #112]	; 0x70
 80016f2:	e01c      	b.n	800172e <HAL_RCC_OscConfig+0x536>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b05      	cmp	r3, #5
 80016fa:	d10c      	bne.n	8001716 <HAL_RCC_OscConfig+0x51e>
 80016fc:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 80016fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001700:	4a0f      	ldr	r2, [pc, #60]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	6713      	str	r3, [r2, #112]	; 0x70
 8001708:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170c:	4a0c      	ldr	r2, [pc, #48]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6713      	str	r3, [r2, #112]	; 0x70
 8001714:	e00b      	b.n	800172e <HAL_RCC_OscConfig+0x536>
 8001716:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 8001718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171a:	4a09      	ldr	r2, [pc, #36]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	6713      	str	r3, [r2, #112]	; 0x70
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001726:	4a06      	ldr	r2, [pc, #24]	; (8001740 <HAL_RCC_OscConfig+0x548>)
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d01a      	beq.n	800176c <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001736:	f7ff f88f 	bl	8000858 <HAL_GetTick>
 800173a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800173c:	e00f      	b.n	800175e <HAL_RCC_OscConfig+0x566>
 800173e:	bf00      	nop
 8001740:	58024400 	.word	0x58024400
 8001744:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001748:	f7ff f886 	bl	8000858 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f241 3288 	movw	r2, #5000	; 0x1388
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e11a      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800175e:	4b8f      	ldr	r3, [pc, #572]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 8001760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0ee      	beq.n	8001748 <HAL_RCC_OscConfig+0x550>
 800176a:	e014      	b.n	8001796 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176c:	f7ff f874 	bl	8000858 <HAL_GetTick>
 8001770:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001772:	e00a      	b.n	800178a <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001774:	f7ff f870 	bl	8000858 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e104      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800178a:	4b84      	ldr	r3, [pc, #528]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ee      	bne.n	8001774 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 80f9 	beq.w	8001992 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80017a0:	4b7e      	ldr	r3, [pc, #504]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017a8:	2b18      	cmp	r3, #24
 80017aa:	f000 80b4 	beq.w	8001916 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	f040 8095 	bne.w	80018e2 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b8:	4b78      	ldr	r3, [pc, #480]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a77      	ldr	r2, [pc, #476]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 80017be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff f848 	bl	8000858 <HAL_GetTick>
 80017c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff f844 	bl	8000858 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e0da      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017de:	4b6f      	ldr	r3, [pc, #444]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ea:	4b6c      	ldr	r3, [pc, #432]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 80017ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ee:	4b6c      	ldr	r3, [pc, #432]	; (80019a0 <HAL_RCC_OscConfig+0x7a8>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	430a      	orrs	r2, r1
 80017fe:	4967      	ldr	r1, [pc, #412]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 8001800:	4313      	orrs	r3, r2
 8001802:	628b      	str	r3, [r1, #40]	; 0x28
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	3b01      	subs	r3, #1
 800180a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001812:	3b01      	subs	r3, #1
 8001814:	025b      	lsls	r3, r3, #9
 8001816:	b29b      	uxth	r3, r3
 8001818:	431a      	orrs	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181e:	3b01      	subs	r3, #1
 8001820:	041b      	lsls	r3, r3, #16
 8001822:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800182c:	3b01      	subs	r3, #1
 800182e:	061b      	lsls	r3, r3, #24
 8001830:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001834:	4959      	ldr	r1, [pc, #356]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 8001836:	4313      	orrs	r3, r2
 8001838:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800183a:	4b58      	ldr	r3, [pc, #352]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	4a57      	ldr	r2, [pc, #348]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001846:	4b55      	ldr	r3, [pc, #340]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 8001848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800184a:	4b56      	ldr	r3, [pc, #344]	; (80019a4 <HAL_RCC_OscConfig+0x7ac>)
 800184c:	4013      	ands	r3, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001852:	00d2      	lsls	r2, r2, #3
 8001854:	4951      	ldr	r1, [pc, #324]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 8001856:	4313      	orrs	r3, r2
 8001858:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800185a:	4b50      	ldr	r3, [pc, #320]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	f023 020c 	bic.w	r2, r3, #12
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	494d      	ldr	r1, [pc, #308]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 8001868:	4313      	orrs	r3, r2
 800186a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800186c:	4b4b      	ldr	r3, [pc, #300]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	f023 0202 	bic.w	r2, r3, #2
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001878:	4948      	ldr	r1, [pc, #288]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 800187a:	4313      	orrs	r3, r2
 800187c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800187e:	4b47      	ldr	r3, [pc, #284]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	4a46      	ldr	r2, [pc, #280]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 8001884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001888:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800188a:	4b44      	ldr	r3, [pc, #272]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	4a43      	ldr	r2, [pc, #268]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 8001890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001894:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001896:	4b41      	ldr	r3, [pc, #260]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 8001898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189a:	4a40      	ldr	r2, [pc, #256]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 800189c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80018a2:	4b3e      	ldr	r3, [pc, #248]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	4a3d      	ldr	r2, [pc, #244]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ae:	4b3b      	ldr	r3, [pc, #236]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a3a      	ldr	r2, [pc, #232]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 80018b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7fe ffcd 	bl	8000858 <HAL_GetTick>
 80018be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c2:	f7fe ffc9 	bl	8000858 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e05f      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018d4:	4b31      	ldr	r3, [pc, #196]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x6ca>
 80018e0:	e057      	b.n	8001992 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e2:	4b2e      	ldr	r3, [pc, #184]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a2d      	ldr	r2, [pc, #180]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 80018e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ee:	f7fe ffb3 	bl	8000858 <HAL_GetTick>
 80018f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f6:	f7fe ffaf 	bl	8000858 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e045      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f0      	bne.n	80018f6 <HAL_RCC_OscConfig+0x6fe>
 8001914:	e03d      	b.n	8001992 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 8001918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <HAL_RCC_OscConfig+0x7a4>)
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	2b01      	cmp	r3, #1
 8001928:	d031      	beq.n	800198e <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	f003 0203 	and.w	r2, r3, #3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d12a      	bne.n	800198e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001944:	429a      	cmp	r2, r3
 8001946:	d122      	bne.n	800198e <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d11a      	bne.n	800198e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	0a5b      	lsrs	r3, r3, #9
 800195c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001964:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d111      	bne.n	800198e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	0c1b      	lsrs	r3, r3, #16
 800196e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001976:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d108      	bne.n	800198e <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	0e1b      	lsrs	r3, r3, #24
 8001980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001988:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d001      	beq.n	8001992 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3730      	adds	r7, #48	; 0x30
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	58024400 	.word	0x58024400
 80019a0:	fffffc0c 	.word	0xfffffc0c
 80019a4:	ffff0007 	.word	0xffff0007

080019a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e19c      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b8a      	ldr	r3, [pc, #552]	; (8001be8 <HAL_RCC_ClockConfig+0x240>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d910      	bls.n	80019ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b87      	ldr	r3, [pc, #540]	; (8001be8 <HAL_RCC_ClockConfig+0x240>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 020f 	bic.w	r2, r3, #15
 80019d2:	4985      	ldr	r1, [pc, #532]	; (8001be8 <HAL_RCC_ClockConfig+0x240>)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b83      	ldr	r3, [pc, #524]	; (8001be8 <HAL_RCC_ClockConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e184      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d010      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	4b7b      	ldr	r3, [pc, #492]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d908      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a08:	4b78      	ldr	r3, [pc, #480]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	4975      	ldr	r1, [pc, #468]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d010      	beq.n	8001a48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	4b70      	ldr	r3, [pc, #448]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d908      	bls.n	8001a48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a36:	4b6d      	ldr	r3, [pc, #436]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	496a      	ldr	r1, [pc, #424]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d010      	beq.n	8001a76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699a      	ldr	r2, [r3, #24]
 8001a58:	4b64      	ldr	r3, [pc, #400]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d908      	bls.n	8001a76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a64:	4b61      	ldr	r3, [pc, #388]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	495e      	ldr	r1, [pc, #376]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0320 	and.w	r3, r3, #32
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d010      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69da      	ldr	r2, [r3, #28]
 8001a86:	4b59      	ldr	r3, [pc, #356]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d908      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001a92:	4b56      	ldr	r3, [pc, #344]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4953      	ldr	r1, [pc, #332]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d010      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	4b4d      	ldr	r3, [pc, #308]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d908      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b4a      	ldr	r3, [pc, #296]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f023 020f 	bic.w	r2, r3, #15
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4947      	ldr	r1, [pc, #284]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d055      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ade:	4b43      	ldr	r3, [pc, #268]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	4940      	ldr	r1, [pc, #256]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001af8:	4b3c      	ldr	r3, [pc, #240]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d121      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0f6      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d115      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0ea      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d107      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d109      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0de      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b38:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0d6      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b48:	4b28      	ldr	r3, [pc, #160]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	f023 0207 	bic.w	r2, r3, #7
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4925      	ldr	r1, [pc, #148]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5a:	f7fe fe7d 	bl	8000858 <HAL_GetTick>
 8001b5e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b60:	e00a      	b.n	8001b78 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b62:	f7fe fe79 	bl	8000858 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e0be      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b78:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d1eb      	bne.n	8001b62 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d010      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68da      	ldr	r2, [r3, #12]
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d208      	bcs.n	8001bb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f023 020f 	bic.w	r2, r3, #15
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	490e      	ldr	r1, [pc, #56]	; (8001bec <HAL_RCC_ClockConfig+0x244>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_ClockConfig+0x240>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d214      	bcs.n	8001bf0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_RCC_ClockConfig+0x240>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f023 020f 	bic.w	r2, r3, #15
 8001bce:	4906      	ldr	r1, [pc, #24]	; (8001be8 <HAL_RCC_ClockConfig+0x240>)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <HAL_RCC_ClockConfig+0x240>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e086      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x34e>
 8001be8:	52002000 	.word	0x52002000
 8001bec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d010      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	4b3f      	ldr	r3, [pc, #252]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d208      	bcs.n	8001c1e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c0c:	4b3c      	ldr	r3, [pc, #240]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	4939      	ldr	r1, [pc, #228]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d010      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695a      	ldr	r2, [r3, #20]
 8001c2e:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d208      	bcs.n	8001c4c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c3a:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	492e      	ldr	r1, [pc, #184]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d010      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	699a      	ldr	r2, [r3, #24]
 8001c5c:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d208      	bcs.n	8001c7a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c68:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4922      	ldr	r1, [pc, #136]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d010      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69da      	ldr	r2, [r3, #28]
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d208      	bcs.n	8001ca8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4917      	ldr	r1, [pc, #92]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ca8:	f000 f834 	bl	8001d14 <HAL_RCC_GetSysClockFreq>
 8001cac:	4601      	mov	r1, r0
 8001cae:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <HAL_RCC_ClockConfig+0x35c>)
 8001cba:	5cd3      	ldrb	r3, [r2, r3]
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8001cc4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_RCC_ClockConfig+0x358>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <HAL_RCC_ClockConfig+0x35c>)
 8001cd0:	5cd3      	ldrb	r3, [r2, r3]
 8001cd2:	f003 031f 	and.w	r3, r3, #31
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cdc:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <HAL_RCC_ClockConfig+0x360>)
 8001cde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <HAL_RCC_ClockConfig+0x364>)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_RCC_ClockConfig+0x368>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fd6a 	bl	80007c4 <HAL_InitTick>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	58024400 	.word	0x58024400
 8001d04:	08002c40 	.word	0x08002c40
 8001d08:	24000004 	.word	0x24000004
 8001d0c:	24000000 	.word	0x24000000
 8001d10:	24000008 	.word	0x24000008

08001d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	; 0x24
 8001d18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d1a:	4baf      	ldr	r3, [pc, #700]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d22:	2b18      	cmp	r3, #24
 8001d24:	f200 814e 	bhi.w	8001fc4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8001d28:	a201      	add	r2, pc, #4	; (adr r2, 8001d30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2e:	bf00      	nop
 8001d30:	08001d95 	.word	0x08001d95
 8001d34:	08001fc5 	.word	0x08001fc5
 8001d38:	08001fc5 	.word	0x08001fc5
 8001d3c:	08001fc5 	.word	0x08001fc5
 8001d40:	08001fc5 	.word	0x08001fc5
 8001d44:	08001fc5 	.word	0x08001fc5
 8001d48:	08001fc5 	.word	0x08001fc5
 8001d4c:	08001fc5 	.word	0x08001fc5
 8001d50:	08001dbb 	.word	0x08001dbb
 8001d54:	08001fc5 	.word	0x08001fc5
 8001d58:	08001fc5 	.word	0x08001fc5
 8001d5c:	08001fc5 	.word	0x08001fc5
 8001d60:	08001fc5 	.word	0x08001fc5
 8001d64:	08001fc5 	.word	0x08001fc5
 8001d68:	08001fc5 	.word	0x08001fc5
 8001d6c:	08001fc5 	.word	0x08001fc5
 8001d70:	08001dc1 	.word	0x08001dc1
 8001d74:	08001fc5 	.word	0x08001fc5
 8001d78:	08001fc5 	.word	0x08001fc5
 8001d7c:	08001fc5 	.word	0x08001fc5
 8001d80:	08001fc5 	.word	0x08001fc5
 8001d84:	08001fc5 	.word	0x08001fc5
 8001d88:	08001fc5 	.word	0x08001fc5
 8001d8c:	08001fc5 	.word	0x08001fc5
 8001d90:	08001dc7 	.word	0x08001dc7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d94:	4b90      	ldr	r3, [pc, #576]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d009      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001da0:	4b8d      	ldr	r3, [pc, #564]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	08db      	lsrs	r3, r3, #3
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	4a8c      	ldr	r2, [pc, #560]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
 8001db0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001db2:	e10a      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001db4:	4b89      	ldr	r3, [pc, #548]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001db6:	61bb      	str	r3, [r7, #24]
    break;
 8001db8:	e107      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001dba:	4b89      	ldr	r3, [pc, #548]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001dbc:	61bb      	str	r3, [r7, #24]
    break;
 8001dbe:	e104      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001dc0:	4b88      	ldr	r3, [pc, #544]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8001dc2:	61bb      	str	r3, [r7, #24]
    break;
 8001dc4:	e101      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001dc6:	4b84      	ldr	r3, [pc, #528]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001dd0:	4b81      	ldr	r3, [pc, #516]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dda:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001ddc:	4b7e      	ldr	r3, [pc, #504]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001de6:	4b7c      	ldr	r3, [pc, #496]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dea:	08db      	lsrs	r3, r3, #3
 8001dec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	ee07 3a90 	vmov	s15, r3
 8001dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dfe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 80da 	beq.w	8001fbe <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d05a      	beq.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d302      	bcc.n	8001e1a <HAL_RCC_GetSysClockFreq+0x106>
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d078      	beq.n	8001f0a <HAL_RCC_GetSysClockFreq+0x1f6>
 8001e18:	e099      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e1a:	4b6f      	ldr	r3, [pc, #444]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0320 	and.w	r3, r3, #32
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d02d      	beq.n	8001e82 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e26:	4b6c      	ldr	r3, [pc, #432]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	08db      	lsrs	r3, r3, #3
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	4a6a      	ldr	r2, [pc, #424]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001e32:	fa22 f303 	lsr.w	r3, r2, r3
 8001e36:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	ee07 3a90 	vmov	s15, r3
 8001e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e50:	4b61      	ldr	r3, [pc, #388]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e60:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e64:	eddf 5a60 	vldr	s11, [pc, #384]	; 8001fe8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001e68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001e80:	e087      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	ee07 3a90 	vmov	s15, r3
 8001e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e8c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001fec <HAL_RCC_GetSysClockFreq+0x2d8>
 8001e90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e94:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e9c:	ee07 3a90 	vmov	s15, r3
 8001ea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ea4:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ea8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001fe8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001eac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001eb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ec4:	e065      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ed0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001ff0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001ed4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ed8:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee0:	ee07 3a90 	vmov	s15, r3
 8001ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ee8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eec:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001fe8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001ef0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ef4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ef8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001efc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f08:	e043      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	ee07 3a90 	vmov	s15, r3
 8001f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f14:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001ff4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8001f18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f24:	ee07 3a90 	vmov	s15, r3
 8001f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f30:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001fe8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001f34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f4c:	e021      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	ee07 3a90 	vmov	s15, r3
 8001f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f58:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001ff0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f60:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f70:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f74:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001fe8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001f78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f90:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	0a5b      	lsrs	r3, r3, #9
 8001f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb6:	ee17 3a90 	vmov	r3, s15
 8001fba:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001fbc:	e005      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
    break;
 8001fc2:	e002      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001fc6:	61bb      	str	r3, [r7, #24]
    break;
 8001fc8:	bf00      	nop
  }

  return sysclockfreq;
 8001fca:	69bb      	ldr	r3, [r7, #24]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3724      	adds	r7, #36	; 0x24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	58024400 	.word	0x58024400
 8001fdc:	03d09000 	.word	0x03d09000
 8001fe0:	003d0900 	.word	0x003d0900
 8001fe4:	017d7840 	.word	0x017d7840
 8001fe8:	46000000 	.word	0x46000000
 8001fec:	4c742400 	.word	0x4c742400
 8001ff0:	4a742400 	.word	0x4a742400
 8001ff4:	4bbebc20 	.word	0x4bbebc20

08001ff8 <__libc_init_array>:
 8001ff8:	b570      	push	{r4, r5, r6, lr}
 8001ffa:	4e0d      	ldr	r6, [pc, #52]	; (8002030 <__libc_init_array+0x38>)
 8001ffc:	4c0d      	ldr	r4, [pc, #52]	; (8002034 <__libc_init_array+0x3c>)
 8001ffe:	1ba4      	subs	r4, r4, r6
 8002000:	10a4      	asrs	r4, r4, #2
 8002002:	2500      	movs	r5, #0
 8002004:	42a5      	cmp	r5, r4
 8002006:	d109      	bne.n	800201c <__libc_init_array+0x24>
 8002008:	4e0b      	ldr	r6, [pc, #44]	; (8002038 <__libc_init_array+0x40>)
 800200a:	4c0c      	ldr	r4, [pc, #48]	; (800203c <__libc_init_array+0x44>)
 800200c:	f000 fe0a 	bl	8002c24 <_init>
 8002010:	1ba4      	subs	r4, r4, r6
 8002012:	10a4      	asrs	r4, r4, #2
 8002014:	2500      	movs	r5, #0
 8002016:	42a5      	cmp	r5, r4
 8002018:	d105      	bne.n	8002026 <__libc_init_array+0x2e>
 800201a:	bd70      	pop	{r4, r5, r6, pc}
 800201c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002020:	4798      	blx	r3
 8002022:	3501      	adds	r5, #1
 8002024:	e7ee      	b.n	8002004 <__libc_init_array+0xc>
 8002026:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800202a:	4798      	blx	r3
 800202c:	3501      	adds	r5, #1
 800202e:	e7f2      	b.n	8002016 <__libc_init_array+0x1e>
 8002030:	08002e28 	.word	0x08002e28
 8002034:	08002e28 	.word	0x08002e28
 8002038:	08002e28 	.word	0x08002e28
 800203c:	08002e2c 	.word	0x08002e2c

08002040 <memset>:
 8002040:	4402      	add	r2, r0
 8002042:	4603      	mov	r3, r0
 8002044:	4293      	cmp	r3, r2
 8002046:	d100      	bne.n	800204a <memset+0xa>
 8002048:	4770      	bx	lr
 800204a:	f803 1b01 	strb.w	r1, [r3], #1
 800204e:	e7f9      	b.n	8002044 <memset+0x4>

08002050 <sin>:
 8002050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002052:	eeb0 7b40 	vmov.f64	d7, d0
 8002056:	ee17 3a90 	vmov	r3, s15
 800205a:	4a19      	ldr	r2, [pc, #100]	; (80020c0 <sin+0x70>)
 800205c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002060:	4293      	cmp	r3, r2
 8002062:	dc05      	bgt.n	8002070 <sin+0x20>
 8002064:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80020b8 <sin+0x68>
 8002068:	2000      	movs	r0, #0
 800206a:	f000 fc71 	bl	8002950 <__kernel_sin>
 800206e:	e004      	b.n	800207a <sin+0x2a>
 8002070:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <sin+0x74>)
 8002072:	4293      	cmp	r3, r2
 8002074:	dd04      	ble.n	8002080 <sin+0x30>
 8002076:	ee30 0b40 	vsub.f64	d0, d0, d0
 800207a:	b005      	add	sp, #20
 800207c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002080:	4668      	mov	r0, sp
 8002082:	f000 f821 	bl	80020c8 <__ieee754_rem_pio2>
 8002086:	f000 0003 	and.w	r0, r0, #3
 800208a:	2801      	cmp	r0, #1
 800208c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002090:	ed9d 0b00 	vldr	d0, [sp]
 8002094:	d004      	beq.n	80020a0 <sin+0x50>
 8002096:	2802      	cmp	r0, #2
 8002098:	d005      	beq.n	80020a6 <sin+0x56>
 800209a:	b950      	cbnz	r0, 80020b2 <sin+0x62>
 800209c:	2001      	movs	r0, #1
 800209e:	e7e4      	b.n	800206a <sin+0x1a>
 80020a0:	f000 f94e 	bl	8002340 <__kernel_cos>
 80020a4:	e7e9      	b.n	800207a <sin+0x2a>
 80020a6:	2001      	movs	r0, #1
 80020a8:	f000 fc52 	bl	8002950 <__kernel_sin>
 80020ac:	eeb1 0b40 	vneg.f64	d0, d0
 80020b0:	e7e3      	b.n	800207a <sin+0x2a>
 80020b2:	f000 f945 	bl	8002340 <__kernel_cos>
 80020b6:	e7f9      	b.n	80020ac <sin+0x5c>
	...
 80020c0:	3fe921fb 	.word	0x3fe921fb
 80020c4:	7fefffff 	.word	0x7fefffff

080020c8 <__ieee754_rem_pio2>:
 80020c8:	b570      	push	{r4, r5, r6, lr}
 80020ca:	eeb0 7b40 	vmov.f64	d7, d0
 80020ce:	ee17 5a90 	vmov	r5, s15
 80020d2:	4b95      	ldr	r3, [pc, #596]	; (8002328 <__ieee754_rem_pio2+0x260>)
 80020d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80020d8:	429e      	cmp	r6, r3
 80020da:	b088      	sub	sp, #32
 80020dc:	4604      	mov	r4, r0
 80020de:	dc07      	bgt.n	80020f0 <__ieee754_rem_pio2+0x28>
 80020e0:	2200      	movs	r2, #0
 80020e2:	2300      	movs	r3, #0
 80020e4:	ed84 0b00 	vstr	d0, [r4]
 80020e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80020ec:	2000      	movs	r0, #0
 80020ee:	e01b      	b.n	8002128 <__ieee754_rem_pio2+0x60>
 80020f0:	4b8e      	ldr	r3, [pc, #568]	; (800232c <__ieee754_rem_pio2+0x264>)
 80020f2:	429e      	cmp	r6, r3
 80020f4:	dc3b      	bgt.n	800216e <__ieee754_rem_pio2+0xa6>
 80020f6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80020fa:	2d00      	cmp	r5, #0
 80020fc:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80022e8 <__ieee754_rem_pio2+0x220>
 8002100:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8002104:	dd19      	ble.n	800213a <__ieee754_rem_pio2+0x72>
 8002106:	ee30 7b46 	vsub.f64	d7, d0, d6
 800210a:	429e      	cmp	r6, r3
 800210c:	d00e      	beq.n	800212c <__ieee754_rem_pio2+0x64>
 800210e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80022f0 <__ieee754_rem_pio2+0x228>
 8002112:	ee37 5b46 	vsub.f64	d5, d7, d6
 8002116:	ee37 7b45 	vsub.f64	d7, d7, d5
 800211a:	ed84 5b00 	vstr	d5, [r4]
 800211e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002122:	ed84 7b02 	vstr	d7, [r4, #8]
 8002126:	2001      	movs	r0, #1
 8002128:	b008      	add	sp, #32
 800212a:	bd70      	pop	{r4, r5, r6, pc}
 800212c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80022f8 <__ieee754_rem_pio2+0x230>
 8002130:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002134:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8002300 <__ieee754_rem_pio2+0x238>
 8002138:	e7eb      	b.n	8002112 <__ieee754_rem_pio2+0x4a>
 800213a:	429e      	cmp	r6, r3
 800213c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8002140:	d00e      	beq.n	8002160 <__ieee754_rem_pio2+0x98>
 8002142:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 80022f0 <__ieee754_rem_pio2+0x228>
 8002146:	ee37 5b06 	vadd.f64	d5, d7, d6
 800214a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800214e:	ed84 5b00 	vstr	d5, [r4]
 8002152:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002156:	f04f 30ff 	mov.w	r0, #4294967295
 800215a:	ed84 7b02 	vstr	d7, [r4, #8]
 800215e:	e7e3      	b.n	8002128 <__ieee754_rem_pio2+0x60>
 8002160:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80022f8 <__ieee754_rem_pio2+0x230>
 8002164:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002168:	ed9f 6b65 	vldr	d6, [pc, #404]	; 8002300 <__ieee754_rem_pio2+0x238>
 800216c:	e7eb      	b.n	8002146 <__ieee754_rem_pio2+0x7e>
 800216e:	4b70      	ldr	r3, [pc, #448]	; (8002330 <__ieee754_rem_pio2+0x268>)
 8002170:	429e      	cmp	r6, r3
 8002172:	dc6c      	bgt.n	800224e <__ieee754_rem_pio2+0x186>
 8002174:	f000 fc44 	bl	8002a00 <fabs>
 8002178:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800217c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8002308 <__ieee754_rem_pio2+0x240>
 8002180:	eea0 7b06 	vfma.f64	d7, d0, d6
 8002184:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002188:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800218c:	ee17 0a90 	vmov	r0, s15
 8002190:	eeb1 5b44 	vneg.f64	d5, d4
 8002194:	ed9f 7b54 	vldr	d7, [pc, #336]	; 80022e8 <__ieee754_rem_pio2+0x220>
 8002198:	eea5 0b07 	vfma.f64	d0, d5, d7
 800219c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 80022f0 <__ieee754_rem_pio2+0x228>
 80021a0:	281f      	cmp	r0, #31
 80021a2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80021a6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80021aa:	dc08      	bgt.n	80021be <__ieee754_rem_pio2+0xf6>
 80021ac:	1e42      	subs	r2, r0, #1
 80021ae:	4b61      	ldr	r3, [pc, #388]	; (8002334 <__ieee754_rem_pio2+0x26c>)
 80021b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b4:	42b3      	cmp	r3, r6
 80021b6:	d002      	beq.n	80021be <__ieee754_rem_pio2+0xf6>
 80021b8:	ed84 6b00 	vstr	d6, [r4]
 80021bc:	e022      	b.n	8002204 <__ieee754_rem_pio2+0x13c>
 80021be:	ee16 3a90 	vmov	r3, s13
 80021c2:	1536      	asrs	r6, r6, #20
 80021c4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80021c8:	1af3      	subs	r3, r6, r3
 80021ca:	2b10      	cmp	r3, #16
 80021cc:	ddf4      	ble.n	80021b8 <__ieee754_rem_pio2+0xf0>
 80021ce:	eeb0 6b40 	vmov.f64	d6, d0
 80021d2:	ed9f 3b49 	vldr	d3, [pc, #292]	; 80022f8 <__ieee754_rem_pio2+0x230>
 80021d6:	eea5 6b03 	vfma.f64	d6, d5, d3
 80021da:	ee30 7b46 	vsub.f64	d7, d0, d6
 80021de:	eea5 7b03 	vfma.f64	d7, d5, d3
 80021e2:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8002300 <__ieee754_rem_pio2+0x238>
 80021e6:	ee94 7b03 	vfnms.f64	d7, d4, d3
 80021ea:	ee36 3b47 	vsub.f64	d3, d6, d7
 80021ee:	ee13 3a90 	vmov	r3, s7
 80021f2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80021f6:	1af6      	subs	r6, r6, r3
 80021f8:	2e31      	cmp	r6, #49	; 0x31
 80021fa:	dc17      	bgt.n	800222c <__ieee754_rem_pio2+0x164>
 80021fc:	eeb0 0b46 	vmov.f64	d0, d6
 8002200:	ed84 3b00 	vstr	d3, [r4]
 8002204:	ed94 6b00 	vldr	d6, [r4]
 8002208:	2d00      	cmp	r5, #0
 800220a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800220e:	ee30 7b47 	vsub.f64	d7, d0, d7
 8002212:	ed84 7b02 	vstr	d7, [r4, #8]
 8002216:	da87      	bge.n	8002128 <__ieee754_rem_pio2+0x60>
 8002218:	eeb1 6b46 	vneg.f64	d6, d6
 800221c:	ed84 6b00 	vstr	d6, [r4]
 8002220:	eeb1 7b47 	vneg.f64	d7, d7
 8002224:	4240      	negs	r0, r0
 8002226:	ed84 7b02 	vstr	d7, [r4, #8]
 800222a:	e77d      	b.n	8002128 <__ieee754_rem_pio2+0x60>
 800222c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 8002310 <__ieee754_rem_pio2+0x248>
 8002230:	eeb0 0b46 	vmov.f64	d0, d6
 8002234:	eea5 0b03 	vfma.f64	d0, d5, d3
 8002238:	ee36 7b40 	vsub.f64	d7, d6, d0
 800223c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8002318 <__ieee754_rem_pio2+0x250>
 8002240:	eea5 7b03 	vfma.f64	d7, d5, d3
 8002244:	ee94 7b06 	vfnms.f64	d7, d4, d6
 8002248:	ee30 6b47 	vsub.f64	d6, d0, d7
 800224c:	e7b4      	b.n	80021b8 <__ieee754_rem_pio2+0xf0>
 800224e:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <__ieee754_rem_pio2+0x270>)
 8002250:	429e      	cmp	r6, r3
 8002252:	dd06      	ble.n	8002262 <__ieee754_rem_pio2+0x19a>
 8002254:	ee30 7b40 	vsub.f64	d7, d0, d0
 8002258:	ed80 7b02 	vstr	d7, [r0, #8]
 800225c:	ed80 7b00 	vstr	d7, [r0]
 8002260:	e744      	b.n	80020ec <__ieee754_rem_pio2+0x24>
 8002262:	1532      	asrs	r2, r6, #20
 8002264:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8002268:	ee10 0a10 	vmov	r0, s0
 800226c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8002270:	ec41 0b17 	vmov	d7, r0, r1
 8002274:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8002278:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8002320 <__ieee754_rem_pio2+0x258>
 800227c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8002280:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002284:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002288:	ee27 7b05 	vmul.f64	d7, d7, d5
 800228c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8002290:	a908      	add	r1, sp, #32
 8002292:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8002296:	ee37 7b46 	vsub.f64	d7, d7, d6
 800229a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800229e:	ee27 7b05 	vmul.f64	d7, d7, d5
 80022a2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80022a6:	2303      	movs	r3, #3
 80022a8:	ed31 7b02 	vldmdb	r1!, {d7}
 80022ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80022b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80022b8:	d013      	beq.n	80022e2 <__ieee754_rem_pio2+0x21a>
 80022ba:	4920      	ldr	r1, [pc, #128]	; (800233c <__ieee754_rem_pio2+0x274>)
 80022bc:	9101      	str	r1, [sp, #4]
 80022be:	2102      	movs	r1, #2
 80022c0:	9100      	str	r1, [sp, #0]
 80022c2:	a802      	add	r0, sp, #8
 80022c4:	4621      	mov	r1, r4
 80022c6:	f000 f8a7 	bl	8002418 <__kernel_rem_pio2>
 80022ca:	2d00      	cmp	r5, #0
 80022cc:	f6bf af2c 	bge.w	8002128 <__ieee754_rem_pio2+0x60>
 80022d0:	ed94 7b00 	vldr	d7, [r4]
 80022d4:	eeb1 7b47 	vneg.f64	d7, d7
 80022d8:	ed84 7b00 	vstr	d7, [r4]
 80022dc:	ed94 7b02 	vldr	d7, [r4, #8]
 80022e0:	e79e      	b.n	8002220 <__ieee754_rem_pio2+0x158>
 80022e2:	4603      	mov	r3, r0
 80022e4:	e7e0      	b.n	80022a8 <__ieee754_rem_pio2+0x1e0>
 80022e6:	bf00      	nop
 80022e8:	54400000 	.word	0x54400000
 80022ec:	3ff921fb 	.word	0x3ff921fb
 80022f0:	1a626331 	.word	0x1a626331
 80022f4:	3dd0b461 	.word	0x3dd0b461
 80022f8:	1a600000 	.word	0x1a600000
 80022fc:	3dd0b461 	.word	0x3dd0b461
 8002300:	2e037073 	.word	0x2e037073
 8002304:	3ba3198a 	.word	0x3ba3198a
 8002308:	6dc9c883 	.word	0x6dc9c883
 800230c:	3fe45f30 	.word	0x3fe45f30
 8002310:	2e000000 	.word	0x2e000000
 8002314:	3ba3198a 	.word	0x3ba3198a
 8002318:	252049c1 	.word	0x252049c1
 800231c:	397b839a 	.word	0x397b839a
 8002320:	00000000 	.word	0x00000000
 8002324:	41700000 	.word	0x41700000
 8002328:	3fe921fb 	.word	0x3fe921fb
 800232c:	4002d97b 	.word	0x4002d97b
 8002330:	413921fb 	.word	0x413921fb
 8002334:	08002c50 	.word	0x08002c50
 8002338:	7fefffff 	.word	0x7fefffff
 800233c:	08002cd0 	.word	0x08002cd0

08002340 <__kernel_cos>:
 8002340:	ee10 1a90 	vmov	r1, s1
 8002344:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8002348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800234c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8002350:	da05      	bge.n	800235e <__kernel_cos+0x1e>
 8002352:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8002356:	ee16 3a90 	vmov	r3, s13
 800235a:	2b00      	cmp	r3, #0
 800235c:	d03d      	beq.n	80023da <__kernel_cos+0x9a>
 800235e:	ee20 4b00 	vmul.f64	d4, d0, d0
 8002362:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002366:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 80023e0 <__kernel_cos+0xa0>
 800236a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800236e:	ee24 6b06 	vmul.f64	d6, d4, d6
 8002372:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80023e8 <__kernel_cos+0xa8>
 8002376:	eea4 5b03 	vfma.f64	d5, d4, d3
 800237a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 80023f0 <__kernel_cos+0xb0>
 800237e:	eea5 3b04 	vfma.f64	d3, d5, d4
 8002382:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 80023f8 <__kernel_cos+0xb8>
 8002386:	eea3 5b04 	vfma.f64	d5, d3, d4
 800238a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 8002400 <__kernel_cos+0xc0>
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <__kernel_cos+0xd0>)
 8002390:	eea5 3b04 	vfma.f64	d3, d5, d4
 8002394:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8002408 <__kernel_cos+0xc8>
 8002398:	4299      	cmp	r1, r3
 800239a:	eea3 5b04 	vfma.f64	d5, d3, d4
 800239e:	ee25 5b04 	vmul.f64	d5, d5, d4
 80023a2:	eea4 1b05 	vfma.f64	d1, d4, d5
 80023a6:	dc04      	bgt.n	80023b2 <__kernel_cos+0x72>
 80023a8:	ee36 6b41 	vsub.f64	d6, d6, d1
 80023ac:	ee37 0b46 	vsub.f64	d0, d7, d6
 80023b0:	4770      	bx	lr
 80023b2:	4b18      	ldr	r3, [pc, #96]	; (8002414 <__kernel_cos+0xd4>)
 80023b4:	4299      	cmp	r1, r3
 80023b6:	dc0d      	bgt.n	80023d4 <__kernel_cos+0x94>
 80023b8:	2200      	movs	r2, #0
 80023ba:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80023be:	ec43 2b15 	vmov	d5, r2, r3
 80023c2:	ee37 0b45 	vsub.f64	d0, d7, d5
 80023c6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80023ca:	ee36 6b41 	vsub.f64	d6, d6, d1
 80023ce:	ee30 0b46 	vsub.f64	d0, d0, d6
 80023d2:	4770      	bx	lr
 80023d4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80023d8:	e7f3      	b.n	80023c2 <__kernel_cos+0x82>
 80023da:	eeb0 0b47 	vmov.f64	d0, d7
 80023de:	4770      	bx	lr
 80023e0:	be8838d4 	.word	0xbe8838d4
 80023e4:	bda8fae9 	.word	0xbda8fae9
 80023e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80023ec:	3e21ee9e 	.word	0x3e21ee9e
 80023f0:	809c52ad 	.word	0x809c52ad
 80023f4:	be927e4f 	.word	0xbe927e4f
 80023f8:	19cb1590 	.word	0x19cb1590
 80023fc:	3efa01a0 	.word	0x3efa01a0
 8002400:	16c15177 	.word	0x16c15177
 8002404:	bf56c16c 	.word	0xbf56c16c
 8002408:	5555554c 	.word	0x5555554c
 800240c:	3fa55555 	.word	0x3fa55555
 8002410:	3fd33332 	.word	0x3fd33332
 8002414:	3fe90000 	.word	0x3fe90000

08002418 <__kernel_rem_pio2>:
 8002418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800241c:	ed2d 8b06 	vpush	{d8-d10}
 8002420:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8002424:	469b      	mov	fp, r3
 8002426:	460e      	mov	r6, r1
 8002428:	4bc7      	ldr	r3, [pc, #796]	; (8002748 <__kernel_rem_pio2+0x330>)
 800242a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800242c:	9002      	str	r0, [sp, #8]
 800242e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8002432:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 8002434:	1ed1      	subs	r1, r2, #3
 8002436:	2318      	movs	r3, #24
 8002438:	f06f 0417 	mvn.w	r4, #23
 800243c:	fb91 f1f3 	sdiv	r1, r1, r3
 8002440:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8002444:	f10b 3aff 	add.w	sl, fp, #4294967295
 8002448:	fb01 4404 	mla	r4, r1, r4, r4
 800244c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8002730 <__kernel_rem_pio2+0x318>
 8002450:	4414      	add	r4, r2
 8002452:	eba1 050a 	sub.w	r5, r1, sl
 8002456:	aa1a      	add	r2, sp, #104	; 0x68
 8002458:	eb09 070a 	add.w	r7, r9, sl
 800245c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8002460:	4696      	mov	lr, r2
 8002462:	2300      	movs	r3, #0
 8002464:	42bb      	cmp	r3, r7
 8002466:	dd0f      	ble.n	8002488 <__kernel_rem_pio2+0x70>
 8002468:	af6a      	add	r7, sp, #424	; 0x1a8
 800246a:	2200      	movs	r2, #0
 800246c:	454a      	cmp	r2, r9
 800246e:	dc28      	bgt.n	80024c2 <__kernel_rem_pio2+0xaa>
 8002470:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8002474:	eb0b 0302 	add.w	r3, fp, r2
 8002478:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800247c:	9d02      	ldr	r5, [sp, #8]
 800247e:	ed9f 7bac 	vldr	d7, [pc, #688]	; 8002730 <__kernel_rem_pio2+0x318>
 8002482:	f04f 0c00 	mov.w	ip, #0
 8002486:	e016      	b.n	80024b6 <__kernel_rem_pio2+0x9e>
 8002488:	42dd      	cmn	r5, r3
 800248a:	d409      	bmi.n	80024a0 <__kernel_rem_pio2+0x88>
 800248c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8002490:	ee07 2a90 	vmov	s15, r2
 8002494:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002498:	ecae 7b02 	vstmia	lr!, {d7}
 800249c:	3301      	adds	r3, #1
 800249e:	e7e1      	b.n	8002464 <__kernel_rem_pio2+0x4c>
 80024a0:	eeb0 7b46 	vmov.f64	d7, d6
 80024a4:	e7f8      	b.n	8002498 <__kernel_rem_pio2+0x80>
 80024a6:	ecb5 5b02 	vldmia	r5!, {d5}
 80024aa:	ed33 6b02 	vldmdb	r3!, {d6}
 80024ae:	f10c 0c01 	add.w	ip, ip, #1
 80024b2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80024b6:	45d4      	cmp	ip, sl
 80024b8:	ddf5      	ble.n	80024a6 <__kernel_rem_pio2+0x8e>
 80024ba:	eca7 7b02 	vstmia	r7!, {d7}
 80024be:	3201      	adds	r2, #1
 80024c0:	e7d4      	b.n	800246c <__kernel_rem_pio2+0x54>
 80024c2:	ab06      	add	r3, sp, #24
 80024c4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80024c8:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 8002738 <__kernel_rem_pio2+0x320>
 80024cc:	ed9f ab9c 	vldr	d10, [pc, #624]	; 8002740 <__kernel_rem_pio2+0x328>
 80024d0:	9304      	str	r3, [sp, #16]
 80024d2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80024d6:	9303      	str	r3, [sp, #12]
 80024d8:	464d      	mov	r5, r9
 80024da:	ab92      	add	r3, sp, #584	; 0x248
 80024dc:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 80024e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80024e4:	3f01      	subs	r7, #1
 80024e6:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 80024ea:	00ff      	lsls	r7, r7, #3
 80024ec:	ab92      	add	r3, sp, #584	; 0x248
 80024ee:	19da      	adds	r2, r3, r7
 80024f0:	3a98      	subs	r2, #152	; 0x98
 80024f2:	2300      	movs	r3, #0
 80024f4:	1ae9      	subs	r1, r5, r3
 80024f6:	2900      	cmp	r1, #0
 80024f8:	dc4e      	bgt.n	8002598 <__kernel_rem_pio2+0x180>
 80024fa:	4620      	mov	r0, r4
 80024fc:	f000 fb04 	bl	8002b08 <scalbn>
 8002500:	eeb0 8b40 	vmov.f64	d8, d0
 8002504:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8002508:	ee28 0b00 	vmul.f64	d0, d8, d0
 800250c:	f000 fa84 	bl	8002a18 <floor>
 8002510:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8002514:	eea0 8b47 	vfms.f64	d8, d0, d7
 8002518:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800251c:	2c00      	cmp	r4, #0
 800251e:	edcd 7a01 	vstr	s15, [sp, #4]
 8002522:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002526:	ee38 8b47 	vsub.f64	d8, d8, d7
 800252a:	dd4a      	ble.n	80025c2 <__kernel_rem_pio2+0x1aa>
 800252c:	1e69      	subs	r1, r5, #1
 800252e:	ab06      	add	r3, sp, #24
 8002530:	f1c4 0018 	rsb	r0, r4, #24
 8002534:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8002538:	9a01      	ldr	r2, [sp, #4]
 800253a:	fa4c f300 	asr.w	r3, ip, r0
 800253e:	441a      	add	r2, r3
 8002540:	4083      	lsls	r3, r0
 8002542:	9201      	str	r2, [sp, #4]
 8002544:	ebac 0203 	sub.w	r2, ip, r3
 8002548:	ab06      	add	r3, sp, #24
 800254a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800254e:	f1c4 0317 	rsb	r3, r4, #23
 8002552:	fa42 f803 	asr.w	r8, r2, r3
 8002556:	f1b8 0f00 	cmp.w	r8, #0
 800255a:	dd43      	ble.n	80025e4 <__kernel_rem_pio2+0x1cc>
 800255c:	9b01      	ldr	r3, [sp, #4]
 800255e:	2000      	movs	r0, #0
 8002560:	3301      	adds	r3, #1
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	4601      	mov	r1, r0
 8002566:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800256a:	4285      	cmp	r5, r0
 800256c:	dc6e      	bgt.n	800264c <__kernel_rem_pio2+0x234>
 800256e:	2c00      	cmp	r4, #0
 8002570:	dd04      	ble.n	800257c <__kernel_rem_pio2+0x164>
 8002572:	2c01      	cmp	r4, #1
 8002574:	d07f      	beq.n	8002676 <__kernel_rem_pio2+0x25e>
 8002576:	2c02      	cmp	r4, #2
 8002578:	f000 8087 	beq.w	800268a <__kernel_rem_pio2+0x272>
 800257c:	f1b8 0f02 	cmp.w	r8, #2
 8002580:	d130      	bne.n	80025e4 <__kernel_rem_pio2+0x1cc>
 8002582:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8002586:	ee30 8b48 	vsub.f64	d8, d0, d8
 800258a:	b359      	cbz	r1, 80025e4 <__kernel_rem_pio2+0x1cc>
 800258c:	4620      	mov	r0, r4
 800258e:	f000 fabb 	bl	8002b08 <scalbn>
 8002592:	ee38 8b40 	vsub.f64	d8, d8, d0
 8002596:	e025      	b.n	80025e4 <__kernel_rem_pio2+0x1cc>
 8002598:	ee20 7b09 	vmul.f64	d7, d0, d9
 800259c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80025a0:	a806      	add	r0, sp, #24
 80025a2:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80025a6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80025aa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80025ae:	ee10 1a10 	vmov	r1, s0
 80025b2:	ed32 0b02 	vldmdb	r2!, {d0}
 80025b6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80025ba:	ee37 0b00 	vadd.f64	d0, d7, d0
 80025be:	3301      	adds	r3, #1
 80025c0:	e798      	b.n	80024f4 <__kernel_rem_pio2+0xdc>
 80025c2:	d106      	bne.n	80025d2 <__kernel_rem_pio2+0x1ba>
 80025c4:	1e6b      	subs	r3, r5, #1
 80025c6:	aa06      	add	r2, sp, #24
 80025c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025cc:	ea4f 58e2 	mov.w	r8, r2, asr #23
 80025d0:	e7c1      	b.n	8002556 <__kernel_rem_pio2+0x13e>
 80025d2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80025d6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80025da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025de:	da32      	bge.n	8002646 <__kernel_rem_pio2+0x22e>
 80025e0:	f04f 0800 	mov.w	r8, #0
 80025e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80025e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ec:	f040 80b0 	bne.w	8002750 <__kernel_rem_pio2+0x338>
 80025f0:	1e6b      	subs	r3, r5, #1
 80025f2:	4618      	mov	r0, r3
 80025f4:	2200      	movs	r2, #0
 80025f6:	4548      	cmp	r0, r9
 80025f8:	da4e      	bge.n	8002698 <__kernel_rem_pio2+0x280>
 80025fa:	2a00      	cmp	r2, #0
 80025fc:	f000 8088 	beq.w	8002710 <__kernel_rem_pio2+0x2f8>
 8002600:	aa06      	add	r2, sp, #24
 8002602:	3c18      	subs	r4, #24
 8002604:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002608:	2900      	cmp	r1, #0
 800260a:	f000 808e 	beq.w	800272a <__kernel_rem_pio2+0x312>
 800260e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8002612:	4620      	mov	r0, r4
 8002614:	9302      	str	r3, [sp, #8]
 8002616:	f000 fa77 	bl	8002b08 <scalbn>
 800261a:	9b02      	ldr	r3, [sp, #8]
 800261c:	aa6a      	add	r2, sp, #424	; 0x1a8
 800261e:	00d9      	lsls	r1, r3, #3
 8002620:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8002738 <__kernel_rem_pio2+0x320>
 8002624:	1850      	adds	r0, r2, r1
 8002626:	f100 0508 	add.w	r5, r0, #8
 800262a:	461c      	mov	r4, r3
 800262c:	2c00      	cmp	r4, #0
 800262e:	f280 80bd 	bge.w	80027ac <__kernel_rem_pio2+0x394>
 8002632:	2500      	movs	r5, #0
 8002634:	1b5c      	subs	r4, r3, r5
 8002636:	2c00      	cmp	r4, #0
 8002638:	f2c0 80dd 	blt.w	80027f6 <__kernel_rem_pio2+0x3de>
 800263c:	4f43      	ldr	r7, [pc, #268]	; (800274c <__kernel_rem_pio2+0x334>)
 800263e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8002730 <__kernel_rem_pio2+0x318>
 8002642:	2400      	movs	r4, #0
 8002644:	e0cb      	b.n	80027de <__kernel_rem_pio2+0x3c6>
 8002646:	f04f 0802 	mov.w	r8, #2
 800264a:	e787      	b.n	800255c <__kernel_rem_pio2+0x144>
 800264c:	ab06      	add	r3, sp, #24
 800264e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002652:	b949      	cbnz	r1, 8002668 <__kernel_rem_pio2+0x250>
 8002654:	b12b      	cbz	r3, 8002662 <__kernel_rem_pio2+0x24a>
 8002656:	aa06      	add	r2, sp, #24
 8002658:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800265c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002660:	2301      	movs	r3, #1
 8002662:	3001      	adds	r0, #1
 8002664:	4619      	mov	r1, r3
 8002666:	e780      	b.n	800256a <__kernel_rem_pio2+0x152>
 8002668:	aa06      	add	r2, sp, #24
 800266a:	ebac 0303 	sub.w	r3, ip, r3
 800266e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002672:	460b      	mov	r3, r1
 8002674:	e7f5      	b.n	8002662 <__kernel_rem_pio2+0x24a>
 8002676:	1e68      	subs	r0, r5, #1
 8002678:	ab06      	add	r3, sp, #24
 800267a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800267e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002682:	aa06      	add	r2, sp, #24
 8002684:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8002688:	e778      	b.n	800257c <__kernel_rem_pio2+0x164>
 800268a:	1e68      	subs	r0, r5, #1
 800268c:	ab06      	add	r3, sp, #24
 800268e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002692:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002696:	e7f4      	b.n	8002682 <__kernel_rem_pio2+0x26a>
 8002698:	a906      	add	r1, sp, #24
 800269a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800269e:	3801      	subs	r0, #1
 80026a0:	430a      	orrs	r2, r1
 80026a2:	e7a8      	b.n	80025f6 <__kernel_rem_pio2+0x1de>
 80026a4:	f10c 0c01 	add.w	ip, ip, #1
 80026a8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80026ac:	2a00      	cmp	r2, #0
 80026ae:	d0f9      	beq.n	80026a4 <__kernel_rem_pio2+0x28c>
 80026b0:	eb0b 0305 	add.w	r3, fp, r5
 80026b4:	aa1a      	add	r2, sp, #104	; 0x68
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	1898      	adds	r0, r3, r2
 80026ba:	3008      	adds	r0, #8
 80026bc:	1c69      	adds	r1, r5, #1
 80026be:	3708      	adds	r7, #8
 80026c0:	2200      	movs	r2, #0
 80026c2:	4465      	add	r5, ip
 80026c4:	9005      	str	r0, [sp, #20]
 80026c6:	428d      	cmp	r5, r1
 80026c8:	f6ff af07 	blt.w	80024da <__kernel_rem_pio2+0xc2>
 80026cc:	a81a      	add	r0, sp, #104	; 0x68
 80026ce:	eb02 0c03 	add.w	ip, r2, r3
 80026d2:	4484      	add	ip, r0
 80026d4:	9803      	ldr	r0, [sp, #12]
 80026d6:	f8dd e008 	ldr.w	lr, [sp, #8]
 80026da:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80026de:	9001      	str	r0, [sp, #4]
 80026e0:	ee07 0a90 	vmov	s15, r0
 80026e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80026e8:	9805      	ldr	r0, [sp, #20]
 80026ea:	ed8c 7b00 	vstr	d7, [ip]
 80026ee:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8002730 <__kernel_rem_pio2+0x318>
 80026f2:	eb00 0802 	add.w	r8, r0, r2
 80026f6:	f04f 0c00 	mov.w	ip, #0
 80026fa:	45d4      	cmp	ip, sl
 80026fc:	dd0c      	ble.n	8002718 <__kernel_rem_pio2+0x300>
 80026fe:	eb02 0c07 	add.w	ip, r2, r7
 8002702:	a86a      	add	r0, sp, #424	; 0x1a8
 8002704:	4484      	add	ip, r0
 8002706:	ed8c 7b02 	vstr	d7, [ip, #8]
 800270a:	3101      	adds	r1, #1
 800270c:	3208      	adds	r2, #8
 800270e:	e7da      	b.n	80026c6 <__kernel_rem_pio2+0x2ae>
 8002710:	9b04      	ldr	r3, [sp, #16]
 8002712:	f04f 0c01 	mov.w	ip, #1
 8002716:	e7c7      	b.n	80026a8 <__kernel_rem_pio2+0x290>
 8002718:	ecbe 5b02 	vldmia	lr!, {d5}
 800271c:	ed38 6b02 	vldmdb	r8!, {d6}
 8002720:	f10c 0c01 	add.w	ip, ip, #1
 8002724:	eea5 7b06 	vfma.f64	d7, d5, d6
 8002728:	e7e7      	b.n	80026fa <__kernel_rem_pio2+0x2e2>
 800272a:	3b01      	subs	r3, #1
 800272c:	e768      	b.n	8002600 <__kernel_rem_pio2+0x1e8>
 800272e:	bf00      	nop
	...
 800273c:	3e700000 	.word	0x3e700000
 8002740:	00000000 	.word	0x00000000
 8002744:	41700000 	.word	0x41700000
 8002748:	08002e18 	.word	0x08002e18
 800274c:	08002dd8 	.word	0x08002dd8
 8002750:	4260      	negs	r0, r4
 8002752:	eeb0 0b48 	vmov.f64	d0, d8
 8002756:	f000 f9d7 	bl	8002b08 <scalbn>
 800275a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8002938 <__kernel_rem_pio2+0x520>
 800275e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8002762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002766:	db18      	blt.n	800279a <__kernel_rem_pio2+0x382>
 8002768:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8002940 <__kernel_rem_pio2+0x528>
 800276c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8002770:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8002774:	aa06      	add	r2, sp, #24
 8002776:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800277a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800277e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8002782:	a906      	add	r1, sp, #24
 8002784:	ee10 3a10 	vmov	r3, s0
 8002788:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800278c:	1c6b      	adds	r3, r5, #1
 800278e:	ee17 2a10 	vmov	r2, s14
 8002792:	3418      	adds	r4, #24
 8002794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002798:	e739      	b.n	800260e <__kernel_rem_pio2+0x1f6>
 800279a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800279e:	aa06      	add	r2, sp, #24
 80027a0:	ee10 3a10 	vmov	r3, s0
 80027a4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80027a8:	462b      	mov	r3, r5
 80027aa:	e730      	b.n	800260e <__kernel_rem_pio2+0x1f6>
 80027ac:	aa06      	add	r2, sp, #24
 80027ae:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80027b2:	9202      	str	r2, [sp, #8]
 80027b4:	ee07 2a90 	vmov	s15, r2
 80027b8:	3c01      	subs	r4, #1
 80027ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80027be:	ee27 7b00 	vmul.f64	d7, d7, d0
 80027c2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80027c6:	ed25 7b02 	vstmdb	r5!, {d7}
 80027ca:	e72f      	b.n	800262c <__kernel_rem_pio2+0x214>
 80027cc:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 80027d0:	ecb7 5b02 	vldmia	r7!, {d5}
 80027d4:	ed9c 6b00 	vldr	d6, [ip]
 80027d8:	3401      	adds	r4, #1
 80027da:	eea5 7b06 	vfma.f64	d7, d5, d6
 80027de:	454c      	cmp	r4, r9
 80027e0:	dc01      	bgt.n	80027e6 <__kernel_rem_pio2+0x3ce>
 80027e2:	42a5      	cmp	r5, r4
 80027e4:	daf2      	bge.n	80027cc <__kernel_rem_pio2+0x3b4>
 80027e6:	aa42      	add	r2, sp, #264	; 0x108
 80027e8:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 80027ec:	ed84 7b00 	vstr	d7, [r4]
 80027f0:	3501      	adds	r5, #1
 80027f2:	3808      	subs	r0, #8
 80027f4:	e71e      	b.n	8002634 <__kernel_rem_pio2+0x21c>
 80027f6:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80027f8:	2a03      	cmp	r2, #3
 80027fa:	d84e      	bhi.n	800289a <__kernel_rem_pio2+0x482>
 80027fc:	e8df f002 	tbb	[pc, r2]
 8002800:	021f1f3e 	.word	0x021f1f3e
 8002804:	3108      	adds	r1, #8
 8002806:	aa42      	add	r2, sp, #264	; 0x108
 8002808:	4411      	add	r1, r2
 800280a:	4608      	mov	r0, r1
 800280c:	461c      	mov	r4, r3
 800280e:	2c00      	cmp	r4, #0
 8002810:	dc61      	bgt.n	80028d6 <__kernel_rem_pio2+0x4be>
 8002812:	4608      	mov	r0, r1
 8002814:	461c      	mov	r4, r3
 8002816:	2c01      	cmp	r4, #1
 8002818:	dc6d      	bgt.n	80028f6 <__kernel_rem_pio2+0x4de>
 800281a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8002948 <__kernel_rem_pio2+0x530>
 800281e:	2b01      	cmp	r3, #1
 8002820:	dc79      	bgt.n	8002916 <__kernel_rem_pio2+0x4fe>
 8002822:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8002826:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800282a:	f1b8 0f00 	cmp.w	r8, #0
 800282e:	d178      	bne.n	8002922 <__kernel_rem_pio2+0x50a>
 8002830:	ed86 5b00 	vstr	d5, [r6]
 8002834:	ed86 6b02 	vstr	d6, [r6, #8]
 8002838:	ed86 7b04 	vstr	d7, [r6, #16]
 800283c:	e02d      	b.n	800289a <__kernel_rem_pio2+0x482>
 800283e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8002948 <__kernel_rem_pio2+0x530>
 8002842:	3108      	adds	r1, #8
 8002844:	aa42      	add	r2, sp, #264	; 0x108
 8002846:	4411      	add	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	2800      	cmp	r0, #0
 800284c:	da34      	bge.n	80028b8 <__kernel_rem_pio2+0x4a0>
 800284e:	f1b8 0f00 	cmp.w	r8, #0
 8002852:	d037      	beq.n	80028c4 <__kernel_rem_pio2+0x4ac>
 8002854:	eeb1 7b46 	vneg.f64	d7, d6
 8002858:	ed86 7b00 	vstr	d7, [r6]
 800285c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8002860:	a844      	add	r0, sp, #272	; 0x110
 8002862:	2101      	movs	r1, #1
 8002864:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002868:	428b      	cmp	r3, r1
 800286a:	da2e      	bge.n	80028ca <__kernel_rem_pio2+0x4b2>
 800286c:	f1b8 0f00 	cmp.w	r8, #0
 8002870:	d001      	beq.n	8002876 <__kernel_rem_pio2+0x45e>
 8002872:	eeb1 7b47 	vneg.f64	d7, d7
 8002876:	ed86 7b02 	vstr	d7, [r6, #8]
 800287a:	e00e      	b.n	800289a <__kernel_rem_pio2+0x482>
 800287c:	aa92      	add	r2, sp, #584	; 0x248
 800287e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8002948 <__kernel_rem_pio2+0x530>
 8002882:	4411      	add	r1, r2
 8002884:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8002888:	2b00      	cmp	r3, #0
 800288a:	da0f      	bge.n	80028ac <__kernel_rem_pio2+0x494>
 800288c:	f1b8 0f00 	cmp.w	r8, #0
 8002890:	d001      	beq.n	8002896 <__kernel_rem_pio2+0x47e>
 8002892:	eeb1 7b47 	vneg.f64	d7, d7
 8002896:	ed86 7b00 	vstr	d7, [r6]
 800289a:	9b01      	ldr	r3, [sp, #4]
 800289c:	f003 0007 	and.w	r0, r3, #7
 80028a0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80028a4:	ecbd 8b06 	vpop	{d8-d10}
 80028a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028ac:	ed31 6b02 	vldmdb	r1!, {d6}
 80028b0:	3b01      	subs	r3, #1
 80028b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80028b6:	e7e7      	b.n	8002888 <__kernel_rem_pio2+0x470>
 80028b8:	ed31 7b02 	vldmdb	r1!, {d7}
 80028bc:	3801      	subs	r0, #1
 80028be:	ee36 6b07 	vadd.f64	d6, d6, d7
 80028c2:	e7c2      	b.n	800284a <__kernel_rem_pio2+0x432>
 80028c4:	eeb0 7b46 	vmov.f64	d7, d6
 80028c8:	e7c6      	b.n	8002858 <__kernel_rem_pio2+0x440>
 80028ca:	ecb0 6b02 	vldmia	r0!, {d6}
 80028ce:	3101      	adds	r1, #1
 80028d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80028d4:	e7c8      	b.n	8002868 <__kernel_rem_pio2+0x450>
 80028d6:	ed10 7b04 	vldr	d7, [r0, #-16]
 80028da:	ed30 5b02 	vldmdb	r0!, {d5}
 80028de:	3c01      	subs	r4, #1
 80028e0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80028e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80028e8:	ed00 6b02 	vstr	d6, [r0, #-8]
 80028ec:	ee37 7b05 	vadd.f64	d7, d7, d5
 80028f0:	ed80 7b00 	vstr	d7, [r0]
 80028f4:	e78b      	b.n	800280e <__kernel_rem_pio2+0x3f6>
 80028f6:	ed10 7b04 	vldr	d7, [r0, #-16]
 80028fa:	ed30 5b02 	vldmdb	r0!, {d5}
 80028fe:	3c01      	subs	r4, #1
 8002900:	ee37 6b05 	vadd.f64	d6, d7, d5
 8002904:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002908:	ed00 6b02 	vstr	d6, [r0, #-8]
 800290c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8002910:	ed80 7b00 	vstr	d7, [r0]
 8002914:	e77f      	b.n	8002816 <__kernel_rem_pio2+0x3fe>
 8002916:	ed31 6b02 	vldmdb	r1!, {d6}
 800291a:	3b01      	subs	r3, #1
 800291c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002920:	e77d      	b.n	800281e <__kernel_rem_pio2+0x406>
 8002922:	eeb1 5b45 	vneg.f64	d5, d5
 8002926:	eeb1 6b46 	vneg.f64	d6, d6
 800292a:	ed86 5b00 	vstr	d5, [r6]
 800292e:	eeb1 7b47 	vneg.f64	d7, d7
 8002932:	ed86 6b02 	vstr	d6, [r6, #8]
 8002936:	e77f      	b.n	8002838 <__kernel_rem_pio2+0x420>
 8002938:	00000000 	.word	0x00000000
 800293c:	41700000 	.word	0x41700000
 8002940:	00000000 	.word	0x00000000
 8002944:	3e700000 	.word	0x3e700000
	...

08002950 <__kernel_sin>:
 8002950:	ee10 3a90 	vmov	r3, s1
 8002954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002958:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800295c:	da04      	bge.n	8002968 <__kernel_sin+0x18>
 800295e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8002962:	ee17 3a90 	vmov	r3, s15
 8002966:	b35b      	cbz	r3, 80029c0 <__kernel_sin+0x70>
 8002968:	ee20 6b00 	vmul.f64	d6, d0, d0
 800296c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8002970:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80029c8 <__kernel_sin+0x78>
 8002974:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80029d0 <__kernel_sin+0x80>
 8002978:	eea6 4b07 	vfma.f64	d4, d6, d7
 800297c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80029d8 <__kernel_sin+0x88>
 8002980:	eea4 7b06 	vfma.f64	d7, d4, d6
 8002984:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80029e0 <__kernel_sin+0x90>
 8002988:	eea7 4b06 	vfma.f64	d4, d7, d6
 800298c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80029e8 <__kernel_sin+0x98>
 8002990:	eea4 7b06 	vfma.f64	d7, d4, d6
 8002994:	b930      	cbnz	r0, 80029a4 <__kernel_sin+0x54>
 8002996:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80029f0 <__kernel_sin+0xa0>
 800299a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800299e:	eea4 0b05 	vfma.f64	d0, d4, d5
 80029a2:	4770      	bx	lr
 80029a4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80029a8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80029ac:	eea1 7b04 	vfma.f64	d7, d1, d4
 80029b0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80029b4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80029f8 <__kernel_sin+0xa8>
 80029b8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80029bc:	ee30 0b41 	vsub.f64	d0, d0, d1
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	f3af 8000 	nop.w
 80029c8:	5acfd57c 	.word	0x5acfd57c
 80029cc:	3de5d93a 	.word	0x3de5d93a
 80029d0:	8a2b9ceb 	.word	0x8a2b9ceb
 80029d4:	be5ae5e6 	.word	0xbe5ae5e6
 80029d8:	57b1fe7d 	.word	0x57b1fe7d
 80029dc:	3ec71de3 	.word	0x3ec71de3
 80029e0:	19c161d5 	.word	0x19c161d5
 80029e4:	bf2a01a0 	.word	0xbf2a01a0
 80029e8:	1110f8a6 	.word	0x1110f8a6
 80029ec:	3f811111 	.word	0x3f811111
 80029f0:	55555549 	.word	0x55555549
 80029f4:	bfc55555 	.word	0xbfc55555
 80029f8:	55555549 	.word	0x55555549
 80029fc:	3fc55555 	.word	0x3fc55555

08002a00 <fabs>:
 8002a00:	ec51 0b10 	vmov	r0, r1, d0
 8002a04:	ee10 2a10 	vmov	r2, s0
 8002a08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002a0c:	ec43 2b10 	vmov	d0, r2, r3
 8002a10:	4770      	bx	lr
 8002a12:	0000      	movs	r0, r0
 8002a14:	0000      	movs	r0, r0
	...

08002a18 <floor>:
 8002a18:	ee10 1a90 	vmov	r1, s1
 8002a1c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002a20:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8002a24:	2b13      	cmp	r3, #19
 8002a26:	b530      	push	{r4, r5, lr}
 8002a28:	ee10 0a10 	vmov	r0, s0
 8002a2c:	ee10 5a10 	vmov	r5, s0
 8002a30:	dc33      	bgt.n	8002a9a <floor+0x82>
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	da17      	bge.n	8002a66 <floor+0x4e>
 8002a36:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8002af8 <floor+0xe0>
 8002a3a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8002a3e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8002a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a46:	dd09      	ble.n	8002a5c <floor+0x44>
 8002a48:	2900      	cmp	r1, #0
 8002a4a:	da50      	bge.n	8002aee <floor+0xd6>
 8002a4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002a50:	4a2b      	ldr	r2, [pc, #172]	; (8002b00 <floor+0xe8>)
 8002a52:	4303      	orrs	r3, r0
 8002a54:	2000      	movs	r0, #0
 8002a56:	4283      	cmp	r3, r0
 8002a58:	bf18      	it	ne
 8002a5a:	4611      	movne	r1, r2
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4602      	mov	r2, r0
 8002a60:	ec43 2b10 	vmov	d0, r2, r3
 8002a64:	e020      	b.n	8002aa8 <floor+0x90>
 8002a66:	4a27      	ldr	r2, [pc, #156]	; (8002b04 <floor+0xec>)
 8002a68:	411a      	asrs	r2, r3
 8002a6a:	ea01 0402 	and.w	r4, r1, r2
 8002a6e:	4304      	orrs	r4, r0
 8002a70:	d01a      	beq.n	8002aa8 <floor+0x90>
 8002a72:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8002af8 <floor+0xe0>
 8002a76:	ee30 0b07 	vadd.f64	d0, d0, d7
 8002a7a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8002a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a82:	ddeb      	ble.n	8002a5c <floor+0x44>
 8002a84:	2900      	cmp	r1, #0
 8002a86:	bfbe      	ittt	lt
 8002a88:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8002a8c:	fa40 f303 	asrlt.w	r3, r0, r3
 8002a90:	18c9      	addlt	r1, r1, r3
 8002a92:	ea21 0102 	bic.w	r1, r1, r2
 8002a96:	2000      	movs	r0, #0
 8002a98:	e7e0      	b.n	8002a5c <floor+0x44>
 8002a9a:	2b33      	cmp	r3, #51	; 0x33
 8002a9c:	dd05      	ble.n	8002aaa <floor+0x92>
 8002a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa2:	d101      	bne.n	8002aa8 <floor+0x90>
 8002aa4:	ee30 0b00 	vadd.f64	d0, d0, d0
 8002aa8:	bd30      	pop	{r4, r5, pc}
 8002aaa:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8002aae:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab2:	40e2      	lsrs	r2, r4
 8002ab4:	4202      	tst	r2, r0
 8002ab6:	d0f7      	beq.n	8002aa8 <floor+0x90>
 8002ab8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8002af8 <floor+0xe0>
 8002abc:	ee30 0b07 	vadd.f64	d0, d0, d7
 8002ac0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8002ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac8:	ddc8      	ble.n	8002a5c <floor+0x44>
 8002aca:	2900      	cmp	r1, #0
 8002acc:	da02      	bge.n	8002ad4 <floor+0xbc>
 8002ace:	2b14      	cmp	r3, #20
 8002ad0:	d103      	bne.n	8002ada <floor+0xc2>
 8002ad2:	3101      	adds	r1, #1
 8002ad4:	ea20 0002 	bic.w	r0, r0, r2
 8002ad8:	e7c0      	b.n	8002a5c <floor+0x44>
 8002ada:	2401      	movs	r4, #1
 8002adc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8002ae0:	fa04 f303 	lsl.w	r3, r4, r3
 8002ae4:	4418      	add	r0, r3
 8002ae6:	42a8      	cmp	r0, r5
 8002ae8:	bf38      	it	cc
 8002aea:	1909      	addcc	r1, r1, r4
 8002aec:	e7f2      	b.n	8002ad4 <floor+0xbc>
 8002aee:	2000      	movs	r0, #0
 8002af0:	4601      	mov	r1, r0
 8002af2:	e7b3      	b.n	8002a5c <floor+0x44>
 8002af4:	f3af 8000 	nop.w
 8002af8:	8800759c 	.word	0x8800759c
 8002afc:	7e37e43c 	.word	0x7e37e43c
 8002b00:	bff00000 	.word	0xbff00000
 8002b04:	000fffff 	.word	0x000fffff

08002b08 <scalbn>:
 8002b08:	b500      	push	{lr}
 8002b0a:	ed2d 8b02 	vpush	{d8}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	ed8d 0b00 	vstr	d0, [sp]
 8002b14:	9b01      	ldr	r3, [sp, #4]
 8002b16:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8002b1a:	b9a2      	cbnz	r2, 8002b46 <scalbn+0x3e>
 8002b1c:	9a00      	ldr	r2, [sp, #0]
 8002b1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b22:	4313      	orrs	r3, r2
 8002b24:	d03a      	beq.n	8002b9c <scalbn+0x94>
 8002b26:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8002be0 <scalbn+0xd8>
 8002b2a:	4b35      	ldr	r3, [pc, #212]	; (8002c00 <scalbn+0xf8>)
 8002b2c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8002b30:	4298      	cmp	r0, r3
 8002b32:	ed8d 7b00 	vstr	d7, [sp]
 8002b36:	da11      	bge.n	8002b5c <scalbn+0x54>
 8002b38:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8002be8 <scalbn+0xe0>
 8002b3c:	ed9d 6b00 	vldr	d6, [sp]
 8002b40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b44:	e007      	b.n	8002b56 <scalbn+0x4e>
 8002b46:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002b4a:	428a      	cmp	r2, r1
 8002b4c:	d10a      	bne.n	8002b64 <scalbn+0x5c>
 8002b4e:	ed9d 7b00 	vldr	d7, [sp]
 8002b52:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002b56:	ed8d 7b00 	vstr	d7, [sp]
 8002b5a:	e01f      	b.n	8002b9c <scalbn+0x94>
 8002b5c:	9b01      	ldr	r3, [sp, #4]
 8002b5e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8002b62:	3a36      	subs	r2, #54	; 0x36
 8002b64:	4402      	add	r2, r0
 8002b66:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8002b6a:	428a      	cmp	r2, r1
 8002b6c:	dd0a      	ble.n	8002b84 <scalbn+0x7c>
 8002b6e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8002bf0 <scalbn+0xe8>
 8002b72:	eeb0 0b48 	vmov.f64	d0, d8
 8002b76:	ed9d 1b00 	vldr	d1, [sp]
 8002b7a:	f000 f843 	bl	8002c04 <copysign>
 8002b7e:	ee20 7b08 	vmul.f64	d7, d0, d8
 8002b82:	e7e8      	b.n	8002b56 <scalbn+0x4e>
 8002b84:	2a00      	cmp	r2, #0
 8002b86:	dd10      	ble.n	8002baa <scalbn+0xa2>
 8002b88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002b8c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002b90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002b94:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8002b98:	e9cd 0100 	strd	r0, r1, [sp]
 8002b9c:	ed9d 0b00 	vldr	d0, [sp]
 8002ba0:	b003      	add	sp, #12
 8002ba2:	ecbd 8b02 	vpop	{d8}
 8002ba6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002baa:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8002bae:	da06      	bge.n	8002bbe <scalbn+0xb6>
 8002bb0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002bb4:	4298      	cmp	r0, r3
 8002bb6:	dcda      	bgt.n	8002b6e <scalbn+0x66>
 8002bb8:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8002be8 <scalbn+0xe0>
 8002bbc:	e7d9      	b.n	8002b72 <scalbn+0x6a>
 8002bbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002bc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8002bc6:	3236      	adds	r2, #54	; 0x36
 8002bc8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002bcc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8002bd0:	ec41 0b17 	vmov	d7, r0, r1
 8002bd4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8002bf8 <scalbn+0xf0>
 8002bd8:	e7b2      	b.n	8002b40 <scalbn+0x38>
 8002bda:	bf00      	nop
 8002bdc:	f3af 8000 	nop.w
 8002be0:	00000000 	.word	0x00000000
 8002be4:	43500000 	.word	0x43500000
 8002be8:	c2f8f359 	.word	0xc2f8f359
 8002bec:	01a56e1f 	.word	0x01a56e1f
 8002bf0:	8800759c 	.word	0x8800759c
 8002bf4:	7e37e43c 	.word	0x7e37e43c
 8002bf8:	00000000 	.word	0x00000000
 8002bfc:	3c900000 	.word	0x3c900000
 8002c00:	ffff3cb0 	.word	0xffff3cb0

08002c04 <copysign>:
 8002c04:	ec51 0b10 	vmov	r0, r1, d0
 8002c08:	ee11 0a90 	vmov	r0, s3
 8002c0c:	ee10 2a10 	vmov	r2, s0
 8002c10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002c14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8002c18:	ea41 0300 	orr.w	r3, r1, r0
 8002c1c:	ec43 2b10 	vmov	d0, r2, r3
 8002c20:	4770      	bx	lr
	...

08002c24 <_init>:
 8002c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c26:	bf00      	nop
 8002c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c2a:	bc08      	pop	{r3}
 8002c2c:	469e      	mov	lr, r3
 8002c2e:	4770      	bx	lr

08002c30 <_fini>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	bf00      	nop
 8002c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c36:	bc08      	pop	{r3}
 8002c38:	469e      	mov	lr, r3
 8002c3a:	4770      	bx	lr
