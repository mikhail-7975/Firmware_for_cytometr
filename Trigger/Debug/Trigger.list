
Trigger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800601c  0800601c  0001601c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006088  08006088  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08006088  08006088  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006088  08006088  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006088  08006088  00016088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800608c  0800608c  0001608c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08006090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001890  2000017c  0800620c  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a0c  0800620c  00021a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011eb1  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002dbd  00000000  00000000  00032056  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c08  00000000  00000000  00034e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa0  00000000  00000000  00035a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b89  00000000  00000000  000364c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d11c  00000000  00000000  0004d049  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072291  00000000  00000000  0005a165  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc3f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed8  00000000  00000000  000cc474  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006004 	.word	0x08006004

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08006004 	.word	0x08006004

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa57 	bl	8000604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f823 	bl	80001a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8db 	bl	8000314 <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f8bb 	bl	80002d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000162:	f000 f87b 	bl	800025c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000166:	f005 fab7 	bl	80056d8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  for(int i = 0; i < TRACE_SIZE; i++) {
 800016a:	2300      	movs	r3, #0
 800016c:	607b      	str	r3, [r7, #4]
 800016e:	e007      	b.n	8000180 <main+0x34>
 	  dataFromADC[i] = 0;
 8000170:	4a09      	ldr	r2, [pc, #36]	; (8000198 <main+0x4c>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2100      	movs	r1, #0
 8000176:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i = 0; i < TRACE_SIZE; i++) {
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	3301      	adds	r3, #1
 800017e:	607b      	str	r3, [r7, #4]
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000186:	dbf3      	blt.n	8000170 <main+0x24>
   }
   HAL_ADC_Start_DMA(&hadc1, &dataFromADC, TRACE_SIZE);
 8000188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800018c:	4902      	ldr	r1, [pc, #8]	; (8000198 <main+0x4c>)
 800018e:	4803      	ldr	r0, [pc, #12]	; (800019c <main+0x50>)
 8000190:	f000 fb72 	bl	8000878 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000194:	e7fe      	b.n	8000194 <main+0x48>
 8000196:	bf00      	nop
 8000198:	20000438 	.word	0x20000438
 800019c:	200003c0 	.word	0x200003c0

080001a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b094      	sub	sp, #80	; 0x50
 80001a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001aa:	2228      	movs	r2, #40	; 0x28
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f005 ff20 	bl	8005ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b4:	f107 0314 	add.w	r3, r7, #20
 80001b8:	2200      	movs	r2, #0
 80001ba:	601a      	str	r2, [r3, #0]
 80001bc:	605a      	str	r2, [r3, #4]
 80001be:	609a      	str	r2, [r3, #8]
 80001c0:	60da      	str	r2, [r3, #12]
 80001c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d0:	2301      	movs	r3, #1
 80001d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001da:	2300      	movs	r3, #0
 80001dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001de:	2301      	movs	r3, #1
 80001e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e2:	2302      	movs	r3, #2
 80001e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80001ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80001f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001f6:	4618      	mov	r0, r3
 80001f8:	f002 f948 	bl	800248c <HAL_RCC_OscConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000202:	f000 f8c7 	bl	8000394 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000206:	230f      	movs	r3, #15
 8000208:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800020a:	2302      	movs	r3, #2
 800020c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000216:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800021c:	f107 0314 	add.w	r3, r7, #20
 8000220:	2101      	movs	r1, #1
 8000222:	4618      	mov	r0, r3
 8000224:	f002 fbb2 	bl	800298c <HAL_RCC_ClockConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800022e:	f000 f8b1 	bl	8000394 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000232:	2312      	movs	r3, #18
 8000234:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000236:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800023a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800023c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000240:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f002 fd0b 	bl	8002c60 <HAL_RCCEx_PeriphCLKConfig>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000250:	f000 f8a0 	bl	8000394 <Error_Handler>
  }
}
 8000254:	bf00      	nop
 8000256:	3750      	adds	r7, #80	; 0x50
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}

0800025c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800026c:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <MX_ADC1_Init+0x74>)
 800026e:	4a19      	ldr	r2, [pc, #100]	; (80002d4 <MX_ADC1_Init+0x78>)
 8000270:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000272:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <MX_ADC1_Init+0x74>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <MX_ADC1_Init+0x74>)
 800027a:	2201      	movs	r2, #1
 800027c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <MX_ADC1_Init+0x74>)
 8000280:	2200      	movs	r2, #0
 8000282:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <MX_ADC1_Init+0x74>)
 8000286:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800028a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800028c:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <MX_ADC1_Init+0x74>)
 800028e:	2200      	movs	r2, #0
 8000290:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000292:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <MX_ADC1_Init+0x74>)
 8000294:	2201      	movs	r2, #1
 8000296:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000298:	480d      	ldr	r0, [pc, #52]	; (80002d0 <MX_ADC1_Init+0x74>)
 800029a:	f000 fa15 	bl	80006c8 <HAL_ADC_Init>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002a4:	f000 f876 	bl	8000394 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002ac:	2301      	movs	r3, #1
 80002ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	4619      	mov	r1, r3
 80002b8:	4805      	ldr	r0, [pc, #20]	; (80002d0 <MX_ADC1_Init+0x74>)
 80002ba:	f000 fbc5 	bl	8000a48 <HAL_ADC_ConfigChannel>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002c4:	f000 f866 	bl	8000394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002c8:	bf00      	nop
 80002ca:	3710      	adds	r7, #16
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	200003c0 	.word	0x200003c0
 80002d4:	40012400 	.word	0x40012400

080002d8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <MX_DMA_Init+0x38>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a0b      	ldr	r2, [pc, #44]	; (8000310 <MX_DMA_Init+0x38>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <MX_DMA_Init+0x38>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2100      	movs	r1, #0
 80002fa:	200b      	movs	r0, #11
 80002fc:	f000 fe65 	bl	8000fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000300:	200b      	movs	r0, #11
 8000302:	f000 fe7e 	bl	8001002 <HAL_NVIC_EnableIRQ>

}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000

08000314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800031a:	4b14      	ldr	r3, [pc, #80]	; (800036c <MX_GPIO_Init+0x58>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a13      	ldr	r2, [pc, #76]	; (800036c <MX_GPIO_Init+0x58>)
 8000320:	f043 0310 	orr.w	r3, r3, #16
 8000324:	6193      	str	r3, [r2, #24]
 8000326:	4b11      	ldr	r3, [pc, #68]	; (800036c <MX_GPIO_Init+0x58>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	f003 0310 	and.w	r3, r3, #16
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000332:	4b0e      	ldr	r3, [pc, #56]	; (800036c <MX_GPIO_Init+0x58>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	4a0d      	ldr	r2, [pc, #52]	; (800036c <MX_GPIO_Init+0x58>)
 8000338:	f043 0320 	orr.w	r3, r3, #32
 800033c:	6193      	str	r3, [r2, #24]
 800033e:	4b0b      	ldr	r3, [pc, #44]	; (800036c <MX_GPIO_Init+0x58>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	f003 0320 	and.w	r3, r3, #32
 8000346:	60bb      	str	r3, [r7, #8]
 8000348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034a:	4b08      	ldr	r3, [pc, #32]	; (800036c <MX_GPIO_Init+0x58>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	4a07      	ldr	r2, [pc, #28]	; (800036c <MX_GPIO_Init+0x58>)
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	6193      	str	r3, [r2, #24]
 8000356:	4b05      	ldr	r3, [pc, #20]	; (800036c <MX_GPIO_Init+0x58>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f003 0304 	and.w	r3, r3, #4
 800035e:	607b      	str	r3, [r7, #4]
 8000360:	687b      	ldr	r3, [r7, #4]

}
 8000362:	bf00      	nop
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	40021000 	.word	0x40021000

08000370 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	dataFromADC[0];
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr

08000382 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000382:	b480      	push	{r7}
 8000384:	b083      	sub	sp, #12
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
	dataFromADC[0];
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003a6:	4b15      	ldr	r3, [pc, #84]	; (80003fc <HAL_MspInit+0x5c>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a14      	ldr	r2, [pc, #80]	; (80003fc <HAL_MspInit+0x5c>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b12      	ldr	r3, [pc, #72]	; (80003fc <HAL_MspInit+0x5c>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <HAL_MspInit+0x5c>)
 80003c0:	69db      	ldr	r3, [r3, #28]
 80003c2:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <HAL_MspInit+0x5c>)
 80003c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c8:	61d3      	str	r3, [r2, #28]
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <HAL_MspInit+0x5c>)
 80003cc:	69db      	ldr	r3, [r3, #28]
 80003ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003d6:	4b0a      	ldr	r3, [pc, #40]	; (8000400 <HAL_MspInit+0x60>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <HAL_MspInit+0x60>)
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40021000 	.word	0x40021000
 8000400:	40010000 	.word	0x40010000

08000404 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a28      	ldr	r2, [pc, #160]	; (80004c0 <HAL_ADC_MspInit+0xbc>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d149      	bne.n	80004b8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000424:	4b27      	ldr	r3, [pc, #156]	; (80004c4 <HAL_ADC_MspInit+0xc0>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a26      	ldr	r2, [pc, #152]	; (80004c4 <HAL_ADC_MspInit+0xc0>)
 800042a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b24      	ldr	r3, [pc, #144]	; (80004c4 <HAL_ADC_MspInit+0xc0>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b21      	ldr	r3, [pc, #132]	; (80004c4 <HAL_ADC_MspInit+0xc0>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a20      	ldr	r2, [pc, #128]	; (80004c4 <HAL_ADC_MspInit+0xc0>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b1e      	ldr	r3, [pc, #120]	; (80004c4 <HAL_ADC_MspInit+0xc0>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000454:	2301      	movs	r3, #1
 8000456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000458:	2303      	movs	r3, #3
 800045a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	4619      	mov	r1, r3
 8000462:	4819      	ldr	r0, [pc, #100]	; (80004c8 <HAL_ADC_MspInit+0xc4>)
 8000464:	f000 ffd6 	bl	8001414 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <HAL_ADC_MspInit+0xc8>)
 800046a:	4a19      	ldr	r2, [pc, #100]	; (80004d0 <HAL_ADC_MspInit+0xcc>)
 800046c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800046e:	4b17      	ldr	r3, [pc, #92]	; (80004cc <HAL_ADC_MspInit+0xc8>)
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000474:	4b15      	ldr	r3, [pc, #84]	; (80004cc <HAL_ADC_MspInit+0xc8>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800047a:	4b14      	ldr	r3, [pc, #80]	; (80004cc <HAL_ADC_MspInit+0xc8>)
 800047c:	2280      	movs	r2, #128	; 0x80
 800047e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000480:	4b12      	ldr	r3, [pc, #72]	; (80004cc <HAL_ADC_MspInit+0xc8>)
 8000482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000486:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000488:	4b10      	ldr	r3, [pc, #64]	; (80004cc <HAL_ADC_MspInit+0xc8>)
 800048a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800048e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000490:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <HAL_ADC_MspInit+0xc8>)
 8000492:	2220      	movs	r2, #32
 8000494:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000496:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <HAL_ADC_MspInit+0xc8>)
 8000498:	2200      	movs	r2, #0
 800049a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800049c:	480b      	ldr	r0, [pc, #44]	; (80004cc <HAL_ADC_MspInit+0xc8>)
 800049e:	f000 fdcb 	bl	8001038 <HAL_DMA_Init>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80004a8:	f7ff ff74 	bl	8000394 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a07      	ldr	r2, [pc, #28]	; (80004cc <HAL_ADC_MspInit+0xc8>)
 80004b0:	621a      	str	r2, [r3, #32]
 80004b2:	4a06      	ldr	r2, [pc, #24]	; (80004cc <HAL_ADC_MspInit+0xc8>)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80004b8:	bf00      	nop
 80004ba:	3720      	adds	r7, #32
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40012400 	.word	0x40012400
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40010800 	.word	0x40010800
 80004cc:	200003f0 	.word	0x200003f0
 80004d0:	40020008 	.word	0x40020008

080004d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr

080004e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <HardFault_Handler+0x4>

080004e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <MemManage_Handler+0x4>

080004ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <BusFault_Handler+0x4>

080004f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <UsageFault_Handler+0x4>

080004f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr

08000504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000520:	f000 f8b6 	bl	8000690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}

08000528 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800052c:	4802      	ldr	r0, [pc, #8]	; (8000538 <DMA1_Channel1_IRQHandler+0x10>)
 800052e:	f000 fe3d 	bl	80011ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200003f0 	.word	0x200003f0

0800053c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000540:	4802      	ldr	r0, [pc, #8]	; (800054c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000542:	f001 f9c8 	bl	80018d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	200017a0 	.word	0x200017a0

08000550 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <SystemInit+0x5c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a14      	ldr	r2, [pc, #80]	; (80005ac <SystemInit+0x5c>)
 800055a:	f043 0301 	orr.w	r3, r3, #1
 800055e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <SystemInit+0x5c>)
 8000562:	685a      	ldr	r2, [r3, #4]
 8000564:	4911      	ldr	r1, [pc, #68]	; (80005ac <SystemInit+0x5c>)
 8000566:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <SystemInit+0x60>)
 8000568:	4013      	ands	r3, r2
 800056a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800056c:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <SystemInit+0x5c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <SystemInit+0x5c>)
 8000572:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800057a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <SystemInit+0x5c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <SystemInit+0x5c>)
 8000582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000586:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <SystemInit+0x5c>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	4a07      	ldr	r2, [pc, #28]	; (80005ac <SystemInit+0x5c>)
 800058e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000592:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <SystemInit+0x5c>)
 8000596:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800059a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <SystemInit+0x64>)
 800059e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005a2:	609a      	str	r2, [r3, #8]
#endif 
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	40021000 	.word	0x40021000
 80005b0:	f8ff0000 	.word	0xf8ff0000
 80005b4:	e000ed00 	.word	0xe000ed00

080005b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005ba:	e003      	b.n	80005c4 <LoopCopyDataInit>

080005bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005c2:	3104      	adds	r1, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005c4:	480a      	ldr	r0, [pc, #40]	; (80005f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005cc:	d3f6      	bcc.n	80005bc <CopyDataInit>
  ldr r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005d0:	e002      	b.n	80005d8 <LoopFillZerobss>

080005d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005d4:	f842 3b04 	str.w	r3, [r2], #4

080005d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005dc:	d3f9      	bcc.n	80005d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005de:	f7ff ffb7 	bl	8000550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005e2:	f005 fce3 	bl	8005fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e6:	f7ff fdb1 	bl	800014c <main>
  bx lr
 80005ea:	4770      	bx	lr
  ldr r3, =_sidata
 80005ec:	08006090 	.word	0x08006090
  ldr r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005f4:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 80005f8:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 80005fc:	20001a0c 	.word	0x20001a0c

08000600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC1_2_IRQHandler>
	...

08000604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <HAL_Init+0x28>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <HAL_Init+0x28>)
 800060e:	f043 0310 	orr.w	r3, r3, #16
 8000612:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000614:	2003      	movs	r0, #3
 8000616:	f000 fccd 	bl	8000fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800061a:	2000      	movs	r0, #0
 800061c:	f000 f808 	bl	8000630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000620:	f7ff febe 	bl	80003a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000624:	2300      	movs	r3, #0
}
 8000626:	4618      	mov	r0, r3
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40022000 	.word	0x40022000

08000630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <HAL_InitTick+0x54>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_InitTick+0x58>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4619      	mov	r1, r3
 8000642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000646:	fbb3 f3f1 	udiv	r3, r3, r1
 800064a:	fbb2 f3f3 	udiv	r3, r2, r3
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fce5 	bl	800101e <HAL_SYSTICK_Config>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800065a:	2301      	movs	r3, #1
 800065c:	e00e      	b.n	800067c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d80a      	bhi.n	800067a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000664:	2200      	movs	r2, #0
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	f04f 30ff 	mov.w	r0, #4294967295
 800066c:	f000 fcad 	bl	8000fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000670:	4a06      	ldr	r2, [pc, #24]	; (800068c <HAL_InitTick+0x5c>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000676:	2300      	movs	r3, #0
 8000678:	e000      	b.n	800067c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800067a:	2301      	movs	r3, #1
}
 800067c:	4618      	mov	r0, r3
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000000 	.word	0x20000000
 8000688:	20000008 	.word	0x20000008
 800068c:	20000004 	.word	0x20000004

08000690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <HAL_IncTick+0x1c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <HAL_IncTick+0x20>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4413      	add	r3, r2
 80006a0:	4a03      	ldr	r2, [pc, #12]	; (80006b0 <HAL_IncTick+0x20>)
 80006a2:	6013      	str	r3, [r2, #0]
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	20000008 	.word	0x20000008
 80006b0:	20000c08 	.word	0x20000c08

080006b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  return uwTick;
 80006b8:	4b02      	ldr	r3, [pc, #8]	; (80006c4 <HAL_GetTick+0x10>)
 80006ba:	681b      	ldr	r3, [r3, #0]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	20000c08 	.word	0x20000c08

080006c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006d0:	2300      	movs	r3, #0
 80006d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d101      	bne.n	80006ea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e0be      	b.n	8000868 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d109      	bne.n	800070c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2200      	movs	r2, #0
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff fe7c 	bl	8000404 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f000 fae5 	bl	8000cdc <ADC_ConversionStop_Disable>
 8000712:	4603      	mov	r3, r0
 8000714:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800071a:	f003 0310 	and.w	r3, r3, #16
 800071e:	2b00      	cmp	r3, #0
 8000720:	f040 8099 	bne.w	8000856 <HAL_ADC_Init+0x18e>
 8000724:	7dfb      	ldrb	r3, [r7, #23]
 8000726:	2b00      	cmp	r3, #0
 8000728:	f040 8095 	bne.w	8000856 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000730:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000734:	f023 0302 	bic.w	r3, r3, #2
 8000738:	f043 0202 	orr.w	r2, r3, #2
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000748:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	7b1b      	ldrb	r3, [r3, #12]
 800074e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000750:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000752:	68ba      	ldr	r2, [r7, #8]
 8000754:	4313      	orrs	r3, r2
 8000756:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000760:	d003      	beq.n	800076a <HAL_ADC_Init+0xa2>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d102      	bne.n	8000770 <HAL_ADC_Init+0xa8>
 800076a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800076e:	e000      	b.n	8000772 <HAL_ADC_Init+0xaa>
 8000770:	2300      	movs	r3, #0
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	4313      	orrs	r3, r2
 8000776:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	7d1b      	ldrb	r3, [r3, #20]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d119      	bne.n	80007b4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7b1b      	ldrb	r3, [r3, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d109      	bne.n	800079c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	3b01      	subs	r3, #1
 800078e:	035a      	lsls	r2, r3, #13
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	4313      	orrs	r3, r2
 8000794:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	e00b      	b.n	80007b4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a0:	f043 0220 	orr.w	r2, r3, #32
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ac:	f043 0201 	orr.w	r2, r3, #1
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	430a      	orrs	r2, r1
 80007c6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	689a      	ldr	r2, [r3, #8]
 80007ce:	4b28      	ldr	r3, [pc, #160]	; (8000870 <HAL_ADC_Init+0x1a8>)
 80007d0:	4013      	ands	r3, r2
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	6812      	ldr	r2, [r2, #0]
 80007d6:	68b9      	ldr	r1, [r7, #8]
 80007d8:	430b      	orrs	r3, r1
 80007da:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007e4:	d003      	beq.n	80007ee <HAL_ADC_Init+0x126>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d104      	bne.n	80007f8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	051b      	lsls	r3, r3, #20
 80007f6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	430a      	orrs	r2, r1
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	689a      	ldr	r2, [r3, #8]
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <HAL_ADC_Init+0x1ac>)
 8000814:	4013      	ands	r3, r2
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	429a      	cmp	r2, r3
 800081a:	d10b      	bne.n	8000834 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2200      	movs	r2, #0
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000826:	f023 0303 	bic.w	r3, r3, #3
 800082a:	f043 0201 	orr.w	r2, r3, #1
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000832:	e018      	b.n	8000866 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000838:	f023 0312 	bic.w	r3, r3, #18
 800083c:	f043 0210 	orr.w	r2, r3, #16
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000848:	f043 0201 	orr.w	r2, r3, #1
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000850:	2301      	movs	r3, #1
 8000852:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000854:	e007      	b.n	8000866 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085a:	f043 0210 	orr.w	r2, r3, #16
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000866:	7dfb      	ldrb	r3, [r7, #23]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	ffe1f7fd 	.word	0xffe1f7fd
 8000874:	ff1f0efe 	.word	0xff1f0efe

08000878 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000884:	2300      	movs	r3, #0
 8000886:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a64      	ldr	r2, [pc, #400]	; (8000a20 <HAL_ADC_Start_DMA+0x1a8>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d004      	beq.n	800089c <HAL_ADC_Start_DMA+0x24>
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a63      	ldr	r2, [pc, #396]	; (8000a24 <HAL_ADC_Start_DMA+0x1ac>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d106      	bne.n	80008aa <HAL_ADC_Start_DMA+0x32>
 800089c:	4b60      	ldr	r3, [pc, #384]	; (8000a20 <HAL_ADC_Start_DMA+0x1a8>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	f040 80b3 	bne.w	8000a10 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d101      	bne.n	80008b8 <HAL_ADC_Start_DMA+0x40>
 80008b4:	2302      	movs	r3, #2
 80008b6:	e0ae      	b.n	8000a16 <HAL_ADC_Start_DMA+0x19e>
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	2201      	movs	r2, #1
 80008bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80008c0:	68f8      	ldr	r0, [r7, #12]
 80008c2:	f000 f9b9 	bl	8000c38 <ADC_Enable>
 80008c6:	4603      	mov	r3, r0
 80008c8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80008ca:	7dfb      	ldrb	r3, [r7, #23]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	f040 809a 	bne.w	8000a06 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80008da:	f023 0301 	bic.w	r3, r3, #1
 80008de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a4e      	ldr	r2, [pc, #312]	; (8000a24 <HAL_ADC_Start_DMA+0x1ac>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d105      	bne.n	80008fc <HAL_ADC_Start_DMA+0x84>
 80008f0:	4b4b      	ldr	r3, [pc, #300]	; (8000a20 <HAL_ADC_Start_DMA+0x1a8>)
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d115      	bne.n	8000928 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000900:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000912:	2b00      	cmp	r3, #0
 8000914:	d026      	beq.n	8000964 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800091e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000926:	e01d      	b.n	8000964 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a39      	ldr	r2, [pc, #228]	; (8000a20 <HAL_ADC_Start_DMA+0x1a8>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d004      	beq.n	8000948 <HAL_ADC_Start_DMA+0xd0>
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a38      	ldr	r2, [pc, #224]	; (8000a24 <HAL_ADC_Start_DMA+0x1ac>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d10d      	bne.n	8000964 <HAL_ADC_Start_DMA+0xec>
 8000948:	4b35      	ldr	r3, [pc, #212]	; (8000a20 <HAL_ADC_Start_DMA+0x1a8>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000950:	2b00      	cmp	r3, #0
 8000952:	d007      	beq.n	8000964 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000958:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800095c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800096c:	2b00      	cmp	r3, #0
 800096e:	d006      	beq.n	800097e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000974:	f023 0206 	bic.w	r2, r3, #6
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
 800097c:	e002      	b.n	8000984 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2200      	movs	r2, #0
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	6a1b      	ldr	r3, [r3, #32]
 8000990:	4a25      	ldr	r2, [pc, #148]	; (8000a28 <HAL_ADC_Start_DMA+0x1b0>)
 8000992:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	6a1b      	ldr	r3, [r3, #32]
 8000998:	4a24      	ldr	r2, [pc, #144]	; (8000a2c <HAL_ADC_Start_DMA+0x1b4>)
 800099a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	6a1b      	ldr	r3, [r3, #32]
 80009a0:	4a23      	ldr	r2, [pc, #140]	; (8000a30 <HAL_ADC_Start_DMA+0x1b8>)
 80009a2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f06f 0202 	mvn.w	r2, #2
 80009ac:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	689a      	ldr	r2, [r3, #8]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80009bc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	6a18      	ldr	r0, [r3, #32]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	334c      	adds	r3, #76	; 0x4c
 80009c8:	4619      	mov	r1, r3
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f000 fb8d 	bl	80010ec <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80009dc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80009e0:	d108      	bne.n	80009f4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	689a      	ldr	r2, [r3, #8]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80009f0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80009f2:	e00f      	b.n	8000a14 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	689a      	ldr	r2, [r3, #8]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a02:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000a04:	e006      	b.n	8000a14 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000a0e:	e001      	b.n	8000a14 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40012400 	.word	0x40012400
 8000a24:	40012800 	.word	0x40012800
 8000a28:	08000d51 	.word	0x08000d51
 8000a2c:	08000dcd 	.word	0x08000dcd
 8000a30:	08000de9 	.word	0x08000de9

08000a34 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
	...

08000a48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d101      	bne.n	8000a68 <HAL_ADC_ConfigChannel+0x20>
 8000a64:	2302      	movs	r3, #2
 8000a66:	e0dc      	b.n	8000c22 <HAL_ADC_ConfigChannel+0x1da>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	2b06      	cmp	r3, #6
 8000a76:	d81c      	bhi.n	8000ab2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	4613      	mov	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4413      	add	r3, r2
 8000a88:	3b05      	subs	r3, #5
 8000a8a:	221f      	movs	r2, #31
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	4019      	ands	r1, r3
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	3b05      	subs	r3, #5
 8000aa4:	fa00 f203 	lsl.w	r2, r0, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	430a      	orrs	r2, r1
 8000aae:	635a      	str	r2, [r3, #52]	; 0x34
 8000ab0:	e03c      	b.n	8000b2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	2b0c      	cmp	r3, #12
 8000ab8:	d81c      	bhi.n	8000af4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4413      	add	r3, r2
 8000aca:	3b23      	subs	r3, #35	; 0x23
 8000acc:	221f      	movs	r2, #31
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4019      	ands	r1, r3
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	6818      	ldr	r0, [r3, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	3b23      	subs	r3, #35	; 0x23
 8000ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	430a      	orrs	r2, r1
 8000af0:	631a      	str	r2, [r3, #48]	; 0x30
 8000af2:	e01b      	b.n	8000b2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	4613      	mov	r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	4413      	add	r3, r2
 8000b04:	3b41      	subs	r3, #65	; 0x41
 8000b06:	221f      	movs	r2, #31
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	4019      	ands	r1, r3
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	3b41      	subs	r3, #65	; 0x41
 8000b20:	fa00 f203 	lsl.w	r2, r0, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b09      	cmp	r3, #9
 8000b32:	d91c      	bls.n	8000b6e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68d9      	ldr	r1, [r3, #12]
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	4413      	add	r3, r2
 8000b44:	3b1e      	subs	r3, #30
 8000b46:	2207      	movs	r2, #7
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	4019      	ands	r1, r3
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	6898      	ldr	r0, [r3, #8]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4413      	add	r3, r2
 8000b5e:	3b1e      	subs	r3, #30
 8000b60:	fa00 f203 	lsl.w	r2, r0, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	e019      	b.n	8000ba2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	6919      	ldr	r1, [r3, #16]
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	2207      	movs	r2, #7
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4019      	ands	r1, r3
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	6898      	ldr	r0, [r3, #8]
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	4613      	mov	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	4413      	add	r3, r2
 8000b96:	fa00 f203 	lsl.w	r2, r0, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b10      	cmp	r3, #16
 8000ba8:	d003      	beq.n	8000bb2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000bae:	2b11      	cmp	r3, #17
 8000bb0:	d132      	bne.n	8000c18 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <HAL_ADC_ConfigChannel+0x1e4>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d125      	bne.n	8000c08 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d126      	bne.n	8000c18 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000bd8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b10      	cmp	r3, #16
 8000be0:	d11a      	bne.n	8000c18 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <HAL_ADC_ConfigChannel+0x1e8>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a13      	ldr	r2, [pc, #76]	; (8000c34 <HAL_ADC_ConfigChannel+0x1ec>)
 8000be8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bec:	0c9a      	lsrs	r2, r3, #18
 8000bee:	4613      	mov	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bf8:	e002      	b.n	8000c00 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1f9      	bne.n	8000bfa <HAL_ADC_ConfigChannel+0x1b2>
 8000c06:	e007      	b.n	8000c18 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c0c:	f043 0220 	orr.w	r2, r3, #32
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	40012400 	.word	0x40012400
 8000c30:	20000000 	.word	0x20000000
 8000c34:	431bde83 	.word	0x431bde83

08000c38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d039      	beq.n	8000cca <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f042 0201 	orr.w	r2, r2, #1
 8000c64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <ADC_Enable+0x9c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <ADC_Enable+0xa0>)
 8000c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c70:	0c9b      	lsrs	r3, r3, #18
 8000c72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000c74:	e002      	b.n	8000c7c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1f9      	bne.n	8000c76 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c82:	f7ff fd17 	bl	80006b4 <HAL_GetTick>
 8000c86:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000c88:	e018      	b.n	8000cbc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c8a:	f7ff fd13 	bl	80006b4 <HAL_GetTick>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d911      	bls.n	8000cbc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9c:	f043 0210 	orr.w	r2, r3, #16
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca8:	f043 0201 	orr.w	r2, r3, #1
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e007      	b.n	8000ccc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d1df      	bne.n	8000c8a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	431bde83 	.word	0x431bde83

08000cdc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d127      	bne.n	8000d46 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f022 0201 	bic.w	r2, r2, #1
 8000d04:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d06:	f7ff fcd5 	bl	80006b4 <HAL_GetTick>
 8000d0a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d0c:	e014      	b.n	8000d38 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d0e:	f7ff fcd1 	bl	80006b4 <HAL_GetTick>
 8000d12:	4602      	mov	r2, r0
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d90d      	bls.n	8000d38 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d20:	f043 0210 	orr.w	r2, r3, #16
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2c:	f043 0201 	orr.w	r2, r3, #1
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e007      	b.n	8000d48 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d0e3      	beq.n	8000d0e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d62:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d127      	bne.n	8000dba <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d80:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d84:	d115      	bne.n	8000db2 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d111      	bne.n	8000db2 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d105      	bne.n	8000db2 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000daa:	f043 0201 	orr.w	r2, r3, #1
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f7ff fadc 	bl	8000370 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000db8:	e004      	b.n	8000dc4 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6a1b      	ldr	r3, [r3, #32]
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	4798      	blx	r3
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000dda:	68f8      	ldr	r0, [r7, #12]
 8000ddc:	f7ff fad1 	bl	8000382 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	f043 0204 	orr.w	r2, r3, #4
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f7ff fe10 	bl	8000a34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4906      	ldr	r1, [pc, #24]	; (8000eb4 <__NVIC_EnableIRQ+0x34>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f80:	d301      	bcc.n	8000f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00f      	b.n	8000fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <SysTick_Config+0x40>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8e:	210f      	movs	r1, #15
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f7ff ff90 	bl	8000eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <SysTick_Config+0x40>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <SysTick_Config+0x40>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000e010 	.word	0xe000e010

08000fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff2d 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fdc:	f7ff ff42 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff90 	bl	8000f0c <NVIC_EncodePriority>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff5f 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff35 	bl	8000e80 <__NVIC_EnableIRQ>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffa2 	bl	8000f70 <SysTick_Config>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e043      	b.n	80010d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_DMA_Init+0xa8>)
 8001056:	4413      	add	r3, r2
 8001058:	4a22      	ldr	r2, [pc, #136]	; (80010e4 <HAL_DMA_Init+0xac>)
 800105a:	fba2 2303 	umull	r2, r3, r2, r3
 800105e:	091b      	lsrs	r3, r3, #4
 8001060:	009a      	lsls	r2, r3, #2
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <HAL_DMA_Init+0xb0>)
 800106a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2202      	movs	r2, #2
 8001070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001082:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001086:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001090:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800109c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	bffdfff8 	.word	0xbffdfff8
 80010e4:	cccccccd 	.word	0xcccccccd
 80010e8:	40020000 	.word	0x40020000

080010ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d101      	bne.n	800110c <HAL_DMA_Start_IT+0x20>
 8001108:	2302      	movs	r3, #2
 800110a:	e04a      	b.n	80011a2 <HAL_DMA_Start_IT+0xb6>
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800111a:	2b01      	cmp	r3, #1
 800111c:	d13a      	bne.n	8001194 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2202      	movs	r2, #2
 8001122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2200      	movs	r2, #0
 800112a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0201 	bic.w	r2, r2, #1
 800113a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f000 f938 	bl	80013b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114c:	2b00      	cmp	r3, #0
 800114e:	d008      	beq.n	8001162 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 020e 	orr.w	r2, r2, #14
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	e00f      	b.n	8001182 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0204 	bic.w	r2, r2, #4
 8001170:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 020a 	orr.w	r2, r2, #10
 8001180:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f042 0201 	orr.w	r2, r2, #1
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	e005      	b.n	80011a0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800119c:	2302      	movs	r3, #2
 800119e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	2204      	movs	r2, #4
 80011ca:	409a      	lsls	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d04f      	beq.n	8001274 <HAL_DMA_IRQHandler+0xc8>
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d04a      	beq.n	8001274 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0320 	and.w	r3, r3, #32
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d107      	bne.n	80011fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0204 	bic.w	r2, r2, #4
 80011fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a66      	ldr	r2, [pc, #408]	; (800139c <HAL_DMA_IRQHandler+0x1f0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d029      	beq.n	800125a <HAL_DMA_IRQHandler+0xae>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a65      	ldr	r2, [pc, #404]	; (80013a0 <HAL_DMA_IRQHandler+0x1f4>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d022      	beq.n	8001256 <HAL_DMA_IRQHandler+0xaa>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a63      	ldr	r2, [pc, #396]	; (80013a4 <HAL_DMA_IRQHandler+0x1f8>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d01a      	beq.n	8001250 <HAL_DMA_IRQHandler+0xa4>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a62      	ldr	r2, [pc, #392]	; (80013a8 <HAL_DMA_IRQHandler+0x1fc>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d012      	beq.n	800124a <HAL_DMA_IRQHandler+0x9e>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a60      	ldr	r2, [pc, #384]	; (80013ac <HAL_DMA_IRQHandler+0x200>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d00a      	beq.n	8001244 <HAL_DMA_IRQHandler+0x98>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a5f      	ldr	r2, [pc, #380]	; (80013b0 <HAL_DMA_IRQHandler+0x204>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d102      	bne.n	800123e <HAL_DMA_IRQHandler+0x92>
 8001238:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800123c:	e00e      	b.n	800125c <HAL_DMA_IRQHandler+0xb0>
 800123e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001242:	e00b      	b.n	800125c <HAL_DMA_IRQHandler+0xb0>
 8001244:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001248:	e008      	b.n	800125c <HAL_DMA_IRQHandler+0xb0>
 800124a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800124e:	e005      	b.n	800125c <HAL_DMA_IRQHandler+0xb0>
 8001250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001254:	e002      	b.n	800125c <HAL_DMA_IRQHandler+0xb0>
 8001256:	2340      	movs	r3, #64	; 0x40
 8001258:	e000      	b.n	800125c <HAL_DMA_IRQHandler+0xb0>
 800125a:	2304      	movs	r3, #4
 800125c:	4a55      	ldr	r2, [pc, #340]	; (80013b4 <HAL_DMA_IRQHandler+0x208>)
 800125e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 8094 	beq.w	8001392 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001272:	e08e      	b.n	8001392 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	2202      	movs	r2, #2
 800127a:	409a      	lsls	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d056      	beq.n	8001332 <HAL_DMA_IRQHandler+0x186>
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d051      	beq.n	8001332 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0320 	and.w	r3, r3, #32
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10b      	bne.n	80012b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 020a 	bic.w	r2, r2, #10
 80012aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a38      	ldr	r2, [pc, #224]	; (800139c <HAL_DMA_IRQHandler+0x1f0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d029      	beq.n	8001312 <HAL_DMA_IRQHandler+0x166>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a37      	ldr	r2, [pc, #220]	; (80013a0 <HAL_DMA_IRQHandler+0x1f4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d022      	beq.n	800130e <HAL_DMA_IRQHandler+0x162>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a35      	ldr	r2, [pc, #212]	; (80013a4 <HAL_DMA_IRQHandler+0x1f8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d01a      	beq.n	8001308 <HAL_DMA_IRQHandler+0x15c>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a34      	ldr	r2, [pc, #208]	; (80013a8 <HAL_DMA_IRQHandler+0x1fc>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d012      	beq.n	8001302 <HAL_DMA_IRQHandler+0x156>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a32      	ldr	r2, [pc, #200]	; (80013ac <HAL_DMA_IRQHandler+0x200>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d00a      	beq.n	80012fc <HAL_DMA_IRQHandler+0x150>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a31      	ldr	r2, [pc, #196]	; (80013b0 <HAL_DMA_IRQHandler+0x204>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d102      	bne.n	80012f6 <HAL_DMA_IRQHandler+0x14a>
 80012f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012f4:	e00e      	b.n	8001314 <HAL_DMA_IRQHandler+0x168>
 80012f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012fa:	e00b      	b.n	8001314 <HAL_DMA_IRQHandler+0x168>
 80012fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001300:	e008      	b.n	8001314 <HAL_DMA_IRQHandler+0x168>
 8001302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001306:	e005      	b.n	8001314 <HAL_DMA_IRQHandler+0x168>
 8001308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800130c:	e002      	b.n	8001314 <HAL_DMA_IRQHandler+0x168>
 800130e:	2320      	movs	r3, #32
 8001310:	e000      	b.n	8001314 <HAL_DMA_IRQHandler+0x168>
 8001312:	2302      	movs	r3, #2
 8001314:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <HAL_DMA_IRQHandler+0x208>)
 8001316:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001324:	2b00      	cmp	r3, #0
 8001326:	d034      	beq.n	8001392 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001330:	e02f      	b.n	8001392 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	2208      	movs	r2, #8
 8001338:	409a      	lsls	r2, r3
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4013      	ands	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d028      	beq.n	8001394 <HAL_DMA_IRQHandler+0x1e8>
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	2b00      	cmp	r3, #0
 800134a:	d023      	beq.n	8001394 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 020e 	bic.w	r2, r2, #14
 800135a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001364:	2101      	movs	r1, #1
 8001366:	fa01 f202 	lsl.w	r2, r1, r2
 800136a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	2b00      	cmp	r3, #0
 8001388:	d004      	beq.n	8001394 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	4798      	blx	r3
    }
  }
  return;
 8001392:	bf00      	nop
 8001394:	bf00      	nop
}
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40020008 	.word	0x40020008
 80013a0:	4002001c 	.word	0x4002001c
 80013a4:	40020030 	.word	0x40020030
 80013a8:	40020044 	.word	0x40020044
 80013ac:	40020058 	.word	0x40020058
 80013b0:	4002006c 	.word	0x4002006c
 80013b4:	40020000 	.word	0x40020000

080013b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ce:	2101      	movs	r1, #1
 80013d0:	fa01 f202 	lsl.w	r2, r1, r2
 80013d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b10      	cmp	r3, #16
 80013e4:	d108      	bne.n	80013f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013f6:	e007      	b.n	8001408 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	60da      	str	r2, [r3, #12]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
	...

08001414 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001414:	b480      	push	{r7}
 8001416:	b08b      	sub	sp, #44	; 0x2c
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001426:	e127      	b.n	8001678 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001428:	2201      	movs	r2, #1
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	429a      	cmp	r2, r3
 8001442:	f040 8116 	bne.w	8001672 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b12      	cmp	r3, #18
 800144c:	d034      	beq.n	80014b8 <HAL_GPIO_Init+0xa4>
 800144e:	2b12      	cmp	r3, #18
 8001450:	d80d      	bhi.n	800146e <HAL_GPIO_Init+0x5a>
 8001452:	2b02      	cmp	r3, #2
 8001454:	d02b      	beq.n	80014ae <HAL_GPIO_Init+0x9a>
 8001456:	2b02      	cmp	r3, #2
 8001458:	d804      	bhi.n	8001464 <HAL_GPIO_Init+0x50>
 800145a:	2b00      	cmp	r3, #0
 800145c:	d031      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
 800145e:	2b01      	cmp	r3, #1
 8001460:	d01c      	beq.n	800149c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001462:	e048      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001464:	2b03      	cmp	r3, #3
 8001466:	d043      	beq.n	80014f0 <HAL_GPIO_Init+0xdc>
 8001468:	2b11      	cmp	r3, #17
 800146a:	d01b      	beq.n	80014a4 <HAL_GPIO_Init+0x90>
          break;
 800146c:	e043      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800146e:	4a89      	ldr	r2, [pc, #548]	; (8001694 <HAL_GPIO_Init+0x280>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d026      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
 8001474:	4a87      	ldr	r2, [pc, #540]	; (8001694 <HAL_GPIO_Init+0x280>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d806      	bhi.n	8001488 <HAL_GPIO_Init+0x74>
 800147a:	4a87      	ldr	r2, [pc, #540]	; (8001698 <HAL_GPIO_Init+0x284>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d020      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
 8001480:	4a86      	ldr	r2, [pc, #536]	; (800169c <HAL_GPIO_Init+0x288>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d01d      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
          break;
 8001486:	e036      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001488:	4a85      	ldr	r2, [pc, #532]	; (80016a0 <HAL_GPIO_Init+0x28c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d019      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
 800148e:	4a85      	ldr	r2, [pc, #532]	; (80016a4 <HAL_GPIO_Init+0x290>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d016      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
 8001494:	4a84      	ldr	r2, [pc, #528]	; (80016a8 <HAL_GPIO_Init+0x294>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_GPIO_Init+0xae>
          break;
 800149a:	e02c      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	623b      	str	r3, [r7, #32]
          break;
 80014a2:	e028      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	3304      	adds	r3, #4
 80014aa:	623b      	str	r3, [r7, #32]
          break;
 80014ac:	e023      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	3308      	adds	r3, #8
 80014b4:	623b      	str	r3, [r7, #32]
          break;
 80014b6:	e01e      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	330c      	adds	r3, #12
 80014be:	623b      	str	r3, [r7, #32]
          break;
 80014c0:	e019      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ca:	2304      	movs	r3, #4
 80014cc:	623b      	str	r3, [r7, #32]
          break;
 80014ce:	e012      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d105      	bne.n	80014e4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014d8:	2308      	movs	r3, #8
 80014da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	611a      	str	r2, [r3, #16]
          break;
 80014e2:	e008      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e4:	2308      	movs	r3, #8
 80014e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69fa      	ldr	r2, [r7, #28]
 80014ec:	615a      	str	r2, [r3, #20]
          break;
 80014ee:	e002      	b.n	80014f6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
          break;
 80014f4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2bff      	cmp	r3, #255	; 0xff
 80014fa:	d801      	bhi.n	8001500 <HAL_GPIO_Init+0xec>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	e001      	b.n	8001504 <HAL_GPIO_Init+0xf0>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3304      	adds	r3, #4
 8001504:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2bff      	cmp	r3, #255	; 0xff
 800150a:	d802      	bhi.n	8001512 <HAL_GPIO_Init+0xfe>
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	e002      	b.n	8001518 <HAL_GPIO_Init+0x104>
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	3b08      	subs	r3, #8
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	210f      	movs	r1, #15
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	401a      	ands	r2, r3
 800152a:	6a39      	ldr	r1, [r7, #32]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	431a      	orrs	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 8096 	beq.w	8001672 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001546:	4b59      	ldr	r3, [pc, #356]	; (80016ac <HAL_GPIO_Init+0x298>)
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	4a58      	ldr	r2, [pc, #352]	; (80016ac <HAL_GPIO_Init+0x298>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6193      	str	r3, [r2, #24]
 8001552:	4b56      	ldr	r3, [pc, #344]	; (80016ac <HAL_GPIO_Init+0x298>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800155e:	4a54      	ldr	r2, [pc, #336]	; (80016b0 <HAL_GPIO_Init+0x29c>)
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	3302      	adds	r3, #2
 8001566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	220f      	movs	r2, #15
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4013      	ands	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4b      	ldr	r2, [pc, #300]	; (80016b4 <HAL_GPIO_Init+0x2a0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_GPIO_Init+0x19e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4a      	ldr	r2, [pc, #296]	; (80016b8 <HAL_GPIO_Init+0x2a4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d00d      	beq.n	80015ae <HAL_GPIO_Init+0x19a>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a49      	ldr	r2, [pc, #292]	; (80016bc <HAL_GPIO_Init+0x2a8>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d007      	beq.n	80015aa <HAL_GPIO_Init+0x196>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a48      	ldr	r2, [pc, #288]	; (80016c0 <HAL_GPIO_Init+0x2ac>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d101      	bne.n	80015a6 <HAL_GPIO_Init+0x192>
 80015a2:	2303      	movs	r3, #3
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x1a0>
 80015a6:	2304      	movs	r3, #4
 80015a8:	e004      	b.n	80015b4 <HAL_GPIO_Init+0x1a0>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_Init+0x1a0>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x1a0>
 80015b2:	2300      	movs	r3, #0
 80015b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b6:	f002 0203 	and.w	r2, r2, #3
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	4093      	lsls	r3, r2
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015c4:	493a      	ldr	r1, [pc, #232]	; (80016b0 <HAL_GPIO_Init+0x29c>)
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d006      	beq.n	80015ec <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015de:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4938      	ldr	r1, [pc, #224]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
 80015ea:	e006      	b.n	80015fa <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015ec:	4b35      	ldr	r3, [pc, #212]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	4933      	ldr	r1, [pc, #204]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d006      	beq.n	8001614 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001606:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	492e      	ldr	r1, [pc, #184]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
 8001612:	e006      	b.n	8001622 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001614:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	43db      	mvns	r3, r3
 800161c:	4929      	ldr	r1, [pc, #164]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 800161e:	4013      	ands	r3, r2
 8001620:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800162e:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	4924      	ldr	r1, [pc, #144]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
 800163a:	e006      	b.n	800164a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800163c:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	43db      	mvns	r3, r3
 8001644:	491f      	ldr	r1, [pc, #124]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001646:	4013      	ands	r3, r2
 8001648:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d006      	beq.n	8001664 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	491a      	ldr	r1, [pc, #104]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	60cb      	str	r3, [r1, #12]
 8001662:	e006      	b.n	8001672 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	43db      	mvns	r3, r3
 800166c:	4915      	ldr	r1, [pc, #84]	; (80016c4 <HAL_GPIO_Init+0x2b0>)
 800166e:	4013      	ands	r3, r2
 8001670:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	3301      	adds	r3, #1
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	fa22 f303 	lsr.w	r3, r2, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	f47f aed0 	bne.w	8001428 <HAL_GPIO_Init+0x14>
  }
}
 8001688:	bf00      	nop
 800168a:	372c      	adds	r7, #44	; 0x2c
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	10210000 	.word	0x10210000
 8001698:	10110000 	.word	0x10110000
 800169c:	10120000 	.word	0x10120000
 80016a0:	10310000 	.word	0x10310000
 80016a4:	10320000 	.word	0x10320000
 80016a8:	10220000 	.word	0x10220000
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010000 	.word	0x40010000
 80016b4:	40010800 	.word	0x40010800
 80016b8:	40010c00 	.word	0x40010c00
 80016bc:	40011000 	.word	0x40011000
 80016c0:	40011400 	.word	0x40011400
 80016c4:	40010400 	.word	0x40010400

080016c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ca:	b08b      	sub	sp, #44	; 0x2c
 80016cc:	af06      	add	r7, sp, #24
 80016ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e0d3      	b.n	8001882 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d106      	bne.n	80016f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f004 f9be 	bl	8005a70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2203      	movs	r2, #3
 80016f8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f001 fb8a 	bl	8002e1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	687e      	ldr	r6, [r7, #4]
 800170e:	466d      	mov	r5, sp
 8001710:	f106 0410 	add.w	r4, r6, #16
 8001714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001716:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001718:	6823      	ldr	r3, [r4, #0]
 800171a:	602b      	str	r3, [r5, #0]
 800171c:	1d33      	adds	r3, r6, #4
 800171e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001720:	6838      	ldr	r0, [r7, #0]
 8001722:	f001 fb53 	bl	8002dcc <USB_CoreInit>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2202      	movs	r2, #2
 8001730:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0a4      	b.n	8001882 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f001 fb87 	bl	8002e52 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	e035      	b.n	80017b6 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	015b      	lsls	r3, r3, #5
 8001750:	4413      	add	r3, r2
 8001752:	3329      	adds	r3, #41	; 0x29
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	015b      	lsls	r3, r3, #5
 800175e:	4413      	add	r3, r2
 8001760:	3328      	adds	r3, #40	; 0x28
 8001762:	7bfa      	ldrb	r2, [r7, #15]
 8001764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	7bfa      	ldrb	r2, [r7, #15]
 800176a:	b291      	uxth	r1, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	015b      	lsls	r3, r3, #5
 8001770:	4413      	add	r3, r2
 8001772:	3336      	adds	r3, #54	; 0x36
 8001774:	460a      	mov	r2, r1
 8001776:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	015b      	lsls	r3, r3, #5
 800177e:	4413      	add	r3, r2
 8001780:	332b      	adds	r3, #43	; 0x2b
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	015b      	lsls	r3, r3, #5
 800178c:	4413      	add	r3, r2
 800178e:	3338      	adds	r3, #56	; 0x38
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	015b      	lsls	r3, r3, #5
 800179a:	4413      	add	r3, r2
 800179c:	333c      	adds	r3, #60	; 0x3c
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	3302      	adds	r3, #2
 80017a8:	015b      	lsls	r3, r3, #5
 80017aa:	4413      	add	r3, r2
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	3301      	adds	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d3c4      	bcc.n	800174a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	e031      	b.n	800182a <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	015b      	lsls	r3, r3, #5
 80017cc:	4413      	add	r3, r2
 80017ce:	f203 1329 	addw	r3, r3, #297	; 0x129
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	015b      	lsls	r3, r3, #5
 80017dc:	4413      	add	r3, r2
 80017de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	015b      	lsls	r3, r3, #5
 80017ec:	4413      	add	r3, r2
 80017ee:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	015b      	lsls	r3, r3, #5
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	015b      	lsls	r3, r3, #5
 800180c:	4413      	add	r3, r2
 800180e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	330a      	adds	r3, #10
 800181c:	015b      	lsls	r3, r3, #5
 800181e:	4413      	add	r3, r2
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	3301      	adds	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	7bfa      	ldrb	r2, [r7, #15]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	d3c8      	bcc.n	80017c6 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	687e      	ldr	r6, [r7, #4]
 800183c:	466d      	mov	r5, sp
 800183e:	f106 0410 	add.w	r4, r6, #16
 8001842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	602b      	str	r3, [r5, #0]
 800184a:	1d33      	adds	r3, r6, #4
 800184c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184e:	6838      	ldr	r0, [r7, #0]
 8001850:	f001 fb0b 	bl	8002e6a <USB_DevInit>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2202      	movs	r2, #2
 800185e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e00d      	b.n	8001882 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f002 fb49 	bl	8003f12 <USB_DevDisconnect>

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800188a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_PCD_Start+0x16>
 800189c:	2302      	movs	r3, #2
 800189e:	e016      	b.n	80018ce <HAL_PCD_Start+0x44>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80018a8:	2101      	movs	r1, #1
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f004 fb47 	bl	8005f3e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f002 fb22 	bl	8003efe <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f001 fa94 	bl	8002dec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 fb1f 	bl	8003f26 <USB_ReadInterrupts>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018f2:	d102      	bne.n	80018fa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 faf3 	bl	8001ee0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 fb11 	bl	8003f26 <USB_ReadInterrupts>
 8001904:	4603      	mov	r3, r0
 8001906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800190e:	d112      	bne.n	8001936 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001918:	b29a      	uxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001922:	b292      	uxth	r2, r2
 8001924:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f004 f916 	bl	8005b5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800192e:	2100      	movs	r1, #0
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f8de 	bl	8001af2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f002 faf3 	bl	8003f26 <USB_ReadInterrupts>
 8001940:	4603      	mov	r3, r0
 8001942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001946:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800194a:	d10b      	bne.n	8001964 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001954:	b29a      	uxth	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800195e:	b292      	uxth	r2, r2
 8001960:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f002 fadc 	bl	8003f26 <USB_ReadInterrupts>
 800196e:	4603      	mov	r3, r0
 8001970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001978:	d10b      	bne.n	8001992 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001982:	b29a      	uxth	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800198c:	b292      	uxth	r2, r2
 800198e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f002 fac5 	bl	8003f26 <USB_ReadInterrupts>
 800199c:	4603      	mov	r3, r0
 800199e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019a6:	d126      	bne.n	80019f6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0204 	bic.w	r2, r2, #4
 80019ba:	b292      	uxth	r2, r2
 80019bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0208 	bic.w	r2, r2, #8
 80019d2:	b292      	uxth	r2, r2
 80019d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f004 f8f7 	bl	8005bcc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019f0:	b292      	uxth	r2, r2
 80019f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 fa93 	bl	8003f26 <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a0a:	d13d      	bne.n	8001a88 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0208 	orr.w	r2, r2, #8
 8001a1e:	b292      	uxth	r2, r2
 8001a20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a36:	b292      	uxth	r2, r2
 8001a38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0204 	orr.w	r2, r2, #4
 8001a4e:	b292      	uxth	r2, r2
 8001a50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f002 fa64 	bl	8003f26 <USB_ReadInterrupts>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a68:	d10b      	bne.n	8001a82 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a7c:	b292      	uxth	r2, r2
 8001a7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f004 f888 	bl	8005b98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 fa4a 	bl	8003f26 <USB_ReadInterrupts>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a9c:	d10e      	bne.n	8001abc <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ab0:	b292      	uxth	r2, r2
 8001ab2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f004 f841 	bl	8005b3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 fa30 	bl	8003f26 <USB_ReadInterrupts>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ad0:	d10b      	bne.n	8001aea <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ae4:	b292      	uxth	r2, r2
 8001ae6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <HAL_PCD_SetAddress+0x1a>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e013      	b.n	8001b34 <HAL_PCD_SetAddress+0x42>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	78fa      	ldrb	r2, [r7, #3]
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f002 f9d7 	bl	8003ed8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	4608      	mov	r0, r1
 8001b46:	4611      	mov	r1, r2
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	70fb      	strb	r3, [r7, #3]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	803b      	strh	r3, [r7, #0]
 8001b52:	4613      	mov	r3, r2
 8001b54:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	da0b      	bge.n	8001b7a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	015b      	lsls	r3, r3, #5
 8001b6a:	3328      	adds	r3, #40	; 0x28
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2201      	movs	r2, #1
 8001b76:	705a      	strb	r2, [r3, #1]
 8001b78:	e00b      	b.n	8001b92 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	015b      	lsls	r3, r3, #5
 8001b82:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b9e:	883a      	ldrh	r2, [r7, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	78ba      	ldrb	r2, [r7, #2]
 8001ba8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	785b      	ldrb	r3, [r3, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d004      	beq.n	8001bbc <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bbc:	78bb      	ldrb	r3, [r7, #2]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d102      	bne.n	8001bc8 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_PCD_EP_Open+0x9a>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e00e      	b.n	8001bf4 <HAL_PCD_EP_Open+0xb8>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68f9      	ldr	r1, [r7, #12]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f001 f965 	bl	8002eb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001bf2:	7afb      	ldrb	r3, [r7, #11]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	da0b      	bge.n	8001c28 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	015b      	lsls	r3, r3, #5
 8001c18:	3328      	adds	r3, #40	; 0x28
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2201      	movs	r2, #1
 8001c24:	705a      	strb	r2, [r3, #1]
 8001c26:	e00b      	b.n	8001c40 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	015b      	lsls	r3, r3, #5
 8001c30:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	4413      	add	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_PCD_EP_Close+0x5e>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e00e      	b.n	8001c78 <HAL_PCD_EP_Close+0x7c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68f9      	ldr	r1, [r7, #12]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f001 fc11 	bl	8003490 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c90:	7afb      	ldrb	r3, [r7, #11]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	015b      	lsls	r3, r3, #5
 8001c98:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cba:	7afb      	ldrb	r3, [r7, #11]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cc6:	7afb      	ldrb	r3, [r7, #11]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d106      	bne.n	8001cde <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6979      	ldr	r1, [r7, #20]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f001 fd70 	bl	80037bc <USB_EPStartXfer>
 8001cdc:	e005      	b.n	8001cea <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6979      	ldr	r1, [r7, #20]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f001 fd69 	bl	80037bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	330a      	adds	r3, #10
 8001d0a:	015b      	lsls	r3, r3, #5
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3304      	adds	r3, #4
 8001d10:	681b      	ldr	r3, [r3, #0]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d2c:	7afb      	ldrb	r3, [r7, #11]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	015b      	lsls	r3, r3, #5
 8001d34:	3328      	adds	r3, #40	; 0x28
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4413      	add	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2201      	movs	r2, #1
 8001d52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d54:	7afb      	ldrb	r3, [r7, #11]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d60:	7afb      	ldrb	r3, [r7, #11]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6979      	ldr	r1, [r7, #20]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 fd23 	bl	80037bc <USB_EPStartXfer>
 8001d76:	e005      	b.n	8001d84 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6979      	ldr	r1, [r7, #20]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f001 fd1c 	bl	80037bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	f003 0207 	and.w	r2, r3, #7
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d901      	bls.n	8001dac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e046      	b.n	8001e3a <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	da0b      	bge.n	8001dcc <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	015b      	lsls	r3, r3, #5
 8001dbc:	3328      	adds	r3, #40	; 0x28
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	705a      	strb	r2, [r3, #1]
 8001dca:	e009      	b.n	8001de0 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	015b      	lsls	r3, r3, #5
 8001dd0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2201      	movs	r2, #1
 8001de4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_PCD_EP_SetStall+0x72>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e01c      	b.n	8001e3a <HAL_PCD_EP_SetStall+0xac>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68f9      	ldr	r1, [r7, #12]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f001 ff8c 	bl	8003d2c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d108      	bne.n	8001e30 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	f002 f88a 	bl	8003f44 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	f003 020f 	and.w	r2, r3, #15
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d901      	bls.n	8001e60 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e03a      	b.n	8001ed6 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	da0b      	bge.n	8001e80 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	015b      	lsls	r3, r3, #5
 8001e70:	3328      	adds	r3, #40	; 0x28
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	705a      	strb	r2, [r3, #1]
 8001e7e:	e00b      	b.n	8001e98 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	015b      	lsls	r3, r3, #5
 8001e88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_PCD_EP_ClrStall+0x76>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e00e      	b.n	8001ed6 <HAL_PCD_EP_ClrStall+0x94>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68f9      	ldr	r1, [r7, #12]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f001 ff72 	bl	8003db0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b089      	sub	sp, #36	; 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ee8:	e282      	b.n	80023f0 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ef2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ef4:	8afb      	ldrh	r3, [r7, #22]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001efe:	7d7b      	ldrb	r3, [r7, #21]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f040 8142 	bne.w	800218a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f06:	8afb      	ldrh	r3, [r7, #22]
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d151      	bne.n	8001fb4 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f20:	b29c      	uxth	r4, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3328      	adds	r3, #40	; 0x28
 8001f36:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	695a      	ldr	r2, [r3, #20]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	441a      	add	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f72:	2100      	movs	r1, #0
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f003 fdcb 	bl	8005b10 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 8234 	beq.w	80023f0 <PCD_EP_ISR_Handler+0x510>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f040 822f 	bne.w	80023f0 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	b292      	uxth	r2, r2
 8001fa6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001fb2:	e21d      	b.n	80023f0 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fba:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001fc4:	8a7b      	ldrh	r3, [r7, #18]
 8001fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d033      	beq.n	8002036 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3306      	adds	r3, #6
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800200c:	b29b      	uxth	r3, r3
 800200e:	f001 ffe8 	bl	8003fe2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	b29a      	uxth	r2, r3
 800201a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800201e:	4013      	ands	r3, r2
 8002020:	b29c      	uxth	r4, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800202a:	b292      	uxth	r2, r2
 800202c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f003 fd44 	bl	8005abc <HAL_PCD_SetupStageCallback>
 8002034:	e1dc      	b.n	80023f0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002036:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f280 81d8 	bge.w	80023f0 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	b29a      	uxth	r2, r3
 8002048:	f640 738f 	movw	r3, #3983	; 0xf8f
 800204c:	4013      	ands	r3, r2
 800204e:	b29c      	uxth	r4, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002058:	b292      	uxth	r2, r2
 800205a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002064:	b29b      	uxth	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	3306      	adds	r3, #6
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	4413      	add	r3, r2
 800207a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d019      	beq.n	80020c4 <PCD_EP_ISR_Handler+0x1e4>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d015      	beq.n	80020c4 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6959      	ldr	r1, [r3, #20]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	f001 ff9a 	bl	8003fe2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	441a      	add	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80020bc:	2100      	movs	r1, #0
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f003 fd0e 	bl	8005ae0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	461c      	mov	r4, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	441c      	add	r4, r3
 80020d6:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80020da:	461c      	mov	r4, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10e      	bne.n	8002102 <PCD_EP_ISR_Handler+0x222>
 80020e4:	8823      	ldrh	r3, [r4, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	8023      	strh	r3, [r4, #0]
 80020f0:	8823      	ldrh	r3, [r4, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	8023      	strh	r3, [r4, #0]
 8002100:	e02d      	b.n	800215e <PCD_EP_ISR_Handler+0x27e>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b3e      	cmp	r3, #62	; 0x3e
 8002108:	d812      	bhi.n	8002130 <PCD_EP_ISR_Handler+0x250>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	085b      	lsrs	r3, r3, #1
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <PCD_EP_ISR_Handler+0x244>
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	3301      	adds	r3, #1
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	b29b      	uxth	r3, r3
 8002128:	029b      	lsls	r3, r3, #10
 800212a:	b29b      	uxth	r3, r3
 800212c:	8023      	strh	r3, [r4, #0]
 800212e:	e016      	b.n	800215e <PCD_EP_ISR_Handler+0x27e>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	095b      	lsrs	r3, r3, #5
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	2b00      	cmp	r3, #0
 8002142:	d102      	bne.n	800214a <PCD_EP_ISR_Handler+0x26a>
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	3b01      	subs	r3, #1
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	b29b      	uxth	r3, r3
 800214e:	029b      	lsls	r3, r3, #10
 8002150:	b29b      	uxth	r3, r3
 8002152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800215a:	b29b      	uxth	r3, r3
 800215c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800216a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800216e:	b29c      	uxth	r4, r3
 8002170:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002174:	b29c      	uxth	r4, r3
 8002176:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800217a:	b29c      	uxth	r4, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4ba2      	ldr	r3, [pc, #648]	; (800240c <PCD_EP_ISR_Handler+0x52c>)
 8002182:	4323      	orrs	r3, r4
 8002184:	b29b      	uxth	r3, r3
 8002186:	8013      	strh	r3, [r2, #0]
 8002188:	e132      	b.n	80023f0 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	7d7b      	ldrb	r3, [r7, #21]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800219a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f280 80d1 	bge.w	8002346 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	7d7b      	ldrb	r3, [r7, #21]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021b8:	4013      	ands	r3, r2
 80021ba:	b29c      	uxth	r4, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	7d7b      	ldrb	r3, [r7, #21]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80021cc:	b292      	uxth	r2, r2
 80021ce:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021d0:	7d7b      	ldrb	r3, [r7, #21]
 80021d2:	015b      	lsls	r3, r3, #5
 80021d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	7b1b      	ldrb	r3, [r3, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d121      	bne.n	800222a <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	3306      	adds	r3, #6
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	4413      	add	r3, r2
 8002204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002210:	8bfb      	ldrh	r3, [r7, #30]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d072      	beq.n	80022fc <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6959      	ldr	r1, [r3, #20]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	88da      	ldrh	r2, [r3, #6]
 8002222:	8bfb      	ldrh	r3, [r7, #30]
 8002224:	f001 fedd 	bl	8003fe2 <USB_ReadPMA>
 8002228:	e068      	b.n	80022fc <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d021      	beq.n	8002288 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800224c:	b29b      	uxth	r3, r3
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4413      	add	r3, r2
 8002258:	3302      	adds	r3, #2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	4413      	add	r3, r2
 8002262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800226c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800226e:	8bfb      	ldrh	r3, [r7, #30]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d02a      	beq.n	80022ca <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6818      	ldr	r0, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6959      	ldr	r1, [r3, #20]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	891a      	ldrh	r2, [r3, #8]
 8002280:	8bfb      	ldrh	r3, [r7, #30]
 8002282:	f001 feae 	bl	8003fe2 <USB_ReadPMA>
 8002286:	e020      	b.n	80022ca <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002290:	b29b      	uxth	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4413      	add	r3, r2
 800229c:	3306      	adds	r3, #6
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022b0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80022b2:	8bfb      	ldrh	r3, [r7, #30]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6818      	ldr	r0, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6959      	ldr	r1, [r3, #20]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	895a      	ldrh	r2, [r3, #10]
 80022c4:	8bfb      	ldrh	r3, [r7, #30]
 80022c6:	f001 fe8c 	bl	8003fe2 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e4:	b29c      	uxth	r4, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	441a      	add	r2, r3
 80022f4:	4b46      	ldr	r3, [pc, #280]	; (8002410 <PCD_EP_ISR_Handler+0x530>)
 80022f6:	4323      	orrs	r3, r4
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	69da      	ldr	r2, [r3, #28]
 8002300:	8bfb      	ldrh	r3, [r7, #30]
 8002302:	441a      	add	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	8bfb      	ldrh	r3, [r7, #30]
 800230e:	441a      	add	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <PCD_EP_ISR_Handler+0x446>
 800231c:	8bfa      	ldrh	r2, [r7, #30]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	429a      	cmp	r2, r3
 8002324:	d206      	bcs.n	8002334 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	4619      	mov	r1, r3
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f003 fbd7 	bl	8005ae0 <HAL_PCD_DataOutStageCallback>
 8002332:	e008      	b.n	8002346 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	7819      	ldrb	r1, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff fc9d 	bl	8001c80 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002346:	8a7b      	ldrh	r3, [r7, #18]
 8002348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234c:	2b00      	cmp	r3, #0
 800234e:	d04f      	beq.n	80023f0 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002350:	7d7b      	ldrb	r3, [r7, #21]
 8002352:	015b      	lsls	r3, r3, #5
 8002354:	3328      	adds	r3, #40	; 0x28
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	7d7b      	ldrb	r3, [r7, #21]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	b29b      	uxth	r3, r3
 800236c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002374:	b29c      	uxth	r4, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	7d7b      	ldrb	r3, [r7, #21]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	441a      	add	r2, r3
 8002382:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800238a:	b29b      	uxth	r3, r3
 800238c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002396:	b29b      	uxth	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4413      	add	r3, r2
 80023a2:	3302      	adds	r3, #2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	441a      	add	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d106      	bne.n	80023de <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f003 fb9a 	bl	8005b10 <HAL_PCD_DataInStageCallback>
 80023dc:	e008      	b.n	80023f0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	7819      	ldrb	r1, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff fc96 	bl	8001d1c <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f6ff ad74 	blt.w	8001eea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3724      	adds	r7, #36	; 0x24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd90      	pop	{r4, r7, pc}
 800240c:	ffff8080 	.word	0xffff8080
 8002410:	ffff80c0 	.word	0xffff80c0

08002414 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	607b      	str	r3, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	817b      	strh	r3, [r7, #10]
 8002422:	4613      	mov	r3, r2
 8002424:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002426:	897b      	ldrh	r3, [r7, #10]
 8002428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242c:	b29b      	uxth	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002432:	897b      	ldrh	r3, [r7, #10]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	015b      	lsls	r3, r3, #5
 800243a:	3328      	adds	r3, #40	; 0x28
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4413      	add	r3, r2
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	e006      	b.n	8002452 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002444:	897b      	ldrh	r3, [r7, #10]
 8002446:	015b      	lsls	r3, r3, #5
 8002448:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002452:	893b      	ldrh	r3, [r7, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d107      	bne.n	8002468 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2200      	movs	r2, #0
 800245c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	b29a      	uxth	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	80da      	strh	r2, [r3, #6]
 8002466:	e00b      	b.n	8002480 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2201      	movs	r2, #1
 800246c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	b29a      	uxth	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	0c1b      	lsrs	r3, r3, #16
 800247a:	b29a      	uxth	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e26c      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8087 	beq.w	80025ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024ac:	4b92      	ldr	r3, [pc, #584]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d00c      	beq.n	80024d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024b8:	4b8f      	ldr	r3, [pc, #572]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d112      	bne.n	80024ea <HAL_RCC_OscConfig+0x5e>
 80024c4:	4b8c      	ldr	r3, [pc, #560]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d0:	d10b      	bne.n	80024ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d2:	4b89      	ldr	r3, [pc, #548]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d06c      	beq.n	80025b8 <HAL_RCC_OscConfig+0x12c>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d168      	bne.n	80025b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e246      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f2:	d106      	bne.n	8002502 <HAL_RCC_OscConfig+0x76>
 80024f4:	4b80      	ldr	r3, [pc, #512]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a7f      	ldr	r2, [pc, #508]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80024fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e02e      	b.n	8002560 <HAL_RCC_OscConfig+0xd4>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0x98>
 800250a:	4b7b      	ldr	r3, [pc, #492]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a7a      	ldr	r2, [pc, #488]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4b78      	ldr	r3, [pc, #480]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a77      	ldr	r2, [pc, #476]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800251c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e01d      	b.n	8002560 <HAL_RCC_OscConfig+0xd4>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0xbc>
 800252e:	4b72      	ldr	r3, [pc, #456]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a71      	ldr	r2, [pc, #452]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b6f      	ldr	r3, [pc, #444]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a6e      	ldr	r2, [pc, #440]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e00b      	b.n	8002560 <HAL_RCC_OscConfig+0xd4>
 8002548:	4b6b      	ldr	r3, [pc, #428]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a6a      	ldr	r2, [pc, #424]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800254e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	4b68      	ldr	r3, [pc, #416]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a67      	ldr	r2, [pc, #412]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800255a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002568:	f7fe f8a4 	bl	80006b4 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002570:	f7fe f8a0 	bl	80006b4 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	; 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e1fa      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	4b5d      	ldr	r3, [pc, #372]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0xe4>
 800258e:	e014      	b.n	80025ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe f890 	bl	80006b4 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002598:	f7fe f88c 	bl	80006b4 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	; 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e1e6      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025aa:	4b53      	ldr	r3, [pc, #332]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x10c>
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d063      	beq.n	800268e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025c6:	4b4c      	ldr	r3, [pc, #304]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025d2:	4b49      	ldr	r3, [pc, #292]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d11c      	bne.n	8002618 <HAL_RCC_OscConfig+0x18c>
 80025de:	4b46      	ldr	r3, [pc, #280]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d116      	bne.n	8002618 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	4b43      	ldr	r3, [pc, #268]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_RCC_OscConfig+0x176>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d001      	beq.n	8002602 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e1ba      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b3d      	ldr	r3, [pc, #244]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4939      	ldr	r1, [pc, #228]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	e03a      	b.n	800268e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002620:	4b36      	ldr	r3, [pc, #216]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002626:	f7fe f845 	bl	80006b4 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262e:	f7fe f841 	bl	80006b4 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e19b      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002640:	4b2d      	ldr	r3, [pc, #180]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264c:	4b2a      	ldr	r3, [pc, #168]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4927      	ldr	r1, [pc, #156]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 800265c:	4313      	orrs	r3, r2
 800265e:	600b      	str	r3, [r1, #0]
 8002660:	e015      	b.n	800268e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002662:	4b26      	ldr	r3, [pc, #152]	; (80026fc <HAL_RCC_OscConfig+0x270>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe f824 	bl	80006b4 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002670:	f7fe f820 	bl	80006b4 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e17a      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d03a      	beq.n	8002710 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d019      	beq.n	80026d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a8:	f7fe f804 	bl	80006b4 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b0:	f7fe f800 	bl	80006b4 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e15a      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026ce:	2001      	movs	r0, #1
 80026d0:	f000 faa8 	bl	8002c24 <RCC_Delay>
 80026d4:	e01c      	b.n	8002710 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_RCC_OscConfig+0x274>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026dc:	f7fd ffea 	bl	80006b4 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e2:	e00f      	b.n	8002704 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e4:	f7fd ffe6 	bl	80006b4 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d908      	bls.n	8002704 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e140      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	42420000 	.word	0x42420000
 8002700:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002704:	4b9e      	ldr	r3, [pc, #632]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1e9      	bne.n	80026e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 80a6 	beq.w	800286a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002722:	4b97      	ldr	r3, [pc, #604]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10d      	bne.n	800274a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	4b94      	ldr	r3, [pc, #592]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	4a93      	ldr	r2, [pc, #588]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002738:	61d3      	str	r3, [r2, #28]
 800273a:	4b91      	ldr	r3, [pc, #580]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002746:	2301      	movs	r3, #1
 8002748:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274a:	4b8e      	ldr	r3, [pc, #568]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d118      	bne.n	8002788 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002756:	4b8b      	ldr	r3, [pc, #556]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a8a      	ldr	r2, [pc, #552]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002762:	f7fd ffa7 	bl	80006b4 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276a:	f7fd ffa3 	bl	80006b4 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b64      	cmp	r3, #100	; 0x64
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e0fd      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	4b81      	ldr	r3, [pc, #516]	; (8002984 <HAL_RCC_OscConfig+0x4f8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d106      	bne.n	800279e <HAL_RCC_OscConfig+0x312>
 8002790:	4b7b      	ldr	r3, [pc, #492]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4a7a      	ldr	r2, [pc, #488]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6213      	str	r3, [r2, #32]
 800279c:	e02d      	b.n	80027fa <HAL_RCC_OscConfig+0x36e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x334>
 80027a6:	4b76      	ldr	r3, [pc, #472]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	4a75      	ldr	r2, [pc, #468]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	6213      	str	r3, [r2, #32]
 80027b2:	4b73      	ldr	r3, [pc, #460]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	4a72      	ldr	r2, [pc, #456]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	f023 0304 	bic.w	r3, r3, #4
 80027bc:	6213      	str	r3, [r2, #32]
 80027be:	e01c      	b.n	80027fa <HAL_RCC_OscConfig+0x36e>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2b05      	cmp	r3, #5
 80027c6:	d10c      	bne.n	80027e2 <HAL_RCC_OscConfig+0x356>
 80027c8:	4b6d      	ldr	r3, [pc, #436]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	4a6c      	ldr	r2, [pc, #432]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	f043 0304 	orr.w	r3, r3, #4
 80027d2:	6213      	str	r3, [r2, #32]
 80027d4:	4b6a      	ldr	r3, [pc, #424]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4a69      	ldr	r2, [pc, #420]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6213      	str	r3, [r2, #32]
 80027e0:	e00b      	b.n	80027fa <HAL_RCC_OscConfig+0x36e>
 80027e2:	4b67      	ldr	r3, [pc, #412]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4a66      	ldr	r2, [pc, #408]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	6213      	str	r3, [r2, #32]
 80027ee:	4b64      	ldr	r3, [pc, #400]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a63      	ldr	r2, [pc, #396]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	f023 0304 	bic.w	r3, r3, #4
 80027f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d015      	beq.n	800282e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002802:	f7fd ff57 	bl	80006b4 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002808:	e00a      	b.n	8002820 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280a:	f7fd ff53 	bl	80006b4 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	f241 3288 	movw	r2, #5000	; 0x1388
 8002818:	4293      	cmp	r3, r2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e0ab      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002820:	4b57      	ldr	r3, [pc, #348]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ee      	beq.n	800280a <HAL_RCC_OscConfig+0x37e>
 800282c:	e014      	b.n	8002858 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282e:	f7fd ff41 	bl	80006b4 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002834:	e00a      	b.n	800284c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fd ff3d 	bl	80006b4 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	; 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e095      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284c:	4b4c      	ldr	r3, [pc, #304]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1ee      	bne.n	8002836 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d105      	bne.n	800286a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285e:	4b48      	ldr	r3, [pc, #288]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	4a47      	ldr	r2, [pc, #284]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002868:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 8081 	beq.w	8002976 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002874:	4b42      	ldr	r3, [pc, #264]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b08      	cmp	r3, #8
 800287e:	d061      	beq.n	8002944 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d146      	bne.n	8002916 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002888:	4b3f      	ldr	r3, [pc, #252]	; (8002988 <HAL_RCC_OscConfig+0x4fc>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288e:	f7fd ff11 	bl	80006b4 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002896:	f7fd ff0d 	bl	80006b4 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e067      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a8:	4b35      	ldr	r3, [pc, #212]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f0      	bne.n	8002896 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028bc:	d108      	bne.n	80028d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028be:	4b30      	ldr	r3, [pc, #192]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	492d      	ldr	r1, [pc, #180]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028d0:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a19      	ldr	r1, [r3, #32]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	430b      	orrs	r3, r1
 80028e2:	4927      	ldr	r1, [pc, #156]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e8:	4b27      	ldr	r3, [pc, #156]	; (8002988 <HAL_RCC_OscConfig+0x4fc>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ee:	f7fd fee1 	bl	80006b4 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f6:	f7fd fedd 	bl	80006b4 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e037      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002908:	4b1d      	ldr	r3, [pc, #116]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x46a>
 8002914:	e02f      	b.n	8002976 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002916:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <HAL_RCC_OscConfig+0x4fc>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fd feca 	bl	80006b4 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002924:	f7fd fec6 	bl	80006b4 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e020      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002936:	4b12      	ldr	r3, [pc, #72]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x498>
 8002942:	e018      	b.n	8002976 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e013      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_RCC_OscConfig+0x4f4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	429a      	cmp	r2, r3
 8002962:	d106      	bne.n	8002972 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d001      	beq.n	8002976 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	40007000 	.word	0x40007000
 8002988:	42420060 	.word	0x42420060

0800298c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0d0      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029a0:	4b6a      	ldr	r3, [pc, #424]	; (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d910      	bls.n	80029d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ae:	4b67      	ldr	r3, [pc, #412]	; (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 0207 	bic.w	r2, r3, #7
 80029b6:	4965      	ldr	r1, [pc, #404]	; (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0b8      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d020      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e8:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4a58      	ldr	r2, [pc, #352]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a00:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0c:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	494d      	ldr	r1, [pc, #308]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d040      	beq.n	8002aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d115      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e07f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d107      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4a:	4b41      	ldr	r3, [pc, #260]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e073      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5a:	4b3d      	ldr	r3, [pc, #244]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e06b      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6a:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f023 0203 	bic.w	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	4936      	ldr	r1, [pc, #216]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a7c:	f7fd fe1a 	bl	80006b4 <HAL_GetTick>
 8002a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	e00a      	b.n	8002a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a84:	f7fd fe16 	bl	80006b4 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e053      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9a:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 020c 	and.w	r2, r3, #12
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d1eb      	bne.n	8002a84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aac:	4b27      	ldr	r3, [pc, #156]	; (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d210      	bcs.n	8002adc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 0207 	bic.w	r2, r3, #7
 8002ac2:	4922      	ldr	r1, [pc, #136]	; (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e032      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4916      	ldr	r1, [pc, #88]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	490e      	ldr	r1, [pc, #56]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b1a:	f000 f821 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002b1e:	4601      	mov	r1, r0
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2c:	5cd3      	ldrb	r3, [r2, r3]
 8002b2e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b32:	4a09      	ldr	r2, [pc, #36]	; (8002b58 <HAL_RCC_ClockConfig+0x1cc>)
 8002b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1d0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fd78 	bl	8000630 <HAL_InitTick>

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40022000 	.word	0x40022000
 8002b50:	40021000 	.word	0x40021000
 8002b54:	08006078 	.word	0x08006078
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	20000004 	.word	0x20000004

08002b60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	b490      	push	{r4, r7}
 8002b62:	b08a      	sub	sp, #40	; 0x28
 8002b64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b66:	4b2a      	ldr	r3, [pc, #168]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b68:	1d3c      	adds	r4, r7, #4
 8002b6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b70:	4b28      	ldr	r3, [pc, #160]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b8a:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d002      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x46>
 8002b9e:	e02d      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ba0:	4b1e      	ldr	r3, [pc, #120]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ba2:	623b      	str	r3, [r7, #32]
      break;
 8002ba4:	e02d      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	0c9b      	lsrs	r3, r3, #18
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bb8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d013      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	0c5b      	lsrs	r3, r3, #17
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	4a0f      	ldr	r2, [pc, #60]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bde:	fb02 f203 	mul.w	r2, r2, r3
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bea:	e004      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	4a0c      	ldr	r2, [pc, #48]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bf0:	fb02 f303 	mul.w	r3, r2, r3
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	623b      	str	r3, [r7, #32]
      break;
 8002bfa:	e002      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bfc:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bfe:	623b      	str	r3, [r7, #32]
      break;
 8002c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c02:	6a3b      	ldr	r3, [r7, #32]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3728      	adds	r7, #40	; 0x28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc90      	pop	{r4, r7}
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	0800601c 	.word	0x0800601c
 8002c14:	0800602c 	.word	0x0800602c
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	007a1200 	.word	0x007a1200
 8002c20:	003d0900 	.word	0x003d0900

08002c24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <RCC_Delay+0x34>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <RCC_Delay+0x38>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0a5b      	lsrs	r3, r3, #9
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	fb02 f303 	mul.w	r3, r2, r3
 8002c3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c40:	bf00      	nop
  }
  while (Delay --);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1e5a      	subs	r2, r3, #1
 8002c46:	60fa      	str	r2, [r7, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f9      	bne.n	8002c40 <RCC_Delay+0x1c>
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	10624dd3 	.word	0x10624dd3

08002c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d07d      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c80:	4b4f      	ldr	r3, [pc, #316]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10d      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8c:	4b4c      	ldr	r3, [pc, #304]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	4a4b      	ldr	r2, [pc, #300]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c96:	61d3      	str	r3, [r2, #28]
 8002c98:	4b49      	ldr	r3, [pc, #292]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	4b46      	ldr	r3, [pc, #280]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d118      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb4:	4b43      	ldr	r3, [pc, #268]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a42      	ldr	r2, [pc, #264]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc0:	f7fd fcf8 	bl	80006b4 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	e008      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc8:	f7fd fcf4 	bl	80006b4 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	; 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e06d      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cda:	4b3a      	ldr	r3, [pc, #232]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ce6:	4b36      	ldr	r3, [pc, #216]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d02e      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d027      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d04:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d0e:	4b2e      	ldr	r3, [pc, #184]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d14:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d1a:	4a29      	ldr	r2, [pc, #164]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d014      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2a:	f7fd fcc3 	bl	80006b4 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7fd fcbf 	bl	80006b4 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e036      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d48:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0ee      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d54:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4917      	ldr	r1, [pc, #92]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d66:	7dfb      	ldrb	r3, [r7, #23]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6c:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d84:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	490b      	ldr	r1, [pc, #44]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d008      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002da2:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	4904      	ldr	r1, [pc, #16]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40007000 	.word	0x40007000
 8002dc8:	42420440 	.word	0x42420440

08002dcc <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002dcc:	b084      	sub	sp, #16
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	f107 0014 	add.w	r0, r7, #20
 8002dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	b004      	add	sp, #16
 8002dea:	4770      	bx	lr

08002dec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002df4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002df8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	89fb      	ldrh	r3, [r7, #14]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr

08002e1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b085      	sub	sp, #20
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002e22:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002e26:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	b21a      	sxth	r2, r3
 8002e32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	b21b      	sxth	r3, r3
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	b21b      	sxth	r3, r3
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr

08002e6a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	f107 0014 	add.w	r0, r7, #20
 8002e78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff ffa5 	bl	8002dec <USB_EnableGlobalInt>

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002eae:	b004      	add	sp, #16
 8002eb0:	4770      	bx	lr
	...

08002eb4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002eb4:	b490      	push	{r4, r7}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed8:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	78db      	ldrb	r3, [r3, #3]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d819      	bhi.n	8002f16 <USB_ActivateEndpoint+0x62>
 8002ee2:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <USB_ActivateEndpoint+0x34>)
 8002ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee8:	08002ef9 	.word	0x08002ef9
 8002eec:	08002f0d 	.word	0x08002f0d
 8002ef0:	08002f1d 	.word	0x08002f1d
 8002ef4:	08002f03 	.word	0x08002f03
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002ef8:	89bb      	ldrh	r3, [r7, #12]
 8002efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002efe:	81bb      	strh	r3, [r7, #12]
      break;
 8002f00:	e00d      	b.n	8002f1e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002f02:	89bb      	ldrh	r3, [r7, #12]
 8002f04:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002f08:	81bb      	strh	r3, [r7, #12]
      break;
 8002f0a:	e008      	b.n	8002f1e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002f0c:	89bb      	ldrh	r3, [r7, #12]
 8002f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f12:	81bb      	strh	r3, [r7, #12]
      break;
 8002f14:	e003      	b.n	8002f1e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
      break;
 8002f1a:	e000      	b.n	8002f1e <USB_ActivateEndpoint+0x6a>
      break;
 8002f1c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	441a      	add	r2, r3
 8002f28:	89bb      	ldrh	r3, [r7, #12]
 8002f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	b29c      	uxth	r4, r3
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	441a      	add	r2, r3
 8002f6a:	4b8a      	ldr	r3, [pc, #552]	; (8003194 <USB_ActivateEndpoint+0x2e0>)
 8002f6c:	4323      	orrs	r3, r4
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	7b1b      	ldrb	r3, [r3, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 8112 	bne.w	80031a0 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	785b      	ldrb	r3, [r3, #1]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d067      	beq.n	8003054 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f84:	687c      	ldr	r4, [r7, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	441c      	add	r4, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	4423      	add	r3, r4
 8002f98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f9c:	461c      	mov	r4, r3
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	88db      	ldrh	r3, [r3, #6]
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	b29c      	uxth	r4, r3
 8002fba:	4623      	mov	r3, r4
 8002fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d014      	beq.n	8002fee <USB_ActivateEndpoint+0x13a>
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fda:	b29c      	uxth	r4, r3
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	441a      	add	r2, r3
 8002fe6:	4b6c      	ldr	r3, [pc, #432]	; (8003198 <USB_ActivateEndpoint+0x2e4>)
 8002fe8:	4323      	orrs	r3, r4
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	78db      	ldrb	r3, [r3, #3]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d018      	beq.n	8003028 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	b29b      	uxth	r3, r3
 8003004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800300c:	b29c      	uxth	r4, r3
 800300e:	f084 0320 	eor.w	r3, r4, #32
 8003012:	b29c      	uxth	r4, r3
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	441a      	add	r2, r3
 800301e:	4b5d      	ldr	r3, [pc, #372]	; (8003194 <USB_ActivateEndpoint+0x2e0>)
 8003020:	4323      	orrs	r3, r4
 8003022:	b29b      	uxth	r3, r3
 8003024:	8013      	strh	r3, [r2, #0]
 8003026:	e22b      	b.n	8003480 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	b29b      	uxth	r3, r3
 8003036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800303a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800303e:	b29c      	uxth	r4, r3
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	441a      	add	r2, r3
 800304a:	4b52      	ldr	r3, [pc, #328]	; (8003194 <USB_ActivateEndpoint+0x2e0>)
 800304c:	4323      	orrs	r3, r4
 800304e:	b29b      	uxth	r3, r3
 8003050:	8013      	strh	r3, [r2, #0]
 8003052:	e215      	b.n	8003480 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003054:	687c      	ldr	r4, [r7, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800305c:	b29b      	uxth	r3, r3
 800305e:	441c      	add	r4, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	4423      	add	r3, r4
 8003068:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800306c:	461c      	mov	r4, r3
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	88db      	ldrh	r3, [r3, #6]
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	b29b      	uxth	r3, r3
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	b29b      	uxth	r3, r3
 800307a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800307c:	687c      	ldr	r4, [r7, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003084:	b29b      	uxth	r3, r3
 8003086:	441c      	add	r4, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	4423      	add	r3, r4
 8003090:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003094:	461c      	mov	r4, r3
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10e      	bne.n	80030bc <USB_ActivateEndpoint+0x208>
 800309e:	8823      	ldrh	r3, [r4, #0]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	8023      	strh	r3, [r4, #0]
 80030aa:	8823      	ldrh	r3, [r4, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	8023      	strh	r3, [r4, #0]
 80030ba:	e02d      	b.n	8003118 <USB_ActivateEndpoint+0x264>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	2b3e      	cmp	r3, #62	; 0x3e
 80030c2:	d812      	bhi.n	80030ea <USB_ActivateEndpoint+0x236>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	085b      	lsrs	r3, r3, #1
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <USB_ActivateEndpoint+0x22a>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	3301      	adds	r3, #1
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	029b      	lsls	r3, r3, #10
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	8023      	strh	r3, [r4, #0]
 80030e8:	e016      	b.n	8003118 <USB_ActivateEndpoint+0x264>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d102      	bne.n	8003104 <USB_ActivateEndpoint+0x250>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	3b01      	subs	r3, #1
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	b29b      	uxth	r3, r3
 8003108:	029b      	lsls	r3, r3, #10
 800310a:	b29b      	uxth	r3, r3
 800310c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003114:	b29b      	uxth	r3, r3
 8003116:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	b29c      	uxth	r4, r3
 8003126:	4623      	mov	r3, r4
 8003128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d014      	beq.n	800315a <USB_ActivateEndpoint+0x2a6>
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
 800313e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003146:	b29c      	uxth	r4, r3
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	441a      	add	r2, r3
 8003152:	4b12      	ldr	r3, [pc, #72]	; (800319c <USB_ActivateEndpoint+0x2e8>)
 8003154:	4323      	orrs	r3, r4
 8003156:	b29b      	uxth	r3, r3
 8003158:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800316c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003170:	b29c      	uxth	r4, r3
 8003172:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003176:	b29c      	uxth	r4, r3
 8003178:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800317c:	b29c      	uxth	r4, r3
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	441a      	add	r2, r3
 8003188:	4b02      	ldr	r3, [pc, #8]	; (8003194 <USB_ActivateEndpoint+0x2e0>)
 800318a:	4323      	orrs	r3, r4
 800318c:	b29b      	uxth	r3, r3
 800318e:	8013      	strh	r3, [r2, #0]
 8003190:	e176      	b.n	8003480 <USB_ActivateEndpoint+0x5cc>
 8003192:	bf00      	nop
 8003194:	ffff8080 	.word	0xffff8080
 8003198:	ffff80c0 	.word	0xffff80c0
 800319c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b6:	b29c      	uxth	r4, r3
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	441a      	add	r2, r3
 80031c2:	4b96      	ldr	r3, [pc, #600]	; (800341c <USB_ActivateEndpoint+0x568>)
 80031c4:	4323      	orrs	r3, r4
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80031ca:	687c      	ldr	r4, [r7, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	441c      	add	r4, r3
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	4423      	add	r3, r4
 80031de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031e2:	461c      	mov	r4, r3
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	891b      	ldrh	r3, [r3, #8]
 80031e8:	085b      	lsrs	r3, r3, #1
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	8023      	strh	r3, [r4, #0]
 80031f2:	687c      	ldr	r4, [r7, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	441c      	add	r4, r3
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	4423      	add	r3, r4
 8003206:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800320a:	461c      	mov	r4, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	895b      	ldrh	r3, [r3, #10]
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	b29b      	uxth	r3, r3
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	b29b      	uxth	r3, r3
 8003218:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	785b      	ldrb	r3, [r3, #1]
 800321e:	2b00      	cmp	r3, #0
 8003220:	f040 8088 	bne.w	8003334 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	b29c      	uxth	r4, r3
 8003232:	4623      	mov	r3, r4
 8003234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d014      	beq.n	8003266 <USB_ActivateEndpoint+0x3b2>
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	b29b      	uxth	r3, r3
 800324a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800324e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003252:	b29c      	uxth	r4, r3
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	441a      	add	r2, r3
 800325e:	4b70      	ldr	r3, [pc, #448]	; (8003420 <USB_ActivateEndpoint+0x56c>)
 8003260:	4323      	orrs	r3, r4
 8003262:	b29b      	uxth	r3, r3
 8003264:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29c      	uxth	r4, r3
 8003274:	4623      	mov	r3, r4
 8003276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	d014      	beq.n	80032a8 <USB_ActivateEndpoint+0x3f4>
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	b29b      	uxth	r3, r3
 800328c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003294:	b29c      	uxth	r4, r3
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	441a      	add	r2, r3
 80032a0:	4b60      	ldr	r3, [pc, #384]	; (8003424 <USB_ActivateEndpoint+0x570>)
 80032a2:	4323      	orrs	r3, r4
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032be:	b29c      	uxth	r4, r3
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	441a      	add	r2, r3
 80032ca:	4b56      	ldr	r3, [pc, #344]	; (8003424 <USB_ActivateEndpoint+0x570>)
 80032cc:	4323      	orrs	r3, r4
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e8:	b29c      	uxth	r4, r3
 80032ea:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80032ee:	b29c      	uxth	r4, r3
 80032f0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80032f4:	b29c      	uxth	r4, r3
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	441a      	add	r2, r3
 8003300:	4b49      	ldr	r3, [pc, #292]	; (8003428 <USB_ActivateEndpoint+0x574>)
 8003302:	4323      	orrs	r3, r4
 8003304:	b29b      	uxth	r3, r3
 8003306:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	b29b      	uxth	r3, r3
 8003316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800331a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800331e:	b29c      	uxth	r4, r3
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	441a      	add	r2, r3
 800332a:	4b3f      	ldr	r3, [pc, #252]	; (8003428 <USB_ActivateEndpoint+0x574>)
 800332c:	4323      	orrs	r3, r4
 800332e:	b29b      	uxth	r3, r3
 8003330:	8013      	strh	r3, [r2, #0]
 8003332:	e0a5      	b.n	8003480 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	b29c      	uxth	r4, r3
 8003342:	4623      	mov	r3, r4
 8003344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d014      	beq.n	8003376 <USB_ActivateEndpoint+0x4c2>
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	b29b      	uxth	r3, r3
 800335a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800335e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003362:	b29c      	uxth	r4, r3
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	441a      	add	r2, r3
 800336e:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <USB_ActivateEndpoint+0x56c>)
 8003370:	4323      	orrs	r3, r4
 8003372:	b29b      	uxth	r3, r3
 8003374:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	b29c      	uxth	r4, r3
 8003384:	4623      	mov	r3, r4
 8003386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d014      	beq.n	80033b8 <USB_ActivateEndpoint+0x504>
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a4:	b29c      	uxth	r4, r3
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	441a      	add	r2, r3
 80033b0:	4b1c      	ldr	r3, [pc, #112]	; (8003424 <USB_ActivateEndpoint+0x570>)
 80033b2:	4323      	orrs	r3, r4
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ce:	b29c      	uxth	r4, r3
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	441a      	add	r2, r3
 80033da:	4b11      	ldr	r3, [pc, #68]	; (8003420 <USB_ActivateEndpoint+0x56c>)
 80033dc:	4323      	orrs	r3, r4
 80033de:	b29b      	uxth	r3, r3
 80033e0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	78db      	ldrb	r3, [r3, #3]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d020      	beq.n	800342c <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003400:	b29c      	uxth	r4, r3
 8003402:	f084 0320 	eor.w	r3, r4, #32
 8003406:	b29c      	uxth	r4, r3
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	441a      	add	r2, r3
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <USB_ActivateEndpoint+0x574>)
 8003414:	4323      	orrs	r3, r4
 8003416:	b29b      	uxth	r3, r3
 8003418:	8013      	strh	r3, [r2, #0]
 800341a:	e01c      	b.n	8003456 <USB_ActivateEndpoint+0x5a2>
 800341c:	ffff8180 	.word	0xffff8180
 8003420:	ffffc080 	.word	0xffffc080
 8003424:	ffff80c0 	.word	0xffff80c0
 8003428:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	b29b      	uxth	r3, r3
 800343a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800343e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003442:	b29c      	uxth	r4, r3
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	441a      	add	r2, r3
 800344e:	4b0f      	ldr	r3, [pc, #60]	; (800348c <USB_ActivateEndpoint+0x5d8>)
 8003450:	4323      	orrs	r3, r4
 8003452:	b29b      	uxth	r3, r3
 8003454:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346c:	b29c      	uxth	r4, r3
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	441a      	add	r2, r3
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <USB_ActivateEndpoint+0x5d8>)
 800347a:	4323      	orrs	r3, r4
 800347c:	b29b      	uxth	r3, r3
 800347e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bc90      	pop	{r4, r7}
 800348a:	4770      	bx	lr
 800348c:	ffff8080 	.word	0xffff8080

08003490 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003490:	b490      	push	{r4, r7}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	7b1b      	ldrb	r3, [r3, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d171      	bne.n	8003586 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	785b      	ldrb	r3, [r3, #1]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d036      	beq.n	8003518 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	b29c      	uxth	r4, r3
 80034b8:	4623      	mov	r3, r4
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d014      	beq.n	80034ec <USB_DeactivateEndpoint+0x5c>
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d8:	b29c      	uxth	r4, r3
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	441a      	add	r2, r3
 80034e4:	4b6b      	ldr	r3, [pc, #428]	; (8003694 <USB_DeactivateEndpoint+0x204>)
 80034e6:	4323      	orrs	r3, r4
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003502:	b29c      	uxth	r4, r3
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	441a      	add	r2, r3
 800350e:	4b62      	ldr	r3, [pc, #392]	; (8003698 <USB_DeactivateEndpoint+0x208>)
 8003510:	4323      	orrs	r3, r4
 8003512:	b29b      	uxth	r3, r3
 8003514:	8013      	strh	r3, [r2, #0]
 8003516:	e144      	b.n	80037a2 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	b29c      	uxth	r4, r3
 8003526:	4623      	mov	r3, r4
 8003528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d014      	beq.n	800355a <USB_DeactivateEndpoint+0xca>
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	b29b      	uxth	r3, r3
 800353e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003546:	b29c      	uxth	r4, r3
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	441a      	add	r2, r3
 8003552:	4b52      	ldr	r3, [pc, #328]	; (800369c <USB_DeactivateEndpoint+0x20c>)
 8003554:	4323      	orrs	r3, r4
 8003556:	b29b      	uxth	r3, r3
 8003558:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800356c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003570:	b29c      	uxth	r4, r3
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	441a      	add	r2, r3
 800357c:	4b46      	ldr	r3, [pc, #280]	; (8003698 <USB_DeactivateEndpoint+0x208>)
 800357e:	4323      	orrs	r3, r4
 8003580:	b29b      	uxth	r3, r3
 8003582:	8013      	strh	r3, [r2, #0]
 8003584:	e10d      	b.n	80037a2 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	785b      	ldrb	r3, [r3, #1]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f040 8088 	bne.w	80036a0 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	b29c      	uxth	r4, r3
 800359e:	4623      	mov	r3, r4
 80035a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d014      	beq.n	80035d2 <USB_DeactivateEndpoint+0x142>
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035be:	b29c      	uxth	r4, r3
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	441a      	add	r2, r3
 80035ca:	4b34      	ldr	r3, [pc, #208]	; (800369c <USB_DeactivateEndpoint+0x20c>)
 80035cc:	4323      	orrs	r3, r4
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	b29c      	uxth	r4, r3
 80035e0:	4623      	mov	r3, r4
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d014      	beq.n	8003614 <USB_DeactivateEndpoint+0x184>
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003600:	b29c      	uxth	r4, r3
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	441a      	add	r2, r3
 800360c:	4b21      	ldr	r3, [pc, #132]	; (8003694 <USB_DeactivateEndpoint+0x204>)
 800360e:	4323      	orrs	r3, r4
 8003610:	b29b      	uxth	r3, r3
 8003612:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	b29b      	uxth	r3, r3
 8003622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362a:	b29c      	uxth	r4, r3
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	441a      	add	r2, r3
 8003636:	4b17      	ldr	r3, [pc, #92]	; (8003694 <USB_DeactivateEndpoint+0x204>)
 8003638:	4323      	orrs	r3, r4
 800363a:	b29b      	uxth	r3, r3
 800363c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003654:	b29c      	uxth	r4, r3
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	441a      	add	r2, r3
 8003660:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <USB_DeactivateEndpoint+0x208>)
 8003662:	4323      	orrs	r3, r4
 8003664:	b29b      	uxth	r3, r3
 8003666:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	b29b      	uxth	r3, r3
 8003676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800367a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800367e:	b29c      	uxth	r4, r3
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	441a      	add	r2, r3
 800368a:	4b03      	ldr	r3, [pc, #12]	; (8003698 <USB_DeactivateEndpoint+0x208>)
 800368c:	4323      	orrs	r3, r4
 800368e:	b29b      	uxth	r3, r3
 8003690:	8013      	strh	r3, [r2, #0]
 8003692:	e086      	b.n	80037a2 <USB_DeactivateEndpoint+0x312>
 8003694:	ffff80c0 	.word	0xffff80c0
 8003698:	ffff8080 	.word	0xffff8080
 800369c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29c      	uxth	r4, r3
 80036ae:	4623      	mov	r3, r4
 80036b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d014      	beq.n	80036e2 <USB_DeactivateEndpoint+0x252>
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ce:	b29c      	uxth	r4, r3
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	441a      	add	r2, r3
 80036da:	4b35      	ldr	r3, [pc, #212]	; (80037b0 <USB_DeactivateEndpoint+0x320>)
 80036dc:	4323      	orrs	r3, r4
 80036de:	b29b      	uxth	r3, r3
 80036e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	b29c      	uxth	r4, r3
 80036f0:	4623      	mov	r3, r4
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d014      	beq.n	8003724 <USB_DeactivateEndpoint+0x294>
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	b29b      	uxth	r3, r3
 8003708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800370c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003710:	b29c      	uxth	r4, r3
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	441a      	add	r2, r3
 800371c:	4b25      	ldr	r3, [pc, #148]	; (80037b4 <USB_DeactivateEndpoint+0x324>)
 800371e:	4323      	orrs	r3, r4
 8003720:	b29b      	uxth	r3, r3
 8003722:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	b29b      	uxth	r3, r3
 8003732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373a:	b29c      	uxth	r4, r3
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	441a      	add	r2, r3
 8003746:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <USB_DeactivateEndpoint+0x320>)
 8003748:	4323      	orrs	r3, r4
 800374a:	b29b      	uxth	r3, r3
 800374c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	b29b      	uxth	r3, r3
 800375c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003764:	b29c      	uxth	r4, r3
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	441a      	add	r2, r3
 8003770:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <USB_DeactivateEndpoint+0x328>)
 8003772:	4323      	orrs	r3, r4
 8003774:	b29b      	uxth	r3, r3
 8003776:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	b29b      	uxth	r3, r3
 8003786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800378a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378e:	b29c      	uxth	r4, r3
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	441a      	add	r2, r3
 800379a:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <USB_DeactivateEndpoint+0x328>)
 800379c:	4323      	orrs	r3, r4
 800379e:	b29b      	uxth	r3, r3
 80037a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc90      	pop	{r4, r7}
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	ffffc080 	.word	0xffffc080
 80037b4:	ffff80c0 	.word	0xffff80c0
 80037b8:	ffff8080 	.word	0xffff8080

080037bc <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80037bc:	b590      	push	{r4, r7, lr}
 80037be:	b08d      	sub	sp, #52	; 0x34
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	785b      	ldrb	r3, [r3, #1]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	f040 8160 	bne.w	8003a90 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	699a      	ldr	r2, [r3, #24]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d909      	bls.n	80037f0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e8:	1ad2      	subs	r2, r2, r3
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	619a      	str	r2, [r3, #24]
 80037ee:	e005      	b.n	80037fc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2200      	movs	r2, #0
 80037fa:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	7b1b      	ldrb	r3, [r3, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d119      	bne.n	8003838 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	6959      	ldr	r1, [r3, #20]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	88da      	ldrh	r2, [r3, #6]
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	b29b      	uxth	r3, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fba2 	bl	8003f5a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003816:	687c      	ldr	r4, [r7, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800381e:	b29b      	uxth	r3, r3
 8003820:	441c      	add	r4, r3
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	4423      	add	r3, r4
 800382a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800382e:	461c      	mov	r4, r3
 8003830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003832:	b29b      	uxth	r3, r3
 8003834:	8023      	strh	r3, [r4, #0]
 8003836:	e10f      	b.n	8003a58 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d065      	beq.n	800391a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800384e:	687c      	ldr	r4, [r7, #4]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	785b      	ldrb	r3, [r3, #1]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d148      	bne.n	80038ea <USB_EPStartXfer+0x12e>
 8003858:	687c      	ldr	r4, [r7, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003860:	b29b      	uxth	r3, r3
 8003862:	441c      	add	r4, r3
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	4423      	add	r3, r4
 800386c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003870:	461c      	mov	r4, r3
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10e      	bne.n	8003896 <USB_EPStartXfer+0xda>
 8003878:	8823      	ldrh	r3, [r4, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003880:	b29b      	uxth	r3, r3
 8003882:	8023      	strh	r3, [r4, #0]
 8003884:	8823      	ldrh	r3, [r4, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800388c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003890:	b29b      	uxth	r3, r3
 8003892:	8023      	strh	r3, [r4, #0]
 8003894:	e03d      	b.n	8003912 <USB_EPStartXfer+0x156>
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	2b3e      	cmp	r3, #62	; 0x3e
 800389a:	d810      	bhi.n	80038be <USB_EPStartXfer+0x102>
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	085b      	lsrs	r3, r3, #1
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <USB_EPStartXfer+0xf6>
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	3301      	adds	r3, #1
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	029b      	lsls	r3, r3, #10
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	8023      	strh	r3, [r4, #0]
 80038bc:	e029      	b.n	8003912 <USB_EPStartXfer+0x156>
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
 80038c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c6:	f003 031f 	and.w	r3, r3, #31
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d102      	bne.n	80038d4 <USB_EPStartXfer+0x118>
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	3b01      	subs	r3, #1
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	029b      	lsls	r3, r3, #10
 80038da:	b29b      	uxth	r3, r3
 80038dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	8023      	strh	r3, [r4, #0]
 80038e8:	e013      	b.n	8003912 <USB_EPStartXfer+0x156>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	785b      	ldrb	r3, [r3, #1]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d10f      	bne.n	8003912 <USB_EPStartXfer+0x156>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	441c      	add	r4, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	4423      	add	r3, r4
 8003904:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	895b      	ldrh	r3, [r3, #10]
 8003916:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003918:	e063      	b.n	80039e2 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	785b      	ldrb	r3, [r3, #1]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d148      	bne.n	80039b4 <USB_EPStartXfer+0x1f8>
 8003922:	687c      	ldr	r4, [r7, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800392a:	b29b      	uxth	r3, r3
 800392c:	441c      	add	r4, r3
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	4423      	add	r3, r4
 8003936:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800393a:	461c      	mov	r4, r3
 800393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10e      	bne.n	8003960 <USB_EPStartXfer+0x1a4>
 8003942:	8823      	ldrh	r3, [r4, #0]
 8003944:	b29b      	uxth	r3, r3
 8003946:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800394a:	b29b      	uxth	r3, r3
 800394c:	8023      	strh	r3, [r4, #0]
 800394e:	8823      	ldrh	r3, [r4, #0]
 8003950:	b29b      	uxth	r3, r3
 8003952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800395a:	b29b      	uxth	r3, r3
 800395c:	8023      	strh	r3, [r4, #0]
 800395e:	e03d      	b.n	80039dc <USB_EPStartXfer+0x220>
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	2b3e      	cmp	r3, #62	; 0x3e
 8003964:	d810      	bhi.n	8003988 <USB_EPStartXfer+0x1cc>
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	623b      	str	r3, [r7, #32]
 800396c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <USB_EPStartXfer+0x1c0>
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	3301      	adds	r3, #1
 800397a:	623b      	str	r3, [r7, #32]
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	b29b      	uxth	r3, r3
 8003980:	029b      	lsls	r3, r3, #10
 8003982:	b29b      	uxth	r3, r3
 8003984:	8023      	strh	r3, [r4, #0]
 8003986:	e029      	b.n	80039dc <USB_EPStartXfer+0x220>
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	623b      	str	r3, [r7, #32]
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	f003 031f 	and.w	r3, r3, #31
 8003994:	2b00      	cmp	r3, #0
 8003996:	d102      	bne.n	800399e <USB_EPStartXfer+0x1e2>
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	3b01      	subs	r3, #1
 800399c:	623b      	str	r3, [r7, #32]
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	029b      	lsls	r3, r3, #10
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	8023      	strh	r3, [r4, #0]
 80039b2:	e013      	b.n	80039dc <USB_EPStartXfer+0x220>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	785b      	ldrb	r3, [r3, #1]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d10f      	bne.n	80039dc <USB_EPStartXfer+0x220>
 80039bc:	687c      	ldr	r4, [r7, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	441c      	add	r4, r3
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	4423      	add	r3, r4
 80039d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039d4:	461c      	mov	r4, r3
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	b29b      	uxth	r3, r3
 80039da:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	891b      	ldrh	r3, [r3, #8]
 80039e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6959      	ldr	r1, [r3, #20]
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fab4 	bl	8003f5a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	785b      	ldrb	r3, [r3, #1]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d115      	bne.n	8003a26 <USB_EPStartXfer+0x26a>
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a10:	b29c      	uxth	r4, r3
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	441a      	add	r2, r3
 8003a1c:	4b9a      	ldr	r3, [pc, #616]	; (8003c88 <USB_EPStartXfer+0x4cc>)
 8003a1e:	4323      	orrs	r3, r4
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	8013      	strh	r3, [r2, #0]
 8003a24:	e018      	b.n	8003a58 <USB_EPStartXfer+0x29c>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	785b      	ldrb	r3, [r3, #1]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d114      	bne.n	8003a58 <USB_EPStartXfer+0x29c>
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a44:	b29c      	uxth	r4, r3
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	441a      	add	r2, r3
 8003a50:	4b8e      	ldr	r3, [pc, #568]	; (8003c8c <USB_EPStartXfer+0x4d0>)
 8003a52:	4323      	orrs	r3, r4
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a6e:	b29c      	uxth	r4, r3
 8003a70:	f084 0310 	eor.w	r3, r4, #16
 8003a74:	b29c      	uxth	r4, r3
 8003a76:	f084 0320 	eor.w	r3, r4, #32
 8003a7a:	b29c      	uxth	r4, r3
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	441a      	add	r2, r3
 8003a86:	4b82      	ldr	r3, [pc, #520]	; (8003c90 <USB_EPStartXfer+0x4d4>)
 8003a88:	4323      	orrs	r3, r4
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	8013      	strh	r3, [r2, #0]
 8003a8e:	e146      	b.n	8003d1e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	699a      	ldr	r2, [r3, #24]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d909      	bls.n	8003ab0 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	1ad2      	subs	r2, r2, r3
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	619a      	str	r2, [r3, #24]
 8003aae:	e005      	b.n	8003abc <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	7b1b      	ldrb	r3, [r3, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d148      	bne.n	8003b56 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003ac4:	687c      	ldr	r4, [r7, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	441c      	add	r4, r3
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	4423      	add	r3, r4
 8003ad8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003adc:	461c      	mov	r4, r3
 8003ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10e      	bne.n	8003b02 <USB_EPStartXfer+0x346>
 8003ae4:	8823      	ldrh	r3, [r4, #0]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	8023      	strh	r3, [r4, #0]
 8003af0:	8823      	ldrh	r3, [r4, #0]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	8023      	strh	r3, [r4, #0]
 8003b00:	e0f2      	b.n	8003ce8 <USB_EPStartXfer+0x52c>
 8003b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b04:	2b3e      	cmp	r3, #62	; 0x3e
 8003b06:	d810      	bhi.n	8003b2a <USB_EPStartXfer+0x36e>
 8003b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0a:	085b      	lsrs	r3, r3, #1
 8003b0c:	61fb      	str	r3, [r7, #28]
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <USB_EPStartXfer+0x362>
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	029b      	lsls	r3, r3, #10
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	8023      	strh	r3, [r4, #0]
 8003b28:	e0de      	b.n	8003ce8 <USB_EPStartXfer+0x52c>
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	095b      	lsrs	r3, r3, #5
 8003b2e:	61fb      	str	r3, [r7, #28]
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d102      	bne.n	8003b40 <USB_EPStartXfer+0x384>
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	61fb      	str	r3, [r7, #28]
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	029b      	lsls	r3, r3, #10
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	8023      	strh	r3, [r4, #0]
 8003b54:	e0c8      	b.n	8003ce8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	785b      	ldrb	r3, [r3, #1]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d148      	bne.n	8003bf0 <USB_EPStartXfer+0x434>
 8003b5e:	687c      	ldr	r4, [r7, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	441c      	add	r4, r3
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	4423      	add	r3, r4
 8003b72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b76:	461c      	mov	r4, r3
 8003b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10e      	bne.n	8003b9c <USB_EPStartXfer+0x3e0>
 8003b7e:	8823      	ldrh	r3, [r4, #0]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	8023      	strh	r3, [r4, #0]
 8003b8a:	8823      	ldrh	r3, [r4, #0]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	8023      	strh	r3, [r4, #0]
 8003b9a:	e03d      	b.n	8003c18 <USB_EPStartXfer+0x45c>
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9e:	2b3e      	cmp	r3, #62	; 0x3e
 8003ba0:	d810      	bhi.n	8003bc4 <USB_EPStartXfer+0x408>
 8003ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba4:	085b      	lsrs	r3, r3, #1
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <USB_EPStartXfer+0x3fc>
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	61bb      	str	r3, [r7, #24]
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	029b      	lsls	r3, r3, #10
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	8023      	strh	r3, [r4, #0]
 8003bc2:	e029      	b.n	8003c18 <USB_EPStartXfer+0x45c>
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d102      	bne.n	8003bda <USB_EPStartXfer+0x41e>
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	029b      	lsls	r3, r3, #10
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	8023      	strh	r3, [r4, #0]
 8003bee:	e013      	b.n	8003c18 <USB_EPStartXfer+0x45c>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	785b      	ldrb	r3, [r3, #1]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d10f      	bne.n	8003c18 <USB_EPStartXfer+0x45c>
 8003bf8:	687c      	ldr	r4, [r7, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	441c      	add	r4, r3
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	4423      	add	r3, r4
 8003c0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c10:	461c      	mov	r4, r3
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	8023      	strh	r3, [r4, #0]
 8003c18:	687c      	ldr	r4, [r7, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	785b      	ldrb	r3, [r3, #1]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d14e      	bne.n	8003cc0 <USB_EPStartXfer+0x504>
 8003c22:	687c      	ldr	r4, [r7, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	441c      	add	r4, r3
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	4423      	add	r3, r4
 8003c36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c3a:	461c      	mov	r4, r3
 8003c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10e      	bne.n	8003c60 <USB_EPStartXfer+0x4a4>
 8003c42:	8823      	ldrh	r3, [r4, #0]
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	8023      	strh	r3, [r4, #0]
 8003c4e:	8823      	ldrh	r3, [r4, #0]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	8023      	strh	r3, [r4, #0]
 8003c5e:	e043      	b.n	8003ce8 <USB_EPStartXfer+0x52c>
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	2b3e      	cmp	r3, #62	; 0x3e
 8003c64:	d816      	bhi.n	8003c94 <USB_EPStartXfer+0x4d8>
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <USB_EPStartXfer+0x4c0>
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	029b      	lsls	r3, r3, #10
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	8023      	strh	r3, [r4, #0]
 8003c86:	e02f      	b.n	8003ce8 <USB_EPStartXfer+0x52c>
 8003c88:	ffff80c0 	.word	0xffff80c0
 8003c8c:	ffffc080 	.word	0xffffc080
 8003c90:	ffff8080 	.word	0xffff8080
 8003c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c96:	095b      	lsrs	r3, r3, #5
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d102      	bne.n	8003caa <USB_EPStartXfer+0x4ee>
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	029b      	lsls	r3, r3, #10
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	8023      	strh	r3, [r4, #0]
 8003cbe:	e013      	b.n	8003ce8 <USB_EPStartXfer+0x52c>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	785b      	ldrb	r3, [r3, #1]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d10f      	bne.n	8003ce8 <USB_EPStartXfer+0x52c>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	441c      	add	r4, r3
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	4423      	add	r3, r4
 8003cda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cfe:	b29c      	uxth	r4, r3
 8003d00:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003d04:	b29c      	uxth	r4, r3
 8003d06:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003d0a:	b29c      	uxth	r4, r3
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	441a      	add	r2, r3
 8003d16:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <USB_EPStartXfer+0x56c>)
 8003d18:	4323      	orrs	r3, r4
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3734      	adds	r7, #52	; 0x34
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd90      	pop	{r4, r7, pc}
 8003d28:	ffff8080 	.word	0xffff8080

08003d2c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d2c:	b490      	push	{r4, r7}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	785b      	ldrb	r3, [r3, #1]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d018      	beq.n	8003d70 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4413      	add	r3, r2
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d54:	b29c      	uxth	r4, r3
 8003d56:	f084 0310 	eor.w	r3, r4, #16
 8003d5a:	b29c      	uxth	r4, r3
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	441a      	add	r2, r3
 8003d66:	4b11      	ldr	r3, [pc, #68]	; (8003dac <USB_EPSetStall+0x80>)
 8003d68:	4323      	orrs	r3, r4
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	8013      	strh	r3, [r2, #0]
 8003d6e:	e017      	b.n	8003da0 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d86:	b29c      	uxth	r4, r3
 8003d88:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003d8c:	b29c      	uxth	r4, r3
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	441a      	add	r2, r3
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <USB_EPSetStall+0x80>)
 8003d9a:	4323      	orrs	r3, r4
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc90      	pop	{r4, r7}
 8003daa:	4770      	bx	lr
 8003dac:	ffff8080 	.word	0xffff8080

08003db0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003db0:	b490      	push	{r4, r7}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	7b1b      	ldrb	r3, [r3, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d17d      	bne.n	8003ebe <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	785b      	ldrb	r3, [r3, #1]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d03d      	beq.n	8003e46 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b29c      	uxth	r4, r3
 8003dd8:	4623      	mov	r3, r4
 8003dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d014      	beq.n	8003e0c <USB_EPClearStall+0x5c>
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df8:	b29c      	uxth	r4, r3
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	441a      	add	r2, r3
 8003e04:	4b31      	ldr	r3, [pc, #196]	; (8003ecc <USB_EPClearStall+0x11c>)
 8003e06:	4323      	orrs	r3, r4
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	78db      	ldrb	r3, [r3, #3]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d054      	beq.n	8003ebe <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e2a:	b29c      	uxth	r4, r3
 8003e2c:	f084 0320 	eor.w	r3, r4, #32
 8003e30:	b29c      	uxth	r4, r3
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	441a      	add	r2, r3
 8003e3c:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <USB_EPClearStall+0x120>)
 8003e3e:	4323      	orrs	r3, r4
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	8013      	strh	r3, [r2, #0]
 8003e44:	e03b      	b.n	8003ebe <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	b29c      	uxth	r4, r3
 8003e54:	4623      	mov	r3, r4
 8003e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d014      	beq.n	8003e88 <USB_EPClearStall+0xd8>
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e74:	b29c      	uxth	r4, r3
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	441a      	add	r2, r3
 8003e80:	4b14      	ldr	r3, [pc, #80]	; (8003ed4 <USB_EPClearStall+0x124>)
 8003e82:	4323      	orrs	r3, r4
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9e:	b29c      	uxth	r4, r3
 8003ea0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003ea4:	b29c      	uxth	r4, r3
 8003ea6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003eaa:	b29c      	uxth	r4, r3
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	441a      	add	r2, r3
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <USB_EPClearStall+0x120>)
 8003eb8:	4323      	orrs	r3, r4
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc90      	pop	{r4, r7}
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	ffff80c0 	.word	0xffff80c0
 8003ed0:	ffff8080 	.word	0xffff8080
 8003ed4:	ffffc080 	.word	0xffffc080

08003ed8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d103      	bne.n	8003ef2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2280      	movs	r2, #128	; 0x80
 8003eee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr

08003efe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr

08003f26 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b085      	sub	sp, #20
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003f38:	68fb      	ldr	r3, [r7, #12]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr

08003f5a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b08d      	sub	sp, #52	; 0x34
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	4611      	mov	r1, r2
 8003f66:	461a      	mov	r2, r3
 8003f68:	460b      	mov	r3, r1
 8003f6a:	80fb      	strh	r3, [r7, #6]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003f70:	88bb      	ldrh	r3, [r7, #4]
 8003f72:	3301      	adds	r3, #1
 8003f74:	085b      	lsrs	r3, r3, #1
 8003f76:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	005a      	lsls	r2, r3, #1
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f8c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f92:	e01e      	b.n	8003fd2 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	3302      	adds	r3, #2
 8003fc4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	3301      	adds	r3, #1
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1dd      	bne.n	8003f94 <USB_WritePMA+0x3a>
  }
}
 8003fd8:	bf00      	nop
 8003fda:	3734      	adds	r7, #52	; 0x34
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr

08003fe2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b08b      	sub	sp, #44	; 0x2c
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	4611      	mov	r1, r2
 8003fee:	461a      	mov	r2, r3
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	80fb      	strh	r3, [r7, #6]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003ff8:	88bb      	ldrh	r3, [r7, #4]
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004008:	88fb      	ldrh	r3, [r7, #6]
 800400a:	005a      	lsls	r2, r3, #1
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004014:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
 800401a:	e01b      	b.n	8004054 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29b      	uxth	r3, r3
 8004022:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	3302      	adds	r3, #2
 8004028:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	b2da      	uxtb	r2, r3
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	3301      	adds	r3, #1
 8004036:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	0a1b      	lsrs	r3, r3, #8
 800403c:	b2da      	uxtb	r2, r3
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	3301      	adds	r3, #1
 8004046:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	3302      	adds	r3, #2
 800404c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	3b01      	subs	r3, #1
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e0      	bne.n	800401c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800405a:	88bb      	ldrh	r3, [r7, #4]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d007      	beq.n	8004076 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	b29b      	uxth	r3, r3
 800406c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	b2da      	uxtb	r2, r3
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	701a      	strb	r2, [r3, #0]
  }
}
 8004076:	bf00      	nop
 8004078:	372c      	adds	r7, #44	; 0x2c
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr

08004080 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	7c1b      	ldrb	r3, [r3, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d115      	bne.n	80040c4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800409c:	2202      	movs	r2, #2
 800409e:	2181      	movs	r1, #129	; 0x81
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f001 fe16 	bl	8005cd2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80040ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040b0:	2202      	movs	r2, #2
 80040b2:	2101      	movs	r1, #1
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f001 fe0c 	bl	8005cd2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80040c2:	e012      	b.n	80040ea <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80040c4:	2340      	movs	r3, #64	; 0x40
 80040c6:	2202      	movs	r2, #2
 80040c8:	2181      	movs	r1, #129	; 0x81
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f001 fe01 	bl	8005cd2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80040d6:	2340      	movs	r3, #64	; 0x40
 80040d8:	2202      	movs	r2, #2
 80040da:	2101      	movs	r1, #1
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f001 fdf8 	bl	8005cd2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80040ea:	2308      	movs	r3, #8
 80040ec:	2203      	movs	r2, #3
 80040ee:	2182      	movs	r1, #130	; 0x82
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f001 fdee 	bl	8005cd2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80040fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004100:	f001 ff08 	bl	8005f14 <USBD_static_malloc>
 8004104:	4602      	mov	r2, r0
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d102      	bne.n	800411c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
 800411a:	e026      	b.n	800416a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004122:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2200      	movs	r2, #0
 8004132:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2200      	movs	r2, #0
 800413a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	7c1b      	ldrb	r3, [r3, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d109      	bne.n	800415a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800414c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004150:	2101      	movs	r1, #1
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f001 fea7 	bl	8005ea6 <USBD_LL_PrepareReceive>
 8004158:	e007      	b.n	800416a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004160:	2340      	movs	r3, #64	; 0x40
 8004162:	2101      	movs	r1, #1
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f001 fe9e 	bl	8005ea6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800416a:	7bfb      	ldrb	r3, [r7, #15]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004184:	2181      	movs	r1, #129	; 0x81
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f001 fdc9 	bl	8005d1e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004192:	2101      	movs	r1, #1
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f001 fdc2 	bl	8005d1e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80041a2:	2182      	movs	r1, #130	; 0x82
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f001 fdba 	bl	8005d1e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00e      	beq.n	80041d8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80041ca:	4618      	mov	r0, r3
 80041cc:	f001 feae 	bl	8005f2c <USBD_static_free>
    pdev->pClassData = NULL;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b086      	sub	sp, #24
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80041f2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004208:	2b00      	cmp	r3, #0
 800420a:	d039      	beq.n	8004280 <USBD_CDC_Setup+0x9e>
 800420c:	2b20      	cmp	r3, #32
 800420e:	d17c      	bne.n	800430a <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	88db      	ldrh	r3, [r3, #6]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d029      	beq.n	800426c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	b25b      	sxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	da11      	bge.n	8004246 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800422e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	88d2      	ldrh	r2, [r2, #6]
 8004234:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004236:	6939      	ldr	r1, [r7, #16]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	88db      	ldrh	r3, [r3, #6]
 800423c:	461a      	mov	r2, r3
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f001 f9c6 	bl	80055d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004244:	e068      	b.n	8004318 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	785a      	ldrb	r2, [r3, #1]
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	88db      	ldrh	r3, [r3, #6]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800425c:	6939      	ldr	r1, [r7, #16]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	88db      	ldrh	r3, [r3, #6]
 8004262:	461a      	mov	r2, r3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f001 f9e1 	bl	800562c <USBD_CtlPrepareRx>
      break;
 800426a:	e055      	b.n	8004318 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	7850      	ldrb	r0, [r2, #1]
 8004278:	2200      	movs	r2, #0
 800427a:	6839      	ldr	r1, [r7, #0]
 800427c:	4798      	blx	r3
      break;
 800427e:	e04b      	b.n	8004318 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	2b0a      	cmp	r3, #10
 8004286:	d017      	beq.n	80042b8 <USBD_CDC_Setup+0xd6>
 8004288:	2b0b      	cmp	r3, #11
 800428a:	d029      	beq.n	80042e0 <USBD_CDC_Setup+0xfe>
 800428c:	2b00      	cmp	r3, #0
 800428e:	d133      	bne.n	80042f8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004296:	2b03      	cmp	r3, #3
 8004298:	d107      	bne.n	80042aa <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800429a:	f107 030c 	add.w	r3, r7, #12
 800429e:	2202      	movs	r2, #2
 80042a0:	4619      	mov	r1, r3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f001 f994 	bl	80055d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80042a8:	e02e      	b.n	8004308 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80042aa:	6839      	ldr	r1, [r7, #0]
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f001 f925 	bl	80054fc <USBD_CtlError>
            ret = USBD_FAIL;
 80042b2:	2302      	movs	r3, #2
 80042b4:	75fb      	strb	r3, [r7, #23]
          break;
 80042b6:	e027      	b.n	8004308 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d107      	bne.n	80042d2 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80042c2:	f107 030f 	add.w	r3, r7, #15
 80042c6:	2201      	movs	r2, #1
 80042c8:	4619      	mov	r1, r3
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f001 f980 	bl	80055d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80042d0:	e01a      	b.n	8004308 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80042d2:	6839      	ldr	r1, [r7, #0]
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f001 f911 	bl	80054fc <USBD_CtlError>
            ret = USBD_FAIL;
 80042da:	2302      	movs	r3, #2
 80042dc:	75fb      	strb	r3, [r7, #23]
          break;
 80042de:	e013      	b.n	8004308 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d00d      	beq.n	8004306 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80042ea:	6839      	ldr	r1, [r7, #0]
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f001 f905 	bl	80054fc <USBD_CtlError>
            ret = USBD_FAIL;
 80042f2:	2302      	movs	r3, #2
 80042f4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80042f6:	e006      	b.n	8004306 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80042f8:	6839      	ldr	r1, [r7, #0]
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f001 f8fe 	bl	80054fc <USBD_CtlError>
          ret = USBD_FAIL;
 8004300:	2302      	movs	r3, #2
 8004302:	75fb      	strb	r3, [r7, #23]
          break;
 8004304:	e000      	b.n	8004308 <USBD_CDC_Setup+0x126>
          break;
 8004306:	bf00      	nop
      }
      break;
 8004308:	e006      	b.n	8004318 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800430a:	6839      	ldr	r1, [r7, #0]
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f001 f8f5 	bl	80054fc <USBD_CtlError>
      ret = USBD_FAIL;
 8004312:	2302      	movs	r3, #2
 8004314:	75fb      	strb	r3, [r7, #23]
      break;
 8004316:	bf00      	nop
  }

  return ret;
 8004318:	7dfb      	ldrb	r3, [r7, #23]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	460b      	mov	r3, r1
 800432c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004334:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800433c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004344:	2b00      	cmp	r3, #0
 8004346:	d037      	beq.n	80043b8 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004348:	78fa      	ldrb	r2, [r7, #3]
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	331c      	adds	r3, #28
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d026      	beq.n	80043ac <USBD_CDC_DataIn+0x8a>
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	331c      	adds	r3, #28
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	78fa      	ldrb	r2, [r7, #3]
 8004372:	68b9      	ldr	r1, [r7, #8]
 8004374:	0152      	lsls	r2, r2, #5
 8004376:	440a      	add	r2, r1
 8004378:	3238      	adds	r2, #56	; 0x38
 800437a:	6812      	ldr	r2, [r2, #0]
 800437c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004380:	fb02 f201 	mul.w	r2, r2, r1
 8004384:	1a9b      	subs	r3, r3, r2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d110      	bne.n	80043ac <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800438a:	78fa      	ldrb	r2, [r7, #3]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	331c      	adds	r3, #28
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800439e:	78f9      	ldrb	r1, [r7, #3]
 80043a0:	2300      	movs	r3, #0
 80043a2:	2200      	movs	r2, #0
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f001 fd5b 	bl	8005e60 <USBD_LL_Transmit>
 80043aa:	e003      	b.n	80043b4 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	e000      	b.n	80043ba <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80043b8:	2302      	movs	r3, #2
  }
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b084      	sub	sp, #16
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	460b      	mov	r3, r1
 80043cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	4619      	mov	r1, r3
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f001 fd86 	bl	8005eec <USBD_LL_GetRxDataSize>
 80043e0:	4602      	mov	r2, r0
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00d      	beq.n	800440e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004406:	4611      	mov	r1, r2
 8004408:	4798      	blx	r3

    return USBD_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	e000      	b.n	8004410 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800440e:	2302      	movs	r3, #2
  }
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004426:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800442e:	2b00      	cmp	r3, #0
 8004430:	d015      	beq.n	800445e <USBD_CDC_EP0_RxReady+0x46>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004438:	2bff      	cmp	r3, #255	; 0xff
 800443a:	d010      	beq.n	800445e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800444a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004452:	b292      	uxth	r2, r2
 8004454:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	22ff      	movs	r2, #255	; 0xff
 800445a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2243      	movs	r2, #67	; 0x43
 8004474:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004476:	4b03      	ldr	r3, [pc, #12]	; (8004484 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000094 	.word	0x20000094

08004488 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2243      	movs	r2, #67	; 0x43
 8004494:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004496:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004498:	4618      	mov	r0, r3
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000050 	.word	0x20000050

080044a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2243      	movs	r2, #67	; 0x43
 80044b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80044b6:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	200000d8 	.word	0x200000d8

080044c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	220a      	movs	r2, #10
 80044d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80044d6:	4b03      	ldr	r3, [pc, #12]	; (80044e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	2000000c 	.word	0x2000000c

080044e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80044f2:	2302      	movs	r3, #2
 80044f4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004508:	7bfb      	ldrb	r3, [r7, #15]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr

08004514 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	4613      	mov	r3, r2
 8004520:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004528:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004532:	88fa      	ldrh	r2, [r7, #6]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr

08004546 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004546:	b480      	push	{r7}
 8004548:	b085      	sub	sp, #20
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004556:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr

0800456c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800457a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d017      	beq.n	80045b6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	7c1b      	ldrb	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004598:	2101      	movs	r1, #1
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f001 fc83 	bl	8005ea6 <USBD_LL_PrepareReceive>
 80045a0:	e007      	b.n	80045b2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045a8:	2340      	movs	r3, #64	; 0x40
 80045aa:	2101      	movs	r1, #1
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f001 fc7a 	bl	8005ea6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e000      	b.n	80045b8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80045b6:	2302      	movs	r3, #2
  }
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	4613      	mov	r3, r2
 80045cc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80045d4:	2302      	movs	r3, #2
 80045d6:	e01a      	b.n	800460e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	79fa      	ldrb	r2, [r7, #7]
 8004604:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f001 faee 	bl	8005be8 <USBD_LL_Init>

  return USBD_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004616:	b480      	push	{r7}
 8004618:	b085      	sub	sp, #20
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d006      	beq.n	8004638 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	73fb      	strb	r3, [r7, #15]
 8004636:	e001      	b.n	800463c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004638:	2302      	movs	r3, #2
 800463a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800463c:	7bfb      	ldrb	r3, [r7, #15]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr

08004648 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f001 fb23 	bl	8005c9c <USBD_LL_Start>

  return USBD_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr

08004674 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004680:	2302      	movs	r3, #2
 8004682:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00c      	beq.n	80046a8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	78fa      	ldrb	r2, [r7, #3]
 8004698:	4611      	mov	r1, r2
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	4798      	blx	r3
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b082      	sub	sp, #8
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	460b      	mov	r3, r1
 80046bc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	4611      	mov	r1, r2
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	4798      	blx	r3

  return USBD_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80046e8:	6839      	ldr	r1, [r7, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 feca 	bl	8005484 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80046fe:	461a      	mov	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	2b01      	cmp	r3, #1
 8004712:	d00c      	beq.n	800472e <USBD_LL_SetupStage+0x56>
 8004714:	2b01      	cmp	r3, #1
 8004716:	d302      	bcc.n	800471e <USBD_LL_SetupStage+0x46>
 8004718:	2b02      	cmp	r3, #2
 800471a:	d010      	beq.n	800473e <USBD_LL_SetupStage+0x66>
 800471c:	e017      	b.n	800474e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004724:	4619      	mov	r1, r3
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f9ca 	bl	8004ac0 <USBD_StdDevReq>
      break;
 800472c:	e01a      	b.n	8004764 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004734:	4619      	mov	r1, r3
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fa2c 	bl	8004b94 <USBD_StdItfReq>
      break;
 800473c:	e012      	b.n	8004764 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004744:	4619      	mov	r1, r3
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fa6a 	bl	8004c20 <USBD_StdEPReq>
      break;
 800474c:	e00a      	b.n	8004764 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004754:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004758:	b2db      	uxtb	r3, r3
 800475a:	4619      	mov	r1, r3
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f001 fafd 	bl	8005d5c <USBD_LL_StallEP>
      break;
 8004762:	bf00      	nop
  }

  return USBD_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b086      	sub	sp, #24
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	460b      	mov	r3, r1
 8004778:	607a      	str	r2, [r7, #4]
 800477a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800477c:	7afb      	ldrb	r3, [r7, #11]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d14b      	bne.n	800481a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004788:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004790:	2b03      	cmp	r3, #3
 8004792:	d134      	bne.n	80047fe <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	68da      	ldr	r2, [r3, #12]
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	429a      	cmp	r2, r3
 800479e:	d919      	bls.n	80047d4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	1ad2      	subs	r2, r2, r3
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d203      	bcs.n	80047c2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80047be:	b29b      	uxth	r3, r3
 80047c0:	e002      	b.n	80047c8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 ff4b 	bl	8005668 <USBD_CtlContinueRx>
 80047d2:	e038      	b.n	8004846 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d105      	bne.n	80047f6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 ff48 	bl	800568c <USBD_CtlSendStatus>
 80047fc:	e023      	b.n	8004846 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004804:	2b05      	cmp	r3, #5
 8004806:	d11e      	bne.n	8004846 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004810:	2100      	movs	r1, #0
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f001 faa2 	bl	8005d5c <USBD_LL_StallEP>
 8004818:	e015      	b.n	8004846 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00d      	beq.n	8004842 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800482c:	2b03      	cmp	r3, #3
 800482e:	d108      	bne.n	8004842 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	7afa      	ldrb	r2, [r7, #11]
 800483a:	4611      	mov	r1, r2
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	4798      	blx	r3
 8004840:	e001      	b.n	8004846 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004842:	2302      	movs	r3, #2
 8004844:	e000      	b.n	8004848 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	460b      	mov	r3, r1
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800485e:	7afb      	ldrb	r3, [r7, #11]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d17f      	bne.n	8004964 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3314      	adds	r3, #20
 8004868:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004870:	2b02      	cmp	r3, #2
 8004872:	d15c      	bne.n	800492e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	429a      	cmp	r2, r3
 800487e:	d915      	bls.n	80048ac <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	1ad2      	subs	r2, r2, r3
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	b29b      	uxth	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 feb5 	bl	8005608 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800489e:	2300      	movs	r3, #0
 80048a0:	2200      	movs	r2, #0
 80048a2:	2100      	movs	r1, #0
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f001 fafe 	bl	8005ea6 <USBD_LL_PrepareReceive>
 80048aa:	e04e      	b.n	800494a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	6912      	ldr	r2, [r2, #16]
 80048b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80048b8:	fb02 f201 	mul.w	r2, r2, r1
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d11c      	bne.n	80048fc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d316      	bcc.n	80048fc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80048d8:	429a      	cmp	r2, r3
 80048da:	d20f      	bcs.n	80048fc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80048dc:	2200      	movs	r2, #0
 80048de:	2100      	movs	r1, #0
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 fe91 	bl	8005608 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80048ee:	2300      	movs	r3, #0
 80048f0:	2200      	movs	r2, #0
 80048f2:	2100      	movs	r1, #0
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f001 fad6 	bl	8005ea6 <USBD_LL_PrepareReceive>
 80048fa:	e026      	b.n	800494a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800490e:	2b03      	cmp	r3, #3
 8004910:	d105      	bne.n	800491e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800491e:	2180      	movs	r1, #128	; 0x80
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f001 fa1b 	bl	8005d5c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 fec3 	bl	80056b2 <USBD_CtlReceiveStatus>
 800492c:	e00d      	b.n	800494a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004934:	2b04      	cmp	r3, #4
 8004936:	d004      	beq.n	8004942 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800493e:	2b00      	cmp	r3, #0
 8004940:	d103      	bne.n	800494a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004942:	2180      	movs	r1, #128	; 0x80
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f001 fa09 	bl	8005d5c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004950:	2b01      	cmp	r3, #1
 8004952:	d11d      	bne.n	8004990 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f7ff fe83 	bl	8004660 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004962:	e015      	b.n	8004990 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00d      	beq.n	800498c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004976:	2b03      	cmp	r3, #3
 8004978:	d108      	bne.n	800498c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	7afa      	ldrb	r2, [r7, #11]
 8004984:	4611      	mov	r1, r2
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	4798      	blx	r3
 800498a:	e001      	b.n	8004990 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800498c:	2302      	movs	r3, #2
 800498e:	e000      	b.n	8004992 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80049a2:	2340      	movs	r3, #64	; 0x40
 80049a4:	2200      	movs	r2, #0
 80049a6:	2100      	movs	r1, #0
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f001 f992 	bl	8005cd2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2240      	movs	r2, #64	; 0x40
 80049ba:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80049be:	2340      	movs	r3, #64	; 0x40
 80049c0:	2200      	movs	r2, #0
 80049c2:	2180      	movs	r1, #128	; 0x80
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f001 f984 	bl	8005cd2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2240      	movs	r2, #64	; 0x40
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6852      	ldr	r2, [r2, #4]
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	4798      	blx	r3
  }

  return USBD_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	78fa      	ldrb	r2, [r7, #3]
 8004a2c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bc80      	pop	{r7}
 8004a38:	4770      	bx	lr

08004a3a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2204      	movs	r2, #4
 8004a52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr

08004a62 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d105      	bne.n	8004a80 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr

08004a8c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d10b      	bne.n	8004ab6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d005      	beq.n	8004ab6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	d004      	beq.n	8004ae4 <USBD_StdDevReq+0x24>
 8004ada:	2b40      	cmp	r3, #64	; 0x40
 8004adc:	d002      	beq.n	8004ae4 <USBD_StdDevReq+0x24>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d008      	beq.n	8004af4 <USBD_StdDevReq+0x34>
 8004ae2:	e04c      	b.n	8004b7e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	6839      	ldr	r1, [r7, #0]
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	4798      	blx	r3
      break;
 8004af2:	e049      	b.n	8004b88 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	785b      	ldrb	r3, [r3, #1]
 8004af8:	2b09      	cmp	r3, #9
 8004afa:	d83a      	bhi.n	8004b72 <USBD_StdDevReq+0xb2>
 8004afc:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <USBD_StdDevReq+0x44>)
 8004afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b02:	bf00      	nop
 8004b04:	08004b55 	.word	0x08004b55
 8004b08:	08004b69 	.word	0x08004b69
 8004b0c:	08004b73 	.word	0x08004b73
 8004b10:	08004b5f 	.word	0x08004b5f
 8004b14:	08004b73 	.word	0x08004b73
 8004b18:	08004b37 	.word	0x08004b37
 8004b1c:	08004b2d 	.word	0x08004b2d
 8004b20:	08004b73 	.word	0x08004b73
 8004b24:	08004b4b 	.word	0x08004b4b
 8004b28:	08004b41 	.word	0x08004b41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004b2c:	6839      	ldr	r1, [r7, #0]
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f9d4 	bl	8004edc <USBD_GetDescriptor>
          break;
 8004b34:	e022      	b.n	8004b7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004b36:	6839      	ldr	r1, [r7, #0]
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fb37 	bl	80051ac <USBD_SetAddress>
          break;
 8004b3e:	e01d      	b.n	8004b7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004b40:	6839      	ldr	r1, [r7, #0]
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fb74 	bl	8005230 <USBD_SetConfig>
          break;
 8004b48:	e018      	b.n	8004b7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004b4a:	6839      	ldr	r1, [r7, #0]
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fbfd 	bl	800534c <USBD_GetConfig>
          break;
 8004b52:	e013      	b.n	8004b7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004b54:	6839      	ldr	r1, [r7, #0]
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fc2c 	bl	80053b4 <USBD_GetStatus>
          break;
 8004b5c:	e00e      	b.n	8004b7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004b5e:	6839      	ldr	r1, [r7, #0]
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fc5a 	bl	800541a <USBD_SetFeature>
          break;
 8004b66:	e009      	b.n	8004b7c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004b68:	6839      	ldr	r1, [r7, #0]
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fc69 	bl	8005442 <USBD_ClrFeature>
          break;
 8004b70:	e004      	b.n	8004b7c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004b72:	6839      	ldr	r1, [r7, #0]
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fcc1 	bl	80054fc <USBD_CtlError>
          break;
 8004b7a:	bf00      	nop
      }
      break;
 8004b7c:	e004      	b.n	8004b88 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8004b7e:	6839      	ldr	r1, [r7, #0]
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fcbb 	bl	80054fc <USBD_CtlError>
      break;
 8004b86:	bf00      	nop
  }

  return ret;
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop

08004b94 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	d003      	beq.n	8004bb6 <USBD_StdItfReq+0x22>
 8004bae:	2b40      	cmp	r3, #64	; 0x40
 8004bb0:	d001      	beq.n	8004bb6 <USBD_StdItfReq+0x22>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d12a      	bne.n	8004c0c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d81d      	bhi.n	8004bfe <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	889b      	ldrh	r3, [r3, #4]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d813      	bhi.n	8004bf4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	6839      	ldr	r1, [r7, #0]
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	4798      	blx	r3
 8004bda:	4603      	mov	r3, r0
 8004bdc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	88db      	ldrh	r3, [r3, #6]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d110      	bne.n	8004c08 <USBD_StdItfReq+0x74>
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10d      	bne.n	8004c08 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fd4d 	bl	800568c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004bf2:	e009      	b.n	8004c08 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004bf4:	6839      	ldr	r1, [r7, #0]
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fc80 	bl	80054fc <USBD_CtlError>
          break;
 8004bfc:	e004      	b.n	8004c08 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8004bfe:	6839      	ldr	r1, [r7, #0]
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fc7b 	bl	80054fc <USBD_CtlError>
          break;
 8004c06:	e000      	b.n	8004c0a <USBD_StdItfReq+0x76>
          break;
 8004c08:	bf00      	nop
      }
      break;
 8004c0a:	e004      	b.n	8004c16 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004c0c:	6839      	ldr	r1, [r7, #0]
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fc74 	bl	80054fc <USBD_CtlError>
      break;
 8004c14:	bf00      	nop
  }

  return USBD_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	889b      	ldrh	r3, [r3, #4]
 8004c32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d004      	beq.n	8004c4a <USBD_StdEPReq+0x2a>
 8004c40:	2b40      	cmp	r3, #64	; 0x40
 8004c42:	d002      	beq.n	8004c4a <USBD_StdEPReq+0x2a>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d008      	beq.n	8004c5a <USBD_StdEPReq+0x3a>
 8004c48:	e13d      	b.n	8004ec6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	6839      	ldr	r1, [r7, #0]
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	4798      	blx	r3
      break;
 8004c58:	e13a      	b.n	8004ed0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d10a      	bne.n	8004c7c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	6839      	ldr	r1, [r7, #0]
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	4798      	blx	r3
 8004c74:	4603      	mov	r3, r0
 8004c76:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	e12a      	b.n	8004ed2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	785b      	ldrb	r3, [r3, #1]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d03e      	beq.n	8004d02 <USBD_StdEPReq+0xe2>
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d002      	beq.n	8004c8e <USBD_StdEPReq+0x6e>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d070      	beq.n	8004d6e <USBD_StdEPReq+0x14e>
 8004c8c:	e115      	b.n	8004eba <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d002      	beq.n	8004c9e <USBD_StdEPReq+0x7e>
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d015      	beq.n	8004cc8 <USBD_StdEPReq+0xa8>
 8004c9c:	e02b      	b.n	8004cf6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c9e:	7bbb      	ldrb	r3, [r7, #14]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00c      	beq.n	8004cbe <USBD_StdEPReq+0x9e>
 8004ca4:	7bbb      	ldrb	r3, [r7, #14]
 8004ca6:	2b80      	cmp	r3, #128	; 0x80
 8004ca8:	d009      	beq.n	8004cbe <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004caa:	7bbb      	ldrb	r3, [r7, #14]
 8004cac:	4619      	mov	r1, r3
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f001 f854 	bl	8005d5c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004cb4:	2180      	movs	r1, #128	; 0x80
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f001 f850 	bl	8005d5c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004cbc:	e020      	b.n	8004d00 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8004cbe:	6839      	ldr	r1, [r7, #0]
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fc1b 	bl	80054fc <USBD_CtlError>
              break;
 8004cc6:	e01b      	b.n	8004d00 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	885b      	ldrh	r3, [r3, #2]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10e      	bne.n	8004cee <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004cd0:	7bbb      	ldrb	r3, [r7, #14]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00b      	beq.n	8004cee <USBD_StdEPReq+0xce>
 8004cd6:	7bbb      	ldrb	r3, [r7, #14]
 8004cd8:	2b80      	cmp	r3, #128	; 0x80
 8004cda:	d008      	beq.n	8004cee <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	88db      	ldrh	r3, [r3, #6]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d104      	bne.n	8004cee <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004ce4:	7bbb      	ldrb	r3, [r7, #14]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f001 f837 	bl	8005d5c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fccc 	bl	800568c <USBD_CtlSendStatus>

              break;
 8004cf4:	e004      	b.n	8004d00 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004cf6:	6839      	ldr	r1, [r7, #0]
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fbff 	bl	80054fc <USBD_CtlError>
              break;
 8004cfe:	bf00      	nop
          }
          break;
 8004d00:	e0e0      	b.n	8004ec4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d002      	beq.n	8004d12 <USBD_StdEPReq+0xf2>
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d015      	beq.n	8004d3c <USBD_StdEPReq+0x11c>
 8004d10:	e026      	b.n	8004d60 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004d12:	7bbb      	ldrb	r3, [r7, #14]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00c      	beq.n	8004d32 <USBD_StdEPReq+0x112>
 8004d18:	7bbb      	ldrb	r3, [r7, #14]
 8004d1a:	2b80      	cmp	r3, #128	; 0x80
 8004d1c:	d009      	beq.n	8004d32 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004d1e:	7bbb      	ldrb	r3, [r7, #14]
 8004d20:	4619      	mov	r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f001 f81a 	bl	8005d5c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004d28:	2180      	movs	r1, #128	; 0x80
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f001 f816 	bl	8005d5c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004d30:	e01c      	b.n	8004d6c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8004d32:	6839      	ldr	r1, [r7, #0]
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fbe1 	bl	80054fc <USBD_CtlError>
              break;
 8004d3a:	e017      	b.n	8004d6c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	885b      	ldrh	r3, [r3, #2]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d112      	bne.n	8004d6a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004d44:	7bbb      	ldrb	r3, [r7, #14]
 8004d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d004      	beq.n	8004d58 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004d4e:	7bbb      	ldrb	r3, [r7, #14]
 8004d50:	4619      	mov	r1, r3
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f001 f821 	bl	8005d9a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fc97 	bl	800568c <USBD_CtlSendStatus>
              }
              break;
 8004d5e:	e004      	b.n	8004d6a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8004d60:	6839      	ldr	r1, [r7, #0]
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fbca 	bl	80054fc <USBD_CtlError>
              break;
 8004d68:	e000      	b.n	8004d6c <USBD_StdEPReq+0x14c>
              break;
 8004d6a:	bf00      	nop
          }
          break;
 8004d6c:	e0aa      	b.n	8004ec4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d002      	beq.n	8004d7e <USBD_StdEPReq+0x15e>
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d032      	beq.n	8004de2 <USBD_StdEPReq+0x1c2>
 8004d7c:	e097      	b.n	8004eae <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004d7e:	7bbb      	ldrb	r3, [r7, #14]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d007      	beq.n	8004d94 <USBD_StdEPReq+0x174>
 8004d84:	7bbb      	ldrb	r3, [r7, #14]
 8004d86:	2b80      	cmp	r3, #128	; 0x80
 8004d88:	d004      	beq.n	8004d94 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8004d8a:	6839      	ldr	r1, [r7, #0]
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fbb5 	bl	80054fc <USBD_CtlError>
                break;
 8004d92:	e091      	b.n	8004eb8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	da0b      	bge.n	8004db4 <USBD_StdEPReq+0x194>
 8004d9c:	7bbb      	ldrb	r3, [r7, #14]
 8004d9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	3310      	adds	r3, #16
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	4413      	add	r3, r2
 8004db0:	3304      	adds	r3, #4
 8004db2:	e00b      	b.n	8004dcc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004db4:	7bbb      	ldrb	r3, [r7, #14]
 8004db6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	4413      	add	r3, r2
 8004dca:	3304      	adds	r3, #4
 8004dcc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	4619      	mov	r1, r3
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fbf8 	bl	80055d0 <USBD_CtlSendData>
              break;
 8004de0:	e06a      	b.n	8004eb8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004de2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	da11      	bge.n	8004e0e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004dea:	7bbb      	ldrb	r3, [r7, #14]
 8004dec:	f003 020f 	and.w	r2, r3, #15
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	3318      	adds	r3, #24
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d117      	bne.n	8004e34 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004e04:	6839      	ldr	r1, [r7, #0]
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fb78 	bl	80054fc <USBD_CtlError>
                  break;
 8004e0c:	e054      	b.n	8004eb8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004e0e:	7bbb      	ldrb	r3, [r7, #14]
 8004e10:	f003 020f 	and.w	r2, r3, #15
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	440b      	add	r3, r1
 8004e20:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d104      	bne.n	8004e34 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004e2a:	6839      	ldr	r1, [r7, #0]
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fb65 	bl	80054fc <USBD_CtlError>
                  break;
 8004e32:	e041      	b.n	8004eb8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	da0b      	bge.n	8004e54 <USBD_StdEPReq+0x234>
 8004e3c:	7bbb      	ldrb	r3, [r7, #14]
 8004e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	3310      	adds	r3, #16
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	4413      	add	r3, r2
 8004e50:	3304      	adds	r3, #4
 8004e52:	e00b      	b.n	8004e6c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004e54:	7bbb      	ldrb	r3, [r7, #14]
 8004e56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	4413      	add	r3, r2
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004e6e:	7bbb      	ldrb	r3, [r7, #14]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <USBD_StdEPReq+0x25a>
 8004e74:	7bbb      	ldrb	r3, [r7, #14]
 8004e76:	2b80      	cmp	r3, #128	; 0x80
 8004e78:	d103      	bne.n	8004e82 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	e00e      	b.n	8004ea0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004e82:	7bbb      	ldrb	r3, [r7, #14]
 8004e84:	4619      	mov	r1, r3
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 ffa6 	bl	8005dd8 <USBD_LL_IsStallEP>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2201      	movs	r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e002      	b.n	8004ea0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fb92 	bl	80055d0 <USBD_CtlSendData>
              break;
 8004eac:	e004      	b.n	8004eb8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004eae:	6839      	ldr	r1, [r7, #0]
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fb23 	bl	80054fc <USBD_CtlError>
              break;
 8004eb6:	bf00      	nop
          }
          break;
 8004eb8:	e004      	b.n	8004ec4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004eba:	6839      	ldr	r1, [r7, #0]
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fb1d 	bl	80054fc <USBD_CtlError>
          break;
 8004ec2:	bf00      	nop
      }
      break;
 8004ec4:	e004      	b.n	8004ed0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004ec6:	6839      	ldr	r1, [r7, #0]
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fb17 	bl	80054fc <USBD_CtlError>
      break;
 8004ece:	bf00      	nop
  }

  return ret;
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	885b      	ldrh	r3, [r3, #2]
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	3b01      	subs	r3, #1
 8004efc:	2b06      	cmp	r3, #6
 8004efe:	f200 8128 	bhi.w	8005152 <USBD_GetDescriptor+0x276>
 8004f02:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <USBD_GetDescriptor+0x2c>)
 8004f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f08:	08004f25 	.word	0x08004f25
 8004f0c:	08004f3d 	.word	0x08004f3d
 8004f10:	08004f7d 	.word	0x08004f7d
 8004f14:	08005153 	.word	0x08005153
 8004f18:	08005153 	.word	0x08005153
 8004f1c:	080050f3 	.word	0x080050f3
 8004f20:	0800511f 	.word	0x0800511f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	7c12      	ldrb	r2, [r2, #16]
 8004f30:	f107 0108 	add.w	r1, r7, #8
 8004f34:	4610      	mov	r0, r2
 8004f36:	4798      	blx	r3
 8004f38:	60f8      	str	r0, [r7, #12]
      break;
 8004f3a:	e112      	b.n	8005162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	7c1b      	ldrb	r3, [r3, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10d      	bne.n	8004f60 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	f107 0208 	add.w	r2, r7, #8
 8004f50:	4610      	mov	r0, r2
 8004f52:	4798      	blx	r3
 8004f54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004f5e:	e100      	b.n	8005162 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	f107 0208 	add.w	r2, r7, #8
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	4798      	blx	r3
 8004f70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	3301      	adds	r3, #1
 8004f76:	2202      	movs	r2, #2
 8004f78:	701a      	strb	r2, [r3, #0]
      break;
 8004f7a:	e0f2      	b.n	8005162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	885b      	ldrh	r3, [r3, #2]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b05      	cmp	r3, #5
 8004f84:	f200 80ac 	bhi.w	80050e0 <USBD_GetDescriptor+0x204>
 8004f88:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <USBD_GetDescriptor+0xb4>)
 8004f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8e:	bf00      	nop
 8004f90:	08004fa9 	.word	0x08004fa9
 8004f94:	08004fdd 	.word	0x08004fdd
 8004f98:	08005011 	.word	0x08005011
 8004f9c:	08005045 	.word	0x08005045
 8004fa0:	08005079 	.word	0x08005079
 8004fa4:	080050ad 	.word	0x080050ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00b      	beq.n	8004fcc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	7c12      	ldrb	r2, [r2, #16]
 8004fc0:	f107 0108 	add.w	r1, r7, #8
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4798      	blx	r3
 8004fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004fca:	e091      	b.n	80050f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004fcc:	6839      	ldr	r1, [r7, #0]
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 fa94 	bl	80054fc <USBD_CtlError>
            err++;
 8004fd4:	7afb      	ldrb	r3, [r7, #11]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8004fda:	e089      	b.n	80050f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00b      	beq.n	8005000 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	7c12      	ldrb	r2, [r2, #16]
 8004ff4:	f107 0108 	add.w	r1, r7, #8
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4798      	blx	r3
 8004ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004ffe:	e077      	b.n	80050f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005000:	6839      	ldr	r1, [r7, #0]
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fa7a 	bl	80054fc <USBD_CtlError>
            err++;
 8005008:	7afb      	ldrb	r3, [r7, #11]
 800500a:	3301      	adds	r3, #1
 800500c:	72fb      	strb	r3, [r7, #11]
          break;
 800500e:	e06f      	b.n	80050f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00b      	beq.n	8005034 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	7c12      	ldrb	r2, [r2, #16]
 8005028:	f107 0108 	add.w	r1, r7, #8
 800502c:	4610      	mov	r0, r2
 800502e:	4798      	blx	r3
 8005030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005032:	e05d      	b.n	80050f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005034:	6839      	ldr	r1, [r7, #0]
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fa60 	bl	80054fc <USBD_CtlError>
            err++;
 800503c:	7afb      	ldrb	r3, [r7, #11]
 800503e:	3301      	adds	r3, #1
 8005040:	72fb      	strb	r3, [r7, #11]
          break;
 8005042:	e055      	b.n	80050f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00b      	beq.n	8005068 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	7c12      	ldrb	r2, [r2, #16]
 800505c:	f107 0108 	add.w	r1, r7, #8
 8005060:	4610      	mov	r0, r2
 8005062:	4798      	blx	r3
 8005064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005066:	e043      	b.n	80050f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005068:	6839      	ldr	r1, [r7, #0]
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fa46 	bl	80054fc <USBD_CtlError>
            err++;
 8005070:	7afb      	ldrb	r3, [r7, #11]
 8005072:	3301      	adds	r3, #1
 8005074:	72fb      	strb	r3, [r7, #11]
          break;
 8005076:	e03b      	b.n	80050f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00b      	beq.n	800509c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	7c12      	ldrb	r2, [r2, #16]
 8005090:	f107 0108 	add.w	r1, r7, #8
 8005094:	4610      	mov	r0, r2
 8005096:	4798      	blx	r3
 8005098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800509a:	e029      	b.n	80050f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800509c:	6839      	ldr	r1, [r7, #0]
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa2c 	bl	80054fc <USBD_CtlError>
            err++;
 80050a4:	7afb      	ldrb	r3, [r7, #11]
 80050a6:	3301      	adds	r3, #1
 80050a8:	72fb      	strb	r3, [r7, #11]
          break;
 80050aa:	e021      	b.n	80050f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00b      	beq.n	80050d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	7c12      	ldrb	r2, [r2, #16]
 80050c4:	f107 0108 	add.w	r1, r7, #8
 80050c8:	4610      	mov	r0, r2
 80050ca:	4798      	blx	r3
 80050cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80050ce:	e00f      	b.n	80050f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80050d0:	6839      	ldr	r1, [r7, #0]
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fa12 	bl	80054fc <USBD_CtlError>
            err++;
 80050d8:	7afb      	ldrb	r3, [r7, #11]
 80050da:	3301      	adds	r3, #1
 80050dc:	72fb      	strb	r3, [r7, #11]
          break;
 80050de:	e007      	b.n	80050f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80050e0:	6839      	ldr	r1, [r7, #0]
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fa0a 	bl	80054fc <USBD_CtlError>
          err++;
 80050e8:	7afb      	ldrb	r3, [r7, #11]
 80050ea:	3301      	adds	r3, #1
 80050ec:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80050ee:	e038      	b.n	8005162 <USBD_GetDescriptor+0x286>
 80050f0:	e037      	b.n	8005162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	7c1b      	ldrb	r3, [r3, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d109      	bne.n	800510e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005102:	f107 0208 	add.w	r2, r7, #8
 8005106:	4610      	mov	r0, r2
 8005108:	4798      	blx	r3
 800510a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800510c:	e029      	b.n	8005162 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800510e:	6839      	ldr	r1, [r7, #0]
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f9f3 	bl	80054fc <USBD_CtlError>
        err++;
 8005116:	7afb      	ldrb	r3, [r7, #11]
 8005118:	3301      	adds	r3, #1
 800511a:	72fb      	strb	r3, [r7, #11]
      break;
 800511c:	e021      	b.n	8005162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	7c1b      	ldrb	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10d      	bne.n	8005142 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	f107 0208 	add.w	r2, r7, #8
 8005132:	4610      	mov	r0, r2
 8005134:	4798      	blx	r3
 8005136:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	3301      	adds	r3, #1
 800513c:	2207      	movs	r2, #7
 800513e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005140:	e00f      	b.n	8005162 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005142:	6839      	ldr	r1, [r7, #0]
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f9d9 	bl	80054fc <USBD_CtlError>
        err++;
 800514a:	7afb      	ldrb	r3, [r7, #11]
 800514c:	3301      	adds	r3, #1
 800514e:	72fb      	strb	r3, [r7, #11]
      break;
 8005150:	e007      	b.n	8005162 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005152:	6839      	ldr	r1, [r7, #0]
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f9d1 	bl	80054fc <USBD_CtlError>
      err++;
 800515a:	7afb      	ldrb	r3, [r7, #11]
 800515c:	3301      	adds	r3, #1
 800515e:	72fb      	strb	r3, [r7, #11]
      break;
 8005160:	bf00      	nop
  }

  if (err != 0U)
 8005162:	7afb      	ldrb	r3, [r7, #11]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d11c      	bne.n	80051a2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005168:	893b      	ldrh	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d011      	beq.n	8005192 <USBD_GetDescriptor+0x2b6>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	88db      	ldrh	r3, [r3, #6]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00d      	beq.n	8005192 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	88da      	ldrh	r2, [r3, #6]
 800517a:	893b      	ldrh	r3, [r7, #8]
 800517c:	4293      	cmp	r3, r2
 800517e:	bf28      	it	cs
 8005180:	4613      	movcs	r3, r2
 8005182:	b29b      	uxth	r3, r3
 8005184:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005186:	893b      	ldrh	r3, [r7, #8]
 8005188:	461a      	mov	r2, r3
 800518a:	68f9      	ldr	r1, [r7, #12]
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fa1f 	bl	80055d0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	88db      	ldrh	r3, [r3, #6]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d104      	bne.n	80051a4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fa76 	bl	800568c <USBD_CtlSendStatus>
 80051a0:	e000      	b.n	80051a4 <USBD_GetDescriptor+0x2c8>
    return;
 80051a2:	bf00      	nop
    }
  }
}
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop

080051ac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	889b      	ldrh	r3, [r3, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d130      	bne.n	8005220 <USBD_SetAddress+0x74>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	88db      	ldrh	r3, [r3, #6]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d12c      	bne.n	8005220 <USBD_SetAddress+0x74>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	885b      	ldrh	r3, [r3, #2]
 80051ca:	2b7f      	cmp	r3, #127	; 0x7f
 80051cc:	d828      	bhi.n	8005220 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	885b      	ldrh	r3, [r3, #2]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d104      	bne.n	80051ee <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80051e4:	6839      	ldr	r1, [r7, #0]
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f988 	bl	80054fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051ec:	e01c      	b.n	8005228 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	7bfa      	ldrb	r2, [r7, #15]
 80051f2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
 80051f8:	4619      	mov	r1, r3
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fe11 	bl	8005e22 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fa43 	bl	800568c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d004      	beq.n	8005216 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005214:	e008      	b.n	8005228 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800521e:	e003      	b.n	8005228 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005220:	6839      	ldr	r1, [r7, #0]
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f96a 	bl	80054fc <USBD_CtlError>
  }
}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	885b      	ldrh	r3, [r3, #2]
 800523e:	b2da      	uxtb	r2, r3
 8005240:	4b41      	ldr	r3, [pc, #260]	; (8005348 <USBD_SetConfig+0x118>)
 8005242:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005244:	4b40      	ldr	r3, [pc, #256]	; (8005348 <USBD_SetConfig+0x118>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d904      	bls.n	8005256 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800524c:	6839      	ldr	r1, [r7, #0]
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f954 	bl	80054fc <USBD_CtlError>
 8005254:	e075      	b.n	8005342 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800525c:	2b02      	cmp	r3, #2
 800525e:	d002      	beq.n	8005266 <USBD_SetConfig+0x36>
 8005260:	2b03      	cmp	r3, #3
 8005262:	d023      	beq.n	80052ac <USBD_SetConfig+0x7c>
 8005264:	e062      	b.n	800532c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005266:	4b38      	ldr	r3, [pc, #224]	; (8005348 <USBD_SetConfig+0x118>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01a      	beq.n	80052a4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800526e:	4b36      	ldr	r3, [pc, #216]	; (8005348 <USBD_SetConfig+0x118>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2203      	movs	r2, #3
 800527c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005280:	4b31      	ldr	r3, [pc, #196]	; (8005348 <USBD_SetConfig+0x118>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	4619      	mov	r1, r3
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7ff f9f4 	bl	8004674 <USBD_SetClassConfig>
 800528c:	4603      	mov	r3, r0
 800528e:	2b02      	cmp	r3, #2
 8005290:	d104      	bne.n	800529c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005292:	6839      	ldr	r1, [r7, #0]
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f931 	bl	80054fc <USBD_CtlError>
            return;
 800529a:	e052      	b.n	8005342 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f9f5 	bl	800568c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80052a2:	e04e      	b.n	8005342 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f9f1 	bl	800568c <USBD_CtlSendStatus>
        break;
 80052aa:	e04a      	b.n	8005342 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80052ac:	4b26      	ldr	r3, [pc, #152]	; (8005348 <USBD_SetConfig+0x118>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d112      	bne.n	80052da <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80052bc:	4b22      	ldr	r3, [pc, #136]	; (8005348 <USBD_SetConfig+0x118>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80052c6:	4b20      	ldr	r3, [pc, #128]	; (8005348 <USBD_SetConfig+0x118>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	4619      	mov	r1, r3
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7ff f9f0 	bl	80046b2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f9da 	bl	800568c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80052d8:	e033      	b.n	8005342 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80052da:	4b1b      	ldr	r3, [pc, #108]	; (8005348 <USBD_SetConfig+0x118>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d01d      	beq.n	8005324 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff f9de 	bl	80046b2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80052f6:	4b14      	ldr	r3, [pc, #80]	; (8005348 <USBD_SetConfig+0x118>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005300:	4b11      	ldr	r3, [pc, #68]	; (8005348 <USBD_SetConfig+0x118>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	4619      	mov	r1, r3
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7ff f9b4 	bl	8004674 <USBD_SetClassConfig>
 800530c:	4603      	mov	r3, r0
 800530e:	2b02      	cmp	r3, #2
 8005310:	d104      	bne.n	800531c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f8f1 	bl	80054fc <USBD_CtlError>
            return;
 800531a:	e012      	b.n	8005342 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f9b5 	bl	800568c <USBD_CtlSendStatus>
        break;
 8005322:	e00e      	b.n	8005342 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f9b1 	bl	800568c <USBD_CtlSendStatus>
        break;
 800532a:	e00a      	b.n	8005342 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800532c:	6839      	ldr	r1, [r7, #0]
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f8e4 	bl	80054fc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005334:	4b04      	ldr	r3, [pc, #16]	; (8005348 <USBD_SetConfig+0x118>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	4619      	mov	r1, r3
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff f9b9 	bl	80046b2 <USBD_ClrClassConfig>
        break;
 8005340:	bf00      	nop
    }
  }
}
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20000198 	.word	0x20000198

0800534c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	88db      	ldrh	r3, [r3, #6]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d004      	beq.n	8005368 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800535e:	6839      	ldr	r1, [r7, #0]
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f8cb 	bl	80054fc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005366:	e021      	b.n	80053ac <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800536e:	2b01      	cmp	r3, #1
 8005370:	db17      	blt.n	80053a2 <USBD_GetConfig+0x56>
 8005372:	2b02      	cmp	r3, #2
 8005374:	dd02      	ble.n	800537c <USBD_GetConfig+0x30>
 8005376:	2b03      	cmp	r3, #3
 8005378:	d00b      	beq.n	8005392 <USBD_GetConfig+0x46>
 800537a:	e012      	b.n	80053a2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3308      	adds	r3, #8
 8005386:	2201      	movs	r2, #1
 8005388:	4619      	mov	r1, r3
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f920 	bl	80055d0 <USBD_CtlSendData>
        break;
 8005390:	e00c      	b.n	80053ac <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3304      	adds	r3, #4
 8005396:	2201      	movs	r2, #1
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f918 	bl	80055d0 <USBD_CtlSendData>
        break;
 80053a0:	e004      	b.n	80053ac <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80053a2:	6839      	ldr	r1, [r7, #0]
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f8a9 	bl	80054fc <USBD_CtlError>
        break;
 80053aa:	bf00      	nop
}
 80053ac:	bf00      	nop
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053c4:	3b01      	subs	r3, #1
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d81e      	bhi.n	8005408 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	88db      	ldrh	r3, [r3, #6]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d004      	beq.n	80053dc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80053d2:	6839      	ldr	r1, [r7, #0]
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f891 	bl	80054fc <USBD_CtlError>
        break;
 80053da:	e01a      	b.n	8005412 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f043 0202 	orr.w	r2, r3, #2
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	330c      	adds	r3, #12
 80053fc:	2202      	movs	r2, #2
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f8e5 	bl	80055d0 <USBD_CtlSendData>
      break;
 8005406:	e004      	b.n	8005412 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005408:	6839      	ldr	r1, [r7, #0]
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f876 	bl	80054fc <USBD_CtlError>
      break;
 8005410:	bf00      	nop
  }
}
 8005412:	bf00      	nop
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b082      	sub	sp, #8
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	885b      	ldrh	r3, [r3, #2]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d106      	bne.n	800543a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f929 	bl	800568c <USBD_CtlSendStatus>
  }
}
 800543a:	bf00      	nop
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005452:	3b01      	subs	r3, #1
 8005454:	2b02      	cmp	r3, #2
 8005456:	d80b      	bhi.n	8005470 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	885b      	ldrh	r3, [r3, #2]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d10c      	bne.n	800547a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f90f 	bl	800568c <USBD_CtlSendStatus>
      }
      break;
 800546e:	e004      	b.n	800547a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f842 	bl	80054fc <USBD_CtlError>
      break;
 8005478:	e000      	b.n	800547c <USBD_ClrFeature+0x3a>
      break;
 800547a:	bf00      	nop
  }
}
 800547c:	bf00      	nop
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781a      	ldrb	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	785a      	ldrb	r2, [r3, #1]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	3302      	adds	r3, #2
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	3303      	adds	r3, #3
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	021b      	lsls	r3, r3, #8
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	4413      	add	r3, r2
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	3304      	adds	r3, #4
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	3305      	adds	r3, #5
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	4413      	add	r3, r2
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	3306      	adds	r3, #6
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	b29a      	uxth	r2, r3
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	3307      	adds	r3, #7
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	021b      	lsls	r3, r3, #8
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	4413      	add	r3, r2
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	80da      	strh	r2, [r3, #6]

}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr

080054fc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005506:	2180      	movs	r1, #128	; 0x80
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fc27 	bl	8005d5c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800550e:	2100      	movs	r1, #0
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fc23 	bl	8005d5c <USBD_LL_StallEP>
}
 8005516:	bf00      	nop
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b086      	sub	sp, #24
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800552a:	2300      	movs	r3, #0
 800552c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d032      	beq.n	800559a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 f834 	bl	80055a2 <USBD_GetLen>
 800553a:	4603      	mov	r3, r0
 800553c:	3301      	adds	r3, #1
 800553e:	b29b      	uxth	r3, r3
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005548:	7dfb      	ldrb	r3, [r7, #23]
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	75fa      	strb	r2, [r7, #23]
 800554e:	461a      	mov	r2, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4413      	add	r3, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	7812      	ldrb	r2, [r2, #0]
 8005558:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800555a:	7dfb      	ldrb	r3, [r7, #23]
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	75fa      	strb	r2, [r7, #23]
 8005560:	461a      	mov	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	4413      	add	r3, r2
 8005566:	2203      	movs	r2, #3
 8005568:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800556a:	e012      	b.n	8005592 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	60fa      	str	r2, [r7, #12]
 8005572:	7dfa      	ldrb	r2, [r7, #23]
 8005574:	1c51      	adds	r1, r2, #1
 8005576:	75f9      	strb	r1, [r7, #23]
 8005578:	4611      	mov	r1, r2
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	440a      	add	r2, r1
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005582:	7dfb      	ldrb	r3, [r7, #23]
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	75fa      	strb	r2, [r7, #23]
 8005588:	461a      	mov	r2, r3
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	4413      	add	r3, r2
 800558e:	2200      	movs	r2, #0
 8005590:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e8      	bne.n	800556c <USBD_GetString+0x4e>
    }
  }
}
 800559a:	bf00      	nop
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b085      	sub	sp, #20
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80055ae:	e005      	b.n	80055bc <USBD_GetLen+0x1a>
  {
    len++;
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	3301      	adds	r3, #1
 80055b4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3301      	adds	r3, #1
 80055ba:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1f5      	bne.n	80055b0 <USBD_GetLen+0xe>
  }

  return len;
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr

080055d0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	4613      	mov	r3, r2
 80055dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2202      	movs	r2, #2
 80055e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80055e6:	88fa      	ldrh	r2, [r7, #6]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80055ec:	88fa      	ldrh	r2, [r7, #6]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80055f2:	88fb      	ldrh	r3, [r7, #6]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	2100      	movs	r1, #0
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 fc31 	bl	8005e60 <USBD_LL_Transmit>

  return USBD_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	4613      	mov	r3, r2
 8005614:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	2100      	movs	r1, #0
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 fc1f 	bl	8005e60 <USBD_LL_Transmit>

  return USBD_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	4613      	mov	r3, r2
 8005638:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2203      	movs	r2, #3
 800563e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005642:	88fa      	ldrh	r2, [r7, #6]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800564a:	88fa      	ldrh	r2, [r7, #6]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	2100      	movs	r1, #0
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 fc24 	bl	8005ea6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	4613      	mov	r3, r2
 8005674:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005676:	88fb      	ldrh	r3, [r7, #6]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	2100      	movs	r1, #0
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 fc12 	bl	8005ea6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2204      	movs	r2, #4
 8005698:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800569c:	2300      	movs	r3, #0
 800569e:	2200      	movs	r2, #0
 80056a0:	2100      	movs	r1, #0
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fbdc 	bl	8005e60 <USBD_LL_Transmit>

  return USBD_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b082      	sub	sp, #8
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2205      	movs	r2, #5
 80056be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056c2:	2300      	movs	r3, #0
 80056c4:	2200      	movs	r2, #0
 80056c6:	2100      	movs	r1, #0
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fbec 	bl	8005ea6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80056dc:	2200      	movs	r2, #0
 80056de:	4912      	ldr	r1, [pc, #72]	; (8005728 <MX_USB_DEVICE_Init+0x50>)
 80056e0:	4812      	ldr	r0, [pc, #72]	; (800572c <MX_USB_DEVICE_Init+0x54>)
 80056e2:	f7fe ff6d 	bl	80045c0 <USBD_Init>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80056ec:	f7fa fe52 	bl	8000394 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80056f0:	490f      	ldr	r1, [pc, #60]	; (8005730 <MX_USB_DEVICE_Init+0x58>)
 80056f2:	480e      	ldr	r0, [pc, #56]	; (800572c <MX_USB_DEVICE_Init+0x54>)
 80056f4:	f7fe ff8f 	bl	8004616 <USBD_RegisterClass>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80056fe:	f7fa fe49 	bl	8000394 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005702:	490c      	ldr	r1, [pc, #48]	; (8005734 <MX_USB_DEVICE_Init+0x5c>)
 8005704:	4809      	ldr	r0, [pc, #36]	; (800572c <MX_USB_DEVICE_Init+0x54>)
 8005706:	f7fe feef 	bl	80044e8 <USBD_CDC_RegisterInterface>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005710:	f7fa fe40 	bl	8000394 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005714:	4805      	ldr	r0, [pc, #20]	; (800572c <MX_USB_DEVICE_Init+0x54>)
 8005716:	f7fe ff97 	bl	8004648 <USBD_Start>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005720:	f7fa fe38 	bl	8000394 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005724:	bf00      	nop
 8005726:	bd80      	pop	{r7, pc}
 8005728:	2000012c 	.word	0x2000012c
 800572c:	20000c0c 	.word	0x20000c0c
 8005730:	20000018 	.word	0x20000018
 8005734:	2000011c 	.word	0x2000011c

08005738 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800573c:	2200      	movs	r2, #0
 800573e:	4905      	ldr	r1, [pc, #20]	; (8005754 <CDC_Init_FS+0x1c>)
 8005740:	4805      	ldr	r0, [pc, #20]	; (8005758 <CDC_Init_FS+0x20>)
 8005742:	f7fe fee7 	bl	8004514 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005746:	4905      	ldr	r1, [pc, #20]	; (800575c <CDC_Init_FS+0x24>)
 8005748:	4803      	ldr	r0, [pc, #12]	; (8005758 <CDC_Init_FS+0x20>)
 800574a:	f7fe fefc 	bl	8004546 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800574e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005750:	4618      	mov	r0, r3
 8005752:	bd80      	pop	{r7, pc}
 8005754:	200012b8 	.word	0x200012b8
 8005758:	20000c0c 	.word	0x20000c0c
 800575c:	20000ed0 	.word	0x20000ed0

08005760 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005764:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005766:	4618      	mov	r0, r3
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr
	...

08005770 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	4603      	mov	r3, r0
 8005778:	6039      	str	r1, [r7, #0]
 800577a:	71fb      	strb	r3, [r7, #7]
 800577c:	4613      	mov	r3, r2
 800577e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005780:	79fb      	ldrb	r3, [r7, #7]
 8005782:	2b23      	cmp	r3, #35	; 0x23
 8005784:	d84a      	bhi.n	800581c <CDC_Control_FS+0xac>
 8005786:	a201      	add	r2, pc, #4	; (adr r2, 800578c <CDC_Control_FS+0x1c>)
 8005788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578c:	0800581d 	.word	0x0800581d
 8005790:	0800581d 	.word	0x0800581d
 8005794:	0800581d 	.word	0x0800581d
 8005798:	0800581d 	.word	0x0800581d
 800579c:	0800581d 	.word	0x0800581d
 80057a0:	0800581d 	.word	0x0800581d
 80057a4:	0800581d 	.word	0x0800581d
 80057a8:	0800581d 	.word	0x0800581d
 80057ac:	0800581d 	.word	0x0800581d
 80057b0:	0800581d 	.word	0x0800581d
 80057b4:	0800581d 	.word	0x0800581d
 80057b8:	0800581d 	.word	0x0800581d
 80057bc:	0800581d 	.word	0x0800581d
 80057c0:	0800581d 	.word	0x0800581d
 80057c4:	0800581d 	.word	0x0800581d
 80057c8:	0800581d 	.word	0x0800581d
 80057cc:	0800581d 	.word	0x0800581d
 80057d0:	0800581d 	.word	0x0800581d
 80057d4:	0800581d 	.word	0x0800581d
 80057d8:	0800581d 	.word	0x0800581d
 80057dc:	0800581d 	.word	0x0800581d
 80057e0:	0800581d 	.word	0x0800581d
 80057e4:	0800581d 	.word	0x0800581d
 80057e8:	0800581d 	.word	0x0800581d
 80057ec:	0800581d 	.word	0x0800581d
 80057f0:	0800581d 	.word	0x0800581d
 80057f4:	0800581d 	.word	0x0800581d
 80057f8:	0800581d 	.word	0x0800581d
 80057fc:	0800581d 	.word	0x0800581d
 8005800:	0800581d 	.word	0x0800581d
 8005804:	0800581d 	.word	0x0800581d
 8005808:	0800581d 	.word	0x0800581d
 800580c:	0800581d 	.word	0x0800581d
 8005810:	0800581d 	.word	0x0800581d
 8005814:	0800581d 	.word	0x0800581d
 8005818:	0800581d 	.word	0x0800581d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800581c:	bf00      	nop
  }

  return (USBD_OK);
 800581e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005820:	4618      	mov	r0, r3
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	bc80      	pop	{r7}
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop

0800582c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	4805      	ldr	r0, [pc, #20]	; (8005850 <CDC_Receive_FS+0x24>)
 800583a:	f7fe fe84 	bl	8004546 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800583e:	4804      	ldr	r0, [pc, #16]	; (8005850 <CDC_Receive_FS+0x24>)
 8005840:	f7fe fe94 	bl	800456c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005844:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000c0c 	.word	0x20000c0c

08005854 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	6039      	str	r1, [r7, #0]
 800585e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2212      	movs	r2, #18
 8005864:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005866:	4b03      	ldr	r3, [pc, #12]	; (8005874 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005868:	4618      	mov	r0, r3
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	bc80      	pop	{r7}
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000148 	.word	0x20000148

08005878 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	4603      	mov	r3, r0
 8005880:	6039      	str	r1, [r7, #0]
 8005882:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2204      	movs	r2, #4
 8005888:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800588a:	4b03      	ldr	r3, [pc, #12]	; (8005898 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800588c:	4618      	mov	r0, r3
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	bc80      	pop	{r7}
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	2000015c 	.word	0x2000015c

0800589c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	4603      	mov	r3, r0
 80058a4:	6039      	str	r1, [r7, #0]
 80058a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d105      	bne.n	80058ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	4907      	ldr	r1, [pc, #28]	; (80058d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80058b2:	4808      	ldr	r0, [pc, #32]	; (80058d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80058b4:	f7ff fe33 	bl	800551e <USBD_GetString>
 80058b8:	e004      	b.n	80058c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	4904      	ldr	r1, [pc, #16]	; (80058d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80058be:	4805      	ldr	r0, [pc, #20]	; (80058d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80058c0:	f7ff fe2d 	bl	800551e <USBD_GetString>
  }
  return USBD_StrDesc;
 80058c4:	4b02      	ldr	r3, [pc, #8]	; (80058d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	200016a0 	.word	0x200016a0
 80058d4:	08006030 	.word	0x08006030

080058d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	4603      	mov	r3, r0
 80058e0:	6039      	str	r1, [r7, #0]
 80058e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	4904      	ldr	r1, [pc, #16]	; (80058f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80058e8:	4804      	ldr	r0, [pc, #16]	; (80058fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80058ea:	f7ff fe18 	bl	800551e <USBD_GetString>
  return USBD_StrDesc;
 80058ee:	4b02      	ldr	r3, [pc, #8]	; (80058f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	200016a0 	.word	0x200016a0
 80058fc:	08006048 	.word	0x08006048

08005900 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	4603      	mov	r3, r0
 8005908:	6039      	str	r1, [r7, #0]
 800590a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	221a      	movs	r2, #26
 8005910:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005912:	f000 f843 	bl	800599c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005916:	4b02      	ldr	r3, [pc, #8]	; (8005920 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005918:	4618      	mov	r0, r3
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	20000160 	.word	0x20000160

08005924 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	4603      	mov	r3, r0
 800592c:	6039      	str	r1, [r7, #0]
 800592e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d105      	bne.n	8005942 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	4907      	ldr	r1, [pc, #28]	; (8005958 <USBD_FS_ConfigStrDescriptor+0x34>)
 800593a:	4808      	ldr	r0, [pc, #32]	; (800595c <USBD_FS_ConfigStrDescriptor+0x38>)
 800593c:	f7ff fdef 	bl	800551e <USBD_GetString>
 8005940:	e004      	b.n	800594c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	4904      	ldr	r1, [pc, #16]	; (8005958 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005946:	4805      	ldr	r0, [pc, #20]	; (800595c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005948:	f7ff fde9 	bl	800551e <USBD_GetString>
  }
  return USBD_StrDesc;
 800594c:	4b02      	ldr	r3, [pc, #8]	; (8005958 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800594e:	4618      	mov	r0, r3
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	200016a0 	.word	0x200016a0
 800595c:	0800605c 	.word	0x0800605c

08005960 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	4603      	mov	r3, r0
 8005968:	6039      	str	r1, [r7, #0]
 800596a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800596c:	79fb      	ldrb	r3, [r7, #7]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d105      	bne.n	800597e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	4907      	ldr	r1, [pc, #28]	; (8005994 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005976:	4808      	ldr	r0, [pc, #32]	; (8005998 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005978:	f7ff fdd1 	bl	800551e <USBD_GetString>
 800597c:	e004      	b.n	8005988 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	4904      	ldr	r1, [pc, #16]	; (8005994 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005982:	4805      	ldr	r0, [pc, #20]	; (8005998 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005984:	f7ff fdcb 	bl	800551e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005988:	4b02      	ldr	r3, [pc, #8]	; (8005994 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	200016a0 	.word	0x200016a0
 8005998:	08006068 	.word	0x08006068

0800599c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80059a2:	4b0f      	ldr	r3, [pc, #60]	; (80059e0 <Get_SerialNum+0x44>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80059a8:	4b0e      	ldr	r3, [pc, #56]	; (80059e4 <Get_SerialNum+0x48>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80059ae:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <Get_SerialNum+0x4c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4413      	add	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d009      	beq.n	80059d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80059c2:	2208      	movs	r2, #8
 80059c4:	4909      	ldr	r1, [pc, #36]	; (80059ec <Get_SerialNum+0x50>)
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 f814 	bl	80059f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80059cc:	2204      	movs	r2, #4
 80059ce:	4908      	ldr	r1, [pc, #32]	; (80059f0 <Get_SerialNum+0x54>)
 80059d0:	68b8      	ldr	r0, [r7, #8]
 80059d2:	f000 f80f 	bl	80059f4 <IntToUnicode>
  }
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	1ffff7e8 	.word	0x1ffff7e8
 80059e4:	1ffff7ec 	.word	0x1ffff7ec
 80059e8:	1ffff7f0 	.word	0x1ffff7f0
 80059ec:	20000162 	.word	0x20000162
 80059f0:	20000172 	.word	0x20000172

080059f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	4613      	mov	r3, r2
 8005a00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005a06:	2300      	movs	r3, #0
 8005a08:	75fb      	strb	r3, [r7, #23]
 8005a0a:	e027      	b.n	8005a5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	0f1b      	lsrs	r3, r3, #28
 8005a10:	2b09      	cmp	r3, #9
 8005a12:	d80b      	bhi.n	8005a2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	0f1b      	lsrs	r3, r3, #28
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	7dfb      	ldrb	r3, [r7, #23]
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	4619      	mov	r1, r3
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	440b      	add	r3, r1
 8005a24:	3230      	adds	r2, #48	; 0x30
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	e00a      	b.n	8005a42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	0f1b      	lsrs	r3, r3, #28
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	7dfb      	ldrb	r3, [r7, #23]
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	4619      	mov	r1, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	440b      	add	r3, r1
 8005a3c:	3237      	adds	r2, #55	; 0x37
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005a48:	7dfb      	ldrb	r3, [r7, #23]
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	4413      	add	r3, r2
 8005a52:	2200      	movs	r2, #0
 8005a54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005a56:	7dfb      	ldrb	r3, [r7, #23]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	75fb      	strb	r3, [r7, #23]
 8005a5c:	7dfa      	ldrb	r2, [r7, #23]
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d3d3      	bcc.n	8005a0c <IntToUnicode+0x18>
  }
}
 8005a64:	bf00      	nop
 8005a66:	371c      	adds	r7, #28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr
	...

08005a70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a0d      	ldr	r2, [pc, #52]	; (8005ab4 <HAL_PCD_MspInit+0x44>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d113      	bne.n	8005aaa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005a82:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <HAL_PCD_MspInit+0x48>)
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	4a0c      	ldr	r2, [pc, #48]	; (8005ab8 <HAL_PCD_MspInit+0x48>)
 8005a88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a8c:	61d3      	str	r3, [r2, #28]
 8005a8e:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <HAL_PCD_MspInit+0x48>)
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	2014      	movs	r0, #20
 8005aa0:	f7fb fa93 	bl	8000fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005aa4:	2014      	movs	r0, #20
 8005aa6:	f7fb faac 	bl	8001002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	40005c00 	.word	0x40005c00
 8005ab8:	40021000 	.word	0x40021000

08005abc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	f7fe fe00 	bl	80046d8 <USBD_LL_SetupStage>
}
 8005ad8:	bf00      	nop
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8005af2:	78fb      	ldrb	r3, [r7, #3]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	015b      	lsls	r3, r3, #5
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	4619      	mov	r1, r3
 8005b04:	f7fe fe33 	bl	800476e <USBD_LL_DataOutStage>
}
 8005b08:	bf00      	nop
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8005b22:	78fb      	ldrb	r3, [r7, #3]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	015b      	lsls	r3, r3, #5
 8005b28:	4413      	add	r3, r2
 8005b2a:	333c      	adds	r3, #60	; 0x3c
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	4619      	mov	r1, r3
 8005b32:	f7fe fe8d 	bl	8004850 <USBD_LL_DataInStage>
}
 8005b36:	bf00      	nop
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b082      	sub	sp, #8
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fe ff9d 	bl	8004a8c <USBD_LL_SOF>
}
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005b62:	2301      	movs	r3, #1
 8005b64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d001      	beq.n	8005b72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005b6e:	f7fa fc11 	bl	8000394 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005b78:	7bfa      	ldrb	r2, [r7, #15]
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fe ff4d 	bl	8004a1c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fe ff06 	bl	800499a <USBD_LL_Reset>
}
 8005b8e:	bf00      	nop
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fe ff47 	bl	8004a3a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005bb4:	4b04      	ldr	r3, [pc, #16]	; (8005bc8 <HAL_PCD_SuspendCallback+0x30>)
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	4a03      	ldr	r2, [pc, #12]	; (8005bc8 <HAL_PCD_SuspendCallback+0x30>)
 8005bba:	f043 0306 	orr.w	r3, r3, #6
 8005bbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	e000ed00 	.word	0xe000ed00

08005bcc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fe ff41 	bl	8004a62 <USBD_LL_Resume>
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8005bf0:	4a28      	ldr	r2, [pc, #160]	; (8005c94 <USBD_LL_Init+0xac>)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a26      	ldr	r2, [pc, #152]	; (8005c94 <USBD_LL_Init+0xac>)
 8005bfc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8005c00:	4b24      	ldr	r3, [pc, #144]	; (8005c94 <USBD_LL_Init+0xac>)
 8005c02:	4a25      	ldr	r2, [pc, #148]	; (8005c98 <USBD_LL_Init+0xb0>)
 8005c04:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005c06:	4b23      	ldr	r3, [pc, #140]	; (8005c94 <USBD_LL_Init+0xac>)
 8005c08:	2208      	movs	r2, #8
 8005c0a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005c0c:	4b21      	ldr	r3, [pc, #132]	; (8005c94 <USBD_LL_Init+0xac>)
 8005c0e:	2202      	movs	r2, #2
 8005c10:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005c12:	4b20      	ldr	r3, [pc, #128]	; (8005c94 <USBD_LL_Init+0xac>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005c18:	4b1e      	ldr	r3, [pc, #120]	; (8005c94 <USBD_LL_Init+0xac>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005c1e:	4b1d      	ldr	r3, [pc, #116]	; (8005c94 <USBD_LL_Init+0xac>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005c24:	481b      	ldr	r0, [pc, #108]	; (8005c94 <USBD_LL_Init+0xac>)
 8005c26:	f7fb fd4f 	bl	80016c8 <HAL_PCD_Init>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8005c30:	f7fa fbb0 	bl	8000394 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005c3a:	2318      	movs	r3, #24
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2100      	movs	r1, #0
 8005c40:	f7fc fbe8 	bl	8002414 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005c4a:	2358      	movs	r3, #88	; 0x58
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2180      	movs	r1, #128	; 0x80
 8005c50:	f7fc fbe0 	bl	8002414 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005c5a:	23c0      	movs	r3, #192	; 0xc0
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	2181      	movs	r1, #129	; 0x81
 8005c60:	f7fc fbd8 	bl	8002414 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005c6a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2101      	movs	r1, #1
 8005c72:	f7fc fbcf 	bl	8002414 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c80:	2200      	movs	r2, #0
 8005c82:	2182      	movs	r1, #130	; 0x82
 8005c84:	f7fc fbc6 	bl	8002414 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	200017a0 	.word	0x200017a0
 8005c98:	40005c00 	.word	0x40005c00

08005c9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fb fde9 	bl	800188a <HAL_PCD_Start>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 f948 	bl	8005f54 <USBD_Get_USB_Status>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005cc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	4608      	mov	r0, r1
 8005cdc:	4611      	mov	r1, r2
 8005cde:	461a      	mov	r2, r3
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	70fb      	strb	r3, [r7, #3]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	70bb      	strb	r3, [r7, #2]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005cfa:	78bb      	ldrb	r3, [r7, #2]
 8005cfc:	883a      	ldrh	r2, [r7, #0]
 8005cfe:	78f9      	ldrb	r1, [r7, #3]
 8005d00:	f7fb ff1c 	bl	8001b3c <HAL_PCD_EP_Open>
 8005d04:	4603      	mov	r3, r0
 8005d06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 f922 	bl	8005f54 <USBD_Get_USB_Status>
 8005d10:	4603      	mov	r3, r0
 8005d12:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8005d14:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	460b      	mov	r3, r1
 8005d28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d38:	78fa      	ldrb	r2, [r7, #3]
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fb ff5d 	bl	8001bfc <HAL_PCD_EP_Close>
 8005d42:	4603      	mov	r3, r0
 8005d44:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 f903 	bl	8005f54 <USBD_Get_USB_Status>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8005d52:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	460b      	mov	r3, r1
 8005d66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d76:	78fa      	ldrb	r2, [r7, #3]
 8005d78:	4611      	mov	r1, r2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fc f807 	bl	8001d8e <HAL_PCD_EP_SetStall>
 8005d80:	4603      	mov	r3, r0
 8005d82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 f8e4 	bl	8005f54 <USBD_Get_USB_Status>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005d90:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	460b      	mov	r3, r1
 8005da4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005db4:	78fa      	ldrb	r2, [r7, #3]
 8005db6:	4611      	mov	r1, r2
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7fc f842 	bl	8001e42 <HAL_PCD_EP_ClrStall>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005dc2:	7bfb      	ldrb	r3, [r7, #15]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 f8c5 	bl	8005f54 <USBD_Get_USB_Status>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8005dce:	7bbb      	ldrb	r3, [r7, #14]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dea:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005dec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	da08      	bge.n	8005e06 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	015b      	lsls	r3, r3, #5
 8005dfe:	4413      	add	r3, r2
 8005e00:	332a      	adds	r3, #42	; 0x2a
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	e008      	b.n	8005e18 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005e06:	78fb      	ldrb	r3, [r7, #3]
 8005e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	015b      	lsls	r3, r3, #5
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005e16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr

08005e22 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e3c:	78fa      	ldrb	r2, [r7, #3]
 8005e3e:	4611      	mov	r1, r2
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fb fe56 	bl	8001af2 <HAL_PCD_SetAddress>
 8005e46:	4603      	mov	r3, r0
 8005e48:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 f881 	bl	8005f54 <USBD_Get_USB_Status>
 8005e52:	4603      	mov	r3, r0
 8005e54:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005e56:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	607a      	str	r2, [r7, #4]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	72fb      	strb	r3, [r7, #11]
 8005e70:	4613      	mov	r3, r2
 8005e72:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005e82:	893b      	ldrh	r3, [r7, #8]
 8005e84:	7af9      	ldrb	r1, [r7, #11]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	f7fb ff48 	bl	8001d1c <HAL_PCD_EP_Transmit>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 f85e 	bl	8005f54 <USBD_Get_USB_Status>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005e9c:	7dbb      	ldrb	r3, [r7, #22]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b086      	sub	sp, #24
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	60f8      	str	r0, [r7, #12]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	72fb      	strb	r3, [r7, #11]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005ec8:	893b      	ldrh	r3, [r7, #8]
 8005eca:	7af9      	ldrb	r1, [r7, #11]
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	f7fb fed7 	bl	8001c80 <HAL_PCD_EP_Receive>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ed6:	7dfb      	ldrb	r3, [r7, #23]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 f83b 	bl	8005f54 <USBD_Get_USB_Status>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8005ee2:	7dbb      	ldrb	r3, [r7, #22]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005efe:	78fa      	ldrb	r2, [r7, #3]
 8005f00:	4611      	mov	r1, r2
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fb fef6 	bl	8001cf4 <HAL_PCD_EP_GetRxCount>
 8005f08:	4603      	mov	r3, r0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005f1c:	4b02      	ldr	r3, [pc, #8]	; (8005f28 <USBD_static_malloc+0x14>)
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr
 8005f28:	2000019c 	.word	0x2000019c

08005f2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]

}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bc80      	pop	{r7}
 8005f3c:	4770      	bx	lr

08005f3e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	460b      	mov	r3, r1
 8005f48:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bc80      	pop	{r7}
 8005f52:	4770      	bx	lr

08005f54 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005f62:	79fb      	ldrb	r3, [r7, #7]
 8005f64:	2b03      	cmp	r3, #3
 8005f66:	d817      	bhi.n	8005f98 <USBD_Get_USB_Status+0x44>
 8005f68:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <USBD_Get_USB_Status+0x1c>)
 8005f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6e:	bf00      	nop
 8005f70:	08005f81 	.word	0x08005f81
 8005f74:	08005f87 	.word	0x08005f87
 8005f78:	08005f8d 	.word	0x08005f8d
 8005f7c:	08005f93 	.word	0x08005f93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	73fb      	strb	r3, [r7, #15]
    break;
 8005f84:	e00b      	b.n	8005f9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005f86:	2302      	movs	r3, #2
 8005f88:	73fb      	strb	r3, [r7, #15]
    break;
 8005f8a:	e008      	b.n	8005f9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8005f90:	e005      	b.n	8005f9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005f92:	2302      	movs	r3, #2
 8005f94:	73fb      	strb	r3, [r7, #15]
    break;
 8005f96:	e002      	b.n	8005f9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005f98:	2302      	movs	r3, #2
 8005f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8005f9c:	bf00      	nop
  }
  return usb_status;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bc80      	pop	{r7}
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop

08005fac <__libc_init_array>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	2500      	movs	r5, #0
 8005fb0:	4e0c      	ldr	r6, [pc, #48]	; (8005fe4 <__libc_init_array+0x38>)
 8005fb2:	4c0d      	ldr	r4, [pc, #52]	; (8005fe8 <__libc_init_array+0x3c>)
 8005fb4:	1ba4      	subs	r4, r4, r6
 8005fb6:	10a4      	asrs	r4, r4, #2
 8005fb8:	42a5      	cmp	r5, r4
 8005fba:	d109      	bne.n	8005fd0 <__libc_init_array+0x24>
 8005fbc:	f000 f822 	bl	8006004 <_init>
 8005fc0:	2500      	movs	r5, #0
 8005fc2:	4e0a      	ldr	r6, [pc, #40]	; (8005fec <__libc_init_array+0x40>)
 8005fc4:	4c0a      	ldr	r4, [pc, #40]	; (8005ff0 <__libc_init_array+0x44>)
 8005fc6:	1ba4      	subs	r4, r4, r6
 8005fc8:	10a4      	asrs	r4, r4, #2
 8005fca:	42a5      	cmp	r5, r4
 8005fcc:	d105      	bne.n	8005fda <__libc_init_array+0x2e>
 8005fce:	bd70      	pop	{r4, r5, r6, pc}
 8005fd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fd4:	4798      	blx	r3
 8005fd6:	3501      	adds	r5, #1
 8005fd8:	e7ee      	b.n	8005fb8 <__libc_init_array+0xc>
 8005fda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fde:	4798      	blx	r3
 8005fe0:	3501      	adds	r5, #1
 8005fe2:	e7f2      	b.n	8005fca <__libc_init_array+0x1e>
 8005fe4:	08006088 	.word	0x08006088
 8005fe8:	08006088 	.word	0x08006088
 8005fec:	08006088 	.word	0x08006088
 8005ff0:	0800608c 	.word	0x0800608c

08005ff4 <memset>:
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	4402      	add	r2, r0
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d100      	bne.n	8005ffe <memset+0xa>
 8005ffc:	4770      	bx	lr
 8005ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8006002:	e7f9      	b.n	8005ff8 <memset+0x4>

08006004 <_init>:
 8006004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006006:	bf00      	nop
 8006008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800600a:	bc08      	pop	{r3}
 800600c:	469e      	mov	lr, r3
 800600e:	4770      	bx	lr

08006010 <_fini>:
 8006010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006012:	bf00      	nop
 8006014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006016:	bc08      	pop	{r3}
 8006018:	469e      	mov	lr, r3
 800601a:	4770      	bx	lr
