
Trigger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006650  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800675c  0800675c  0001675c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067c8  080067c8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080067c8  080067c8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067c8  080067c8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067c8  080067c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067cc  080067cc  000167cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080067d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018ac  200001e0  080069b0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a8c  080069b0  00021a8c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136e9  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031cd  00000000  00000000  000338f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb8  00000000  00000000  00036ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b30  00000000  00000000  00037778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001713d  00000000  00000000  000382a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e0bf  00000000  00000000  0004f3e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072a62  00000000  00000000  0005d4a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cff06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a8  00000000  00000000  000cff84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08006744 	.word	0x08006744

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08006744 	.word	0x08006744

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb79 	bl	8000848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f897 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f971 	bl	8000440 <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f951 	bl	8000404 <MX_DMA_Init>
  MX_ADC1_Init();
 8000162:	f000 f8ef 	bl	8000344 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000166:	f005 fdab 	bl	8005cc0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint32_t particleCounter = 0;
 800016a:	2300      	movs	r3, #0
 800016c:	607b      	str	r3, [r7, #4]
  uint8_t firstBufferPartState = Empty;
 800016e:	2300      	movs	r3, #0
 8000170:	70fb      	strb	r3, [r7, #3]
  uint8_t secondBufferPartState = Empty;
 8000172:	2300      	movs	r3, #0
 8000174:	70bb      	strb	r3, [r7, #2]
  uint8_t WhatBufferPartFull = None;
 8000176:	2300      	movs	r3, #0
 8000178:	707b      	strb	r3, [r7, #1]
  uint8_t WhereIsTrigger = None;
 800017a:	2300      	movs	r3, #0
 800017c:	73fb      	strb	r3, [r7, #15]
  uint8_t IsReadyToDataTransmit = False;
 800017e:	2300      	movs	r3, #0
 8000180:	703b      	strb	r3, [r7, #0]

  dataToTransmit = (uint8_t*)malloc(sizeof(uint16_t) * TRACE_SIZE / 2);
 8000182:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000186:	f006 fa55 	bl	8006634 <malloc>
 800018a:	4603      	mov	r3, r0
 800018c:	461a      	mov	r2, r3
 800018e:	4b3a      	ldr	r3, [pc, #232]	; (8000278 <main+0x12c>)
 8000190:	601a      	str	r2, [r3, #0]

  for(int i = 0; i < TRACE_SIZE; i++) {
 8000192:	2300      	movs	r3, #0
 8000194:	60bb      	str	r3, [r7, #8]
 8000196:	e007      	b.n	80001a8 <main+0x5c>
 	  dataFromADC[i] = 0;
 8000198:	4a38      	ldr	r2, [pc, #224]	; (800027c <main+0x130>)
 800019a:	68bb      	ldr	r3, [r7, #8]
 800019c:	2100      	movs	r1, #0
 800019e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i = 0; i < TRACE_SIZE; i++) {
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	3301      	adds	r3, #1
 80001a6:	60bb      	str	r3, [r7, #8]
 80001a8:	68bb      	ldr	r3, [r7, #8]
 80001aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001ae:	dbf3      	blt.n	8000198 <main+0x4c>
   }
   HAL_ADC_Start_DMA(&hadc1, &dataFromADC, TRACE_SIZE);
 80001b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001b4:	4931      	ldr	r1, [pc, #196]	; (800027c <main+0x130>)
 80001b6:	4832      	ldr	r0, [pc, #200]	; (8000280 <main+0x134>)
 80001b8:	f000 fc80 	bl	8000abc <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(IsReadyToDataTransmit == True) {
 80001bc:	783b      	ldrb	r3, [r7, #0]
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d1fc      	bne.n	80001bc <main+0x70>
		  if(WhereIsTrigger == FirstBufferHalf) {
 80001c2:	7bfb      	ldrb	r3, [r7, #15]
 80001c4:	2b0b      	cmp	r3, #11
 80001c6:	d125      	bne.n	8000214 <main+0xc8>
			  memcpy(dataToTransmit, &dataFromADC, TRACE_SIZE / 2);
 80001c8:	4b2b      	ldr	r3, [pc, #172]	; (8000278 <main+0x12c>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001d0:	492a      	ldr	r1, [pc, #168]	; (800027c <main+0x130>)
 80001d2:	4618      	mov	r0, r3
 80001d4:	f006 fa36 	bl	8006644 <memcpy>
			  while(CDC_Transmit_FS(dataToTransmit, TRACE_SIZE / 2) != USBD_OK);
 80001d8:	bf00      	nop
 80001da:	4b27      	ldr	r3, [pc, #156]	; (8000278 <main+0x12c>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80001e2:	4618      	mov	r0, r3
 80001e4:	f005 fe2a 	bl	8005e3c <CDC_Transmit_FS>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d1f5      	bne.n	80001da <main+0x8e>
			  memcpy(dataToTransmit, &dataFromADC[TRACE_SIZE / 2], TRACE_SIZE / 2);
 80001ee:	4b22      	ldr	r3, [pc, #136]	; (8000278 <main+0x12c>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001f6:	4923      	ldr	r1, [pc, #140]	; (8000284 <main+0x138>)
 80001f8:	4618      	mov	r0, r3
 80001fa:	f006 fa23 	bl	8006644 <memcpy>
			  while(CDC_Transmit_FS(dataToTransmit, TRACE_SIZE / 2) != USBD_OK);
 80001fe:	bf00      	nop
 8000200:	4b1d      	ldr	r3, [pc, #116]	; (8000278 <main+0x12c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000208:	4618      	mov	r0, r3
 800020a:	f005 fe17 	bl	8005e3c <CDC_Transmit_FS>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d1f5      	bne.n	8000200 <main+0xb4>
		  }
		  if(WhereIsTrigger == FirstBufferHalf) {
 8000214:	7bfb      	ldrb	r3, [r7, #15]
 8000216:	2b0b      	cmp	r3, #11
 8000218:	d125      	bne.n	8000266 <main+0x11a>
		  	  memcpy(dataToTransmit, &dataFromADC[TRACE_SIZE / 2], TRACE_SIZE / 2);
 800021a:	4b17      	ldr	r3, [pc, #92]	; (8000278 <main+0x12c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000222:	4918      	ldr	r1, [pc, #96]	; (8000284 <main+0x138>)
 8000224:	4618      	mov	r0, r3
 8000226:	f006 fa0d 	bl	8006644 <memcpy>
		  	  while(CDC_Transmit_FS(dataToTransmit, TRACE_SIZE / 2) != USBD_OK);
 800022a:	bf00      	nop
 800022c:	4b12      	ldr	r3, [pc, #72]	; (8000278 <main+0x12c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000234:	4618      	mov	r0, r3
 8000236:	f005 fe01 	bl	8005e3c <CDC_Transmit_FS>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d1f5      	bne.n	800022c <main+0xe0>
		  	  memcpy(dataToTransmit, &dataFromADC, TRACE_SIZE / 2);
 8000240:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <main+0x12c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000248:	490c      	ldr	r1, [pc, #48]	; (800027c <main+0x130>)
 800024a:	4618      	mov	r0, r3
 800024c:	f006 f9fa 	bl	8006644 <memcpy>
		  	  while(CDC_Transmit_FS(dataToTransmit, TRACE_SIZE / 2) != USBD_OK);
 8000250:	bf00      	nop
 8000252:	4b09      	ldr	r3, [pc, #36]	; (8000278 <main+0x12c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800025a:	4618      	mov	r0, r3
 800025c:	f005 fdee 	bl	8005e3c <CDC_Transmit_FS>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d1f5      	bne.n	8000252 <main+0x106>
		  }
		  firstBufferPartState = Empty;
 8000266:	2300      	movs	r3, #0
 8000268:	70fb      	strb	r3, [r7, #3]
		  secondBufferPartState = Empty;
 800026a:	2300      	movs	r3, #0
 800026c:	70bb      	strb	r3, [r7, #2]
		  WhatBufferPartFull = None;
 800026e:	2300      	movs	r3, #0
 8000270:	707b      	strb	r3, [r7, #1]
		  WhereIsTrigger = None;
 8000272:	2300      	movs	r3, #0
 8000274:	73fb      	strb	r3, [r7, #15]
	  if(IsReadyToDataTransmit == True) {
 8000276:	e7a1      	b.n	80001bc <main+0x70>
 8000278:	200004a8 	.word	0x200004a8
 800027c:	200004b4 	.word	0x200004b4
 8000280:	20000430 	.word	0x20000430
 8000284:	2000089c 	.word	0x2000089c

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b094      	sub	sp, #80	; 0x50
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000292:	2228      	movs	r2, #40	; 0x28
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f006 f9df 	bl	800665a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b8:	2301      	movs	r3, #1
 80002ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ca:	2302      	movs	r3, #2
 80002cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fb98 	bl	8002a14 <HAL_RCC_OscConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002ea:	f000 f937 	bl	800055c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	230f      	movs	r3, #15
 80002f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f2:	2302      	movs	r3, #2
 80002f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000304:	f107 0314 	add.w	r3, r7, #20
 8000308:	2101      	movs	r1, #1
 800030a:	4618      	mov	r0, r3
 800030c:	f002 fe02 	bl	8002f14 <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000316:	f000 f921 	bl	800055c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800031a:	2312      	movs	r3, #18
 800031c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800031e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000322:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000324:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000328:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	4618      	mov	r0, r3
 800032e:	f002 ff5b 	bl	80031e8 <HAL_RCCEx_PeriphCLKConfig>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000338:	f000 f910 	bl	800055c <Error_Handler>
  }
}
 800033c:	bf00      	nop
 800033e:	3750      	adds	r7, #80	; 0x50
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b08a      	sub	sp, #40	; 0x28
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]
 800035a:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000366:	4b24      	ldr	r3, [pc, #144]	; (80003f8 <MX_ADC1_Init+0xb4>)
 8000368:	4a24      	ldr	r2, [pc, #144]	; (80003fc <MX_ADC1_Init+0xb8>)
 800036a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800036c:	4b22      	ldr	r3, [pc, #136]	; (80003f8 <MX_ADC1_Init+0xb4>)
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000372:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <MX_ADC1_Init+0xb4>)
 8000374:	2201      	movs	r2, #1
 8000376:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000378:	4b1f      	ldr	r3, [pc, #124]	; (80003f8 <MX_ADC1_Init+0xb4>)
 800037a:	2200      	movs	r2, #0
 800037c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800037e:	4b1e      	ldr	r3, [pc, #120]	; (80003f8 <MX_ADC1_Init+0xb4>)
 8000380:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000384:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000386:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <MX_ADC1_Init+0xb4>)
 8000388:	2200      	movs	r2, #0
 800038a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800038c:	4b1a      	ldr	r3, [pc, #104]	; (80003f8 <MX_ADC1_Init+0xb4>)
 800038e:	2201      	movs	r2, #1
 8000390:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000392:	4819      	ldr	r0, [pc, #100]	; (80003f8 <MX_ADC1_Init+0xb4>)
 8000394:	f000 faba 	bl	800090c <HAL_ADC_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 800039e:	f000 f8dd 	bl	800055c <Error_Handler>
  }
  /** Configure Analog WatchDog 1 
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80003a2:	4b17      	ldr	r3, [pc, #92]	; (8000400 <MX_ADC1_Init+0xbc>)
 80003a4:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 2012;
 80003a6:	f240 73dc 	movw	r3, #2012	; 0x7dc
 80003aa:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = ENABLE;
 80003b4:	2301      	movs	r3, #1
 80003b6:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	4619      	mov	r1, r3
 80003be:	480e      	ldr	r0, [pc, #56]	; (80003f8 <MX_ADC1_Init+0xb4>)
 80003c0:	f000 fe64 	bl	800108c <HAL_ADC_AnalogWDGConfig>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80003ca:	f000 f8c7 	bl	800055c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d2:	2301      	movs	r3, #1
 80003d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	4619      	mov	r1, r3
 80003de:	4806      	ldr	r0, [pc, #24]	; (80003f8 <MX_ADC1_Init+0xb4>)
 80003e0:	f000 fd5c 	bl	8000e9c <HAL_ADC_ConfigChannel>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80003ea:	f000 f8b7 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ee:	bf00      	nop
 80003f0:	3728      	adds	r7, #40	; 0x28
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000430 	.word	0x20000430
 80003fc:	40012400 	.word	0x40012400
 8000400:	00800200 	.word	0x00800200

08000404 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <MX_DMA_Init+0x38>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a0b      	ldr	r2, [pc, #44]	; (800043c <MX_DMA_Init+0x38>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <MX_DMA_Init+0x38>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	2100      	movs	r1, #0
 8000426:	200b      	movs	r0, #11
 8000428:	f001 f859 	bl	80014de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800042c:	200b      	movs	r0, #11
 800042e:	f001 f872 	bl	8001516 <HAL_NVIC_EnableIRQ>

}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000

08000440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000446:	4b14      	ldr	r3, [pc, #80]	; (8000498 <MX_GPIO_Init+0x58>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a13      	ldr	r2, [pc, #76]	; (8000498 <MX_GPIO_Init+0x58>)
 800044c:	f043 0310 	orr.w	r3, r3, #16
 8000450:	6193      	str	r3, [r2, #24]
 8000452:	4b11      	ldr	r3, [pc, #68]	; (8000498 <MX_GPIO_Init+0x58>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f003 0310 	and.w	r3, r3, #16
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <MX_GPIO_Init+0x58>)
 8000460:	699b      	ldr	r3, [r3, #24]
 8000462:	4a0d      	ldr	r2, [pc, #52]	; (8000498 <MX_GPIO_Init+0x58>)
 8000464:	f043 0320 	orr.w	r3, r3, #32
 8000468:	6193      	str	r3, [r2, #24]
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <MX_GPIO_Init+0x58>)
 800046c:	699b      	ldr	r3, [r3, #24]
 800046e:	f003 0320 	and.w	r3, r3, #32
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <MX_GPIO_Init+0x58>)
 8000478:	699b      	ldr	r3, [r3, #24]
 800047a:	4a07      	ldr	r2, [pc, #28]	; (8000498 <MX_GPIO_Init+0x58>)
 800047c:	f043 0304 	orr.w	r3, r3, #4
 8000480:	6193      	str	r3, [r2, #24]
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <MX_GPIO_Init+0x58>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	f003 0304 	and.w	r3, r3, #4
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	40021000 	.word	0x40021000

0800049c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	WhatBufferPartFull = SecondBufferHalf;
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <HAL_ADC_ConvCpltCallback+0x2c>)
 80004a6:	2216      	movs	r2, #22
 80004a8:	701a      	strb	r2, [r3, #0]
	dataFromADC[0];
	if(WhereIsTrigger == FirstBufferHalf) {
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <HAL_ADC_ConvCpltCallback+0x30>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b0b      	cmp	r3, #11
 80004b0:	d105      	bne.n	80004be <HAL_ADC_ConvCpltCallback+0x22>
		HAL_ADC_Stop_DMA(&hadc1);
 80004b2:	4807      	ldr	r0, [pc, #28]	; (80004d0 <HAL_ADC_ConvCpltCallback+0x34>)
 80004b4:	f000 fbe0 	bl	8000c78 <HAL_ADC_Stop_DMA>
		IsReadyToDataTransmit = True;
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <HAL_ADC_ConvCpltCallback+0x38>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	701a      	strb	r2, [r3, #0]
	}
}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	2000042d 	.word	0x2000042d
 80004cc:	200004b0 	.word	0x200004b0
 80004d0:	20000430 	.word	0x20000430
 80004d4:	2000042c 	.word	0x2000042c

080004d8 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	WhatBufferPartFull = FirstBufferHalf;
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80004e2:	220b      	movs	r2, #11
 80004e4:	701a      	strb	r2, [r3, #0]
	dataFromADC[0];
	if(WhereIsTrigger == SecondBufferHalf) {
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b16      	cmp	r3, #22
 80004ec:	d105      	bne.n	80004fa <HAL_ADC_ConvHalfCpltCallback+0x22>
		HAL_ADC_Stop_DMA(&hadc1);
 80004ee:	4807      	ldr	r0, [pc, #28]	; (800050c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80004f0:	f000 fbc2 	bl	8000c78 <HAL_ADC_Stop_DMA>
		IsReadyToDataTransmit = True;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	701a      	strb	r2, [r3, #0]
	}
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2000042d 	.word	0x2000042d
 8000508:	200004b0 	.word	0x200004b0
 800050c:	20000430 	.word	0x20000430
 8000510:	2000042c 	.word	0x2000042c

08000514 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc) {
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	/*if(WhatBufferPartFull == FirstBufferHalf)
		WhereIsTrigger = SecondBufferHalf;
	else
		WhereIsTrigger = FirstBufferHalf;*/
	switch(WhatBufferPartFull) {
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <HAL_ADC_LevelOutOfWindowCallback+0x3c>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b0b      	cmp	r3, #11
 8000522:	d002      	beq.n	800052a <HAL_ADC_LevelOutOfWindowCallback+0x16>
 8000524:	2b16      	cmp	r3, #22
 8000526:	d004      	beq.n	8000532 <HAL_ADC_LevelOutOfWindowCallback+0x1e>
		case SecondBufferHalf:
			WhereIsTrigger = FirstBufferHalf;
			break;

		default:
			break;
 8000528:	e007      	b.n	800053a <HAL_ADC_LevelOutOfWindowCallback+0x26>
			WhereIsTrigger = SecondBufferHalf;
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_ADC_LevelOutOfWindowCallback+0x40>)
 800052c:	2216      	movs	r2, #22
 800052e:	701a      	strb	r2, [r3, #0]
			break;
 8000530:	e003      	b.n	800053a <HAL_ADC_LevelOutOfWindowCallback+0x26>
			WhereIsTrigger = FirstBufferHalf;
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_ADC_LevelOutOfWindowCallback+0x40>)
 8000534:	220b      	movs	r2, #11
 8000536:	701a      	strb	r2, [r3, #0]
			break;
 8000538:	bf00      	nop
	}
	particleCounter++;
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <HAL_ADC_LevelOutOfWindowCallback+0x44>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	3301      	adds	r3, #1
 8000540:	4a05      	ldr	r2, [pc, #20]	; (8000558 <HAL_ADC_LevelOutOfWindowCallback+0x44>)
 8000542:	6013      	str	r3, [r2, #0]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	2000042d 	.word	0x2000042d
 8000554:	200004b0 	.word	0x200004b0
 8000558:	200004ac 	.word	0x200004ac

0800055c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr

08000568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <HAL_MspInit+0x5c>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <HAL_MspInit+0x5c>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6193      	str	r3, [r2, #24]
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_MspInit+0x5c>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_MspInit+0x5c>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <HAL_MspInit+0x5c>)
 800058c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000590:	61d3      	str	r3, [r2, #28]
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <HAL_MspInit+0x5c>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <HAL_MspInit+0x60>)
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <HAL_MspInit+0x60>)
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40010000 	.word	0x40010000

080005cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a2c      	ldr	r2, [pc, #176]	; (8000698 <HAL_ADC_MspInit+0xcc>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d151      	bne.n	8000690 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <HAL_ADC_MspInit+0xd0>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a2a      	ldr	r2, [pc, #168]	; (800069c <HAL_ADC_MspInit+0xd0>)
 80005f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <HAL_ADC_MspInit+0xd0>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <HAL_ADC_MspInit+0xd0>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a24      	ldr	r2, [pc, #144]	; (800069c <HAL_ADC_MspInit+0xd0>)
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <HAL_ADC_MspInit+0xd0>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800061c:	2301      	movs	r3, #1
 800061e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000620:	2303      	movs	r3, #3
 8000622:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	4619      	mov	r1, r3
 800062a:	481d      	ldr	r0, [pc, #116]	; (80006a0 <HAL_ADC_MspInit+0xd4>)
 800062c:	f001 f9b6 	bl	800199c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000630:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <HAL_ADC_MspInit+0xd8>)
 8000632:	4a1d      	ldr	r2, [pc, #116]	; (80006a8 <HAL_ADC_MspInit+0xdc>)
 8000634:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000636:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <HAL_ADC_MspInit+0xd8>)
 8000638:	2200      	movs	r2, #0
 800063a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <HAL_ADC_MspInit+0xd8>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <HAL_ADC_MspInit+0xd8>)
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <HAL_ADC_MspInit+0xd8>)
 800064a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800064e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <HAL_ADC_MspInit+0xd8>)
 8000652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000656:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_ADC_MspInit+0xd8>)
 800065a:	2220      	movs	r2, #32
 800065c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <HAL_ADC_MspInit+0xd8>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000664:	480f      	ldr	r0, [pc, #60]	; (80006a4 <HAL_ADC_MspInit+0xd8>)
 8000666:	f000 ff71 	bl	800154c <HAL_DMA_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000670:	f7ff ff74 	bl	800055c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <HAL_ADC_MspInit+0xd8>)
 8000678:	621a      	str	r2, [r3, #32]
 800067a:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <HAL_ADC_MspInit+0xd8>)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2100      	movs	r1, #0
 8000684:	2012      	movs	r0, #18
 8000686:	f000 ff2a 	bl	80014de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800068a:	2012      	movs	r0, #18
 800068c:	f000 ff43 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40012400 	.word	0x40012400
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010800 	.word	0x40010800
 80006a4:	20000460 	.word	0x20000460
 80006a8:	40020008 	.word	0x40020008

080006ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <HardFault_Handler+0x4>

080006be <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <MemManage_Handler+0x4>

080006c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <BusFault_Handler+0x4>

080006ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <UsageFault_Handler+0x4>

080006d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f8:	f000 f8ec 	bl	80008d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}

08000700 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000704:	4802      	ldr	r0, [pc, #8]	; (8000710 <DMA1_Channel1_IRQHandler+0x10>)
 8000706:	f001 f815 	bl	8001734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000460 	.word	0x20000460

08000714 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000718:	4802      	ldr	r0, [pc, #8]	; (8000724 <ADC1_2_IRQHandler+0x10>)
 800071a:	f000 faf2 	bl	8000d02 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000430 	.word	0x20000430

08000728 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800072c:	4802      	ldr	r0, [pc, #8]	; (8000738 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800072e:	f001 fb96 	bl	8001e5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	2000181c 	.word	0x2000181c

0800073c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <_sbrk+0x50>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d102      	bne.n	8000752 <_sbrk+0x16>
		heap_end = &end;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <_sbrk+0x50>)
 800074e:	4a10      	ldr	r2, [pc, #64]	; (8000790 <_sbrk+0x54>)
 8000750:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <_sbrk+0x50>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <_sbrk+0x50>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	466a      	mov	r2, sp
 8000762:	4293      	cmp	r3, r2
 8000764:	d907      	bls.n	8000776 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000766:	f005 ff3b 	bl	80065e0 <__errno>
 800076a:	4602      	mov	r2, r0
 800076c:	230c      	movs	r3, #12
 800076e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000770:	f04f 33ff 	mov.w	r3, #4294967295
 8000774:	e006      	b.n	8000784 <_sbrk+0x48>
	}

	heap_end += incr;
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <_sbrk+0x50>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	4a03      	ldr	r2, [pc, #12]	; (800078c <_sbrk+0x50>)
 8000780:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000782:	68fb      	ldr	r3, [r7, #12]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200001fc 	.word	0x200001fc
 8000790:	20001a90 	.word	0x20001a90

08000794 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <SystemInit+0x5c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <SystemInit+0x5c>)
 800079e:	f043 0301 	orr.w	r3, r3, #1
 80007a2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <SystemInit+0x5c>)
 80007a6:	685a      	ldr	r2, [r3, #4]
 80007a8:	4911      	ldr	r1, [pc, #68]	; (80007f0 <SystemInit+0x5c>)
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <SystemInit+0x60>)
 80007ac:	4013      	ands	r3, r2
 80007ae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <SystemInit+0x5c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <SystemInit+0x5c>)
 80007b6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80007ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <SystemInit+0x5c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <SystemInit+0x5c>)
 80007c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <SystemInit+0x5c>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <SystemInit+0x5c>)
 80007d2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80007d6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <SystemInit+0x5c>)
 80007da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80007de:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <SystemInit+0x64>)
 80007e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007e6:	609a      	str	r2, [r3, #8]
#endif 
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	40021000 	.word	0x40021000
 80007f4:	f8ff0000 	.word	0xf8ff0000
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007fe:	e003      	b.n	8000808 <LoopCopyDataInit>

08000800 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000800:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000802:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000804:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000806:	3104      	adds	r1, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000808:	480a      	ldr	r0, [pc, #40]	; (8000834 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800080c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800080e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000810:	d3f6      	bcc.n	8000800 <CopyDataInit>
  ldr r2, =_sbss
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000814:	e002      	b.n	800081c <LoopFillZerobss>

08000816 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000818:	f842 3b04 	str.w	r3, [r2], #4

0800081c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800081e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000820:	d3f9      	bcc.n	8000816 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000822:	f7ff ffb7 	bl	8000794 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000826:	f005 fee1 	bl	80065ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082a:	f7ff fc8f 	bl	800014c <main>
  bx lr
 800082e:	4770      	bx	lr
  ldr r3, =_sidata
 8000830:	080067d0 	.word	0x080067d0
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000838:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 800083c:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8000840:	20001a8c 	.word	0x20001a8c

08000844 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <CAN1_RX1_IRQHandler>
	...

08000848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_Init+0x28>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a07      	ldr	r2, [pc, #28]	; (8000870 <HAL_Init+0x28>)
 8000852:	f043 0310 	orr.w	r3, r3, #16
 8000856:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000858:	2003      	movs	r0, #3
 800085a:	f000 fe35 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085e:	2000      	movs	r0, #0
 8000860:	f000 f808 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000864:	f7ff fe80 	bl	8000568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40022000 	.word	0x40022000

08000874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_InitTick+0x54>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_InitTick+0x58>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4619      	mov	r1, r3
 8000886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088a:	fbb3 f3f1 	udiv	r3, r3, r1
 800088e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fe4d 	bl	8001532 <HAL_SYSTICK_Config>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e00e      	b.n	80008c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b0f      	cmp	r3, #15
 80008a6:	d80a      	bhi.n	80008be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	f000 fe15 	bl	80014de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b4:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <HAL_InitTick+0x5c>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e000      	b.n	80008c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000000 	.word	0x20000000
 80008cc:	20000008 	.word	0x20000008
 80008d0:	20000004 	.word	0x20000004

080008d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_IncTick+0x1c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_IncTick+0x20>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	4a03      	ldr	r2, [pc, #12]	; (80008f4 <HAL_IncTick+0x20>)
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	20000008 	.word	0x20000008
 80008f4:	20000c84 	.word	0x20000c84

080008f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;
 80008fc:	4b02      	ldr	r3, [pc, #8]	; (8000908 <HAL_GetTick+0x10>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	20000c84 	.word	0x20000c84

0800090c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000914:	2300      	movs	r3, #0
 8000916:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d101      	bne.n	800092e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e0be      	b.n	8000aac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000938:	2b00      	cmp	r3, #0
 800093a:	d109      	bne.n	8000950 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2200      	movs	r2, #0
 8000946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff fe3e 	bl	80005cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 fc43 	bl	80011dc <ADC_ConversionStop_Disable>
 8000956:	4603      	mov	r3, r0
 8000958:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095e:	f003 0310 	and.w	r3, r3, #16
 8000962:	2b00      	cmp	r3, #0
 8000964:	f040 8099 	bne.w	8000a9a <HAL_ADC_Init+0x18e>
 8000968:	7dfb      	ldrb	r3, [r7, #23]
 800096a:	2b00      	cmp	r3, #0
 800096c:	f040 8095 	bne.w	8000a9a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000974:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000978:	f023 0302 	bic.w	r3, r3, #2
 800097c:	f043 0202 	orr.w	r2, r3, #2
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800098c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	7b1b      	ldrb	r3, [r3, #12]
 8000992:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000994:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	4313      	orrs	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009a4:	d003      	beq.n	80009ae <HAL_ADC_Init+0xa2>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d102      	bne.n	80009b4 <HAL_ADC_Init+0xa8>
 80009ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b2:	e000      	b.n	80009b6 <HAL_ADC_Init+0xaa>
 80009b4:	2300      	movs	r3, #0
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	7d1b      	ldrb	r3, [r3, #20]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d119      	bne.n	80009f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	7b1b      	ldrb	r3, [r3, #12]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d109      	bne.n	80009e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	035a      	lsls	r2, r3, #13
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	e00b      	b.n	80009f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e4:	f043 0220 	orr.w	r2, r3, #32
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f0:	f043 0201 	orr.w	r2, r3, #1
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	689a      	ldr	r2, [r3, #8]
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <HAL_ADC_Init+0x1a8>)
 8000a14:	4013      	ands	r3, r2
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	6812      	ldr	r2, [r2, #0]
 8000a1a:	68b9      	ldr	r1, [r7, #8]
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a28:	d003      	beq.n	8000a32 <HAL_ADC_Init+0x126>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d104      	bne.n	8000a3c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	051b      	lsls	r3, r3, #20
 8000a3a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a42:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_ADC_Init+0x1ac>)
 8000a58:	4013      	ands	r3, r2
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d10b      	bne.n	8000a78 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a6a:	f023 0303 	bic.w	r3, r3, #3
 8000a6e:	f043 0201 	orr.w	r2, r3, #1
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a76:	e018      	b.n	8000aaa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7c:	f023 0312 	bic.w	r3, r3, #18
 8000a80:	f043 0210 	orr.w	r2, r3, #16
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8c:	f043 0201 	orr.w	r2, r3, #1
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a98:	e007      	b.n	8000aaa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9e:	f043 0210 	orr.w	r2, r3, #16
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	ffe1f7fd 	.word	0xffe1f7fd
 8000ab8:	ff1f0efe 	.word	0xff1f0efe

08000abc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a64      	ldr	r2, [pc, #400]	; (8000c64 <HAL_ADC_Start_DMA+0x1a8>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d004      	beq.n	8000ae0 <HAL_ADC_Start_DMA+0x24>
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a63      	ldr	r2, [pc, #396]	; (8000c68 <HAL_ADC_Start_DMA+0x1ac>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d106      	bne.n	8000aee <HAL_ADC_Start_DMA+0x32>
 8000ae0:	4b60      	ldr	r3, [pc, #384]	; (8000c64 <HAL_ADC_Start_DMA+0x1a8>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f040 80b3 	bne.w	8000c54 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d101      	bne.n	8000afc <HAL_ADC_Start_DMA+0x40>
 8000af8:	2302      	movs	r3, #2
 8000afa:	e0ae      	b.n	8000c5a <HAL_ADC_Start_DMA+0x19e>
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2201      	movs	r2, #1
 8000b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f000 fb17 	bl	8001138 <ADC_Enable>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000b0e:	7dfb      	ldrb	r3, [r7, #23]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	f040 809a 	bne.w	8000c4a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b1e:	f023 0301 	bic.w	r3, r3, #1
 8000b22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a4e      	ldr	r2, [pc, #312]	; (8000c68 <HAL_ADC_Start_DMA+0x1ac>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d105      	bne.n	8000b40 <HAL_ADC_Start_DMA+0x84>
 8000b34:	4b4b      	ldr	r3, [pc, #300]	; (8000c64 <HAL_ADC_Start_DMA+0x1a8>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d115      	bne.n	8000b6c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b44:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d026      	beq.n	8000ba8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b6a:	e01d      	b.n	8000ba8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b70:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a39      	ldr	r2, [pc, #228]	; (8000c64 <HAL_ADC_Start_DMA+0x1a8>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d004      	beq.n	8000b8c <HAL_ADC_Start_DMA+0xd0>
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a38      	ldr	r2, [pc, #224]	; (8000c68 <HAL_ADC_Start_DMA+0x1ac>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d10d      	bne.n	8000ba8 <HAL_ADC_Start_DMA+0xec>
 8000b8c:	4b35      	ldr	r3, [pc, #212]	; (8000c64 <HAL_ADC_Start_DMA+0x1a8>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d007      	beq.n	8000ba8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ba0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d006      	beq.n	8000bc2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb8:	f023 0206 	bic.w	r2, r3, #6
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bc0:	e002      	b.n	8000bc8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	4a25      	ldr	r2, [pc, #148]	; (8000c6c <HAL_ADC_Start_DMA+0x1b0>)
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	6a1b      	ldr	r3, [r3, #32]
 8000bdc:	4a24      	ldr	r2, [pc, #144]	; (8000c70 <HAL_ADC_Start_DMA+0x1b4>)
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	6a1b      	ldr	r3, [r3, #32]
 8000be4:	4a23      	ldr	r2, [pc, #140]	; (8000c74 <HAL_ADC_Start_DMA+0x1b8>)
 8000be6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f06f 0202 	mvn.w	r2, #2
 8000bf0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	689a      	ldr	r2, [r3, #8]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c00:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	6a18      	ldr	r0, [r3, #32]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	334c      	adds	r3, #76	; 0x4c
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f000 fcf5 	bl	8001600 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c20:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c24:	d108      	bne.n	8000c38 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	689a      	ldr	r2, [r3, #8]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000c34:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000c36:	e00f      	b.n	8000c58 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000c46:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000c48:	e006      	b.n	8000c58 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000c52:	e001      	b.n	8000c58 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40012400 	.word	0x40012400
 8000c68:	40012800 	.word	0x40012800
 8000c6c:	08001251 	.word	0x08001251
 8000c70:	080012cd 	.word	0x080012cd
 8000c74:	080012e9 	.word	0x080012e9

08000c78 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d101      	bne.n	8000c92 <HAL_ADC_Stop_DMA+0x1a>
 8000c8e:	2302      	movs	r3, #2
 8000c90:	e033      	b.n	8000cfa <HAL_ADC_Stop_DMA+0x82>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f000 fa9e 	bl	80011dc <ADC_ConversionStop_Disable>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d122      	bne.n	8000cf0 <HAL_ADC_Stop_DMA+0x78>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cb8:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a1b      	ldr	r3, [r3, #32]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fcfd 	bl	80016be <HAL_DMA_Abort>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d10a      	bne.n	8000ce4 <HAL_ADC_Stop_DMA+0x6c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cd6:	f023 0301 	bic.w	r3, r3, #1
 8000cda:	f043 0201 	orr.w	r2, r3, #1
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	629a      	str	r2, [r3, #40]	; 0x28
 8000ce2:	e005      	b.n	8000cf0 <HAL_ADC_Stop_DMA+0x78>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0320 	and.w	r3, r3, #32
 8000d14:	2b20      	cmp	r3, #32
 8000d16:	d140      	bne.n	8000d9a <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d139      	bne.n	8000d9a <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2a:	f003 0310 	and.w	r3, r3, #16
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d105      	bne.n	8000d3e <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d48:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d4c:	d11d      	bne.n	8000d8a <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d119      	bne.n	8000d8a <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	685a      	ldr	r2, [r3, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 0220 	bic.w	r2, r2, #32
 8000d64:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d105      	bne.n	8000d8a <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d82:	f043 0201 	orr.w	r2, r3, #1
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff fb86 	bl	800049c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f06f 0212 	mvn.w	r2, #18
 8000d98:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da4:	2b80      	cmp	r3, #128	; 0x80
 8000da6:	d14f      	bne.n	8000e48 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	2b04      	cmp	r3, #4
 8000db4:	d148      	bne.n	8000e48 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dba:	f003 0310 	and.w	r3, r3, #16
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d105      	bne.n	8000dce <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000dd8:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000ddc:	d012      	beq.n	8000e04 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d125      	bne.n	8000e38 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000df6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000dfa:	d11d      	bne.n	8000e38 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d119      	bne.n	8000e38 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e12:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d105      	bne.n	8000e38 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e30:	f043 0201 	orr.w	r2, r3, #1
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f000 fa6f 	bl	800131c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f06f 020c 	mvn.w	r2, #12
 8000e46:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e52:	2b40      	cmp	r3, #64	; 0x40
 8000e54:	d114      	bne.n	8000e80 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d10d      	bne.n	8000e80 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff fb4f 	bl	8000514 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f06f 0201 	mvn.w	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
	...

08000e9c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d101      	bne.n	8000ebc <HAL_ADC_ConfigChannel+0x20>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e0dc      	b.n	8001076 <HAL_ADC_ConfigChannel+0x1da>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b06      	cmp	r3, #6
 8000eca:	d81c      	bhi.n	8000f06 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	3b05      	subs	r3, #5
 8000ede:	221f      	movs	r2, #31
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	4019      	ands	r1, r3
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	3b05      	subs	r3, #5
 8000ef8:	fa00 f203 	lsl.w	r2, r0, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	430a      	orrs	r2, r1
 8000f02:	635a      	str	r2, [r3, #52]	; 0x34
 8000f04:	e03c      	b.n	8000f80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b0c      	cmp	r3, #12
 8000f0c:	d81c      	bhi.n	8000f48 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3b23      	subs	r3, #35	; 0x23
 8000f20:	221f      	movs	r2, #31
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	4019      	ands	r1, r3
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	6818      	ldr	r0, [r3, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	3b23      	subs	r3, #35	; 0x23
 8000f3a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	430a      	orrs	r2, r1
 8000f44:	631a      	str	r2, [r3, #48]	; 0x30
 8000f46:	e01b      	b.n	8000f80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	3b41      	subs	r3, #65	; 0x41
 8000f5a:	221f      	movs	r2, #31
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	4019      	ands	r1, r3
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	6818      	ldr	r0, [r3, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
 8000f72:	3b41      	subs	r3, #65	; 0x41
 8000f74:	fa00 f203 	lsl.w	r2, r0, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b09      	cmp	r3, #9
 8000f86:	d91c      	bls.n	8000fc2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68d9      	ldr	r1, [r3, #12]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4613      	mov	r3, r2
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	4413      	add	r3, r2
 8000f98:	3b1e      	subs	r3, #30
 8000f9a:	2207      	movs	r2, #7
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	4019      	ands	r1, r3
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	6898      	ldr	r0, [r3, #8]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	3b1e      	subs	r3, #30
 8000fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	e019      	b.n	8000ff6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6919      	ldr	r1, [r3, #16]
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4413      	add	r3, r2
 8000fd2:	2207      	movs	r2, #7
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	4019      	ands	r1, r3
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	6898      	ldr	r0, [r3, #8]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	fa00 f203 	lsl.w	r2, r0, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b10      	cmp	r3, #16
 8000ffc:	d003      	beq.n	8001006 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001002:	2b11      	cmp	r3, #17
 8001004:	d132      	bne.n	800106c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a1d      	ldr	r2, [pc, #116]	; (8001080 <HAL_ADC_ConfigChannel+0x1e4>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d125      	bne.n	800105c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d126      	bne.n	800106c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800102c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b10      	cmp	r3, #16
 8001034:	d11a      	bne.n	800106c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <HAL_ADC_ConfigChannel+0x1e8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a13      	ldr	r2, [pc, #76]	; (8001088 <HAL_ADC_ConfigChannel+0x1ec>)
 800103c:	fba2 2303 	umull	r2, r3, r2, r3
 8001040:	0c9a      	lsrs	r2, r3, #18
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800104c:	e002      	b.n	8001054 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	3b01      	subs	r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f9      	bne.n	800104e <HAL_ADC_ConfigChannel+0x1b2>
 800105a:	e007      	b.n	800106c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	f043 0220 	orr.w	r2, r3, #32
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	40012400 	.word	0x40012400
 8001084:	20000000 	.word	0x20000000
 8001088:	431bde83 	.word	0x431bde83

0800108c <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a24      	ldr	r2, [pc, #144]	; (800112c <HAL_ADC_AnalogWDGConfig+0xa0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d003      	beq.n	80010a8 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80010a4:	4a22      	ldr	r2, [pc, #136]	; (8001130 <HAL_ADC_AnalogWDGConfig+0xa4>)
 80010a6:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d101      	bne.n	80010b6 <HAL_ADC_AnalogWDGConfig+0x2a>
 80010b2:	2302      	movs	r3, #2
 80010b4:	e035      	b.n	8001122 <HAL_ADC_AnalogWDGConfig+0x96>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	7a1b      	ldrb	r3, [r3, #8]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d108      	bne.n	80010d8 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	e007      	b.n	80010e8 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010e6:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_ADC_AnalogWDGConfig+0xa8>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	6811      	ldr	r1, [r2, #0]
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	6852      	ldr	r2, [r2, #4]
 80010fa:	4311      	orrs	r1, r2
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	430b      	orrs	r3, r1
 8001102:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	68d2      	ldr	r2, [r2, #12]
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	6912      	ldr	r2, [r2, #16]
 8001116:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	00800200 	.word	0x00800200
 8001130:	00400200 	.word	0x00400200
 8001134:	ff3ffde0 	.word	0xff3ffde0

08001138 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b01      	cmp	r3, #1
 8001154:	d039      	beq.n	80011ca <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f042 0201 	orr.w	r2, r2, #1
 8001164:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <ADC_Enable+0x9c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a1b      	ldr	r2, [pc, #108]	; (80011d8 <ADC_Enable+0xa0>)
 800116c:	fba2 2303 	umull	r2, r3, r2, r3
 8001170:	0c9b      	lsrs	r3, r3, #18
 8001172:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001174:	e002      	b.n	800117c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	3b01      	subs	r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f9      	bne.n	8001176 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001182:	f7ff fbb9 	bl	80008f8 <HAL_GetTick>
 8001186:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001188:	e018      	b.n	80011bc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800118a:	f7ff fbb5 	bl	80008f8 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d911      	bls.n	80011bc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119c:	f043 0210 	orr.w	r2, r3, #16
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a8:	f043 0201 	orr.w	r2, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e007      	b.n	80011cc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d1df      	bne.n	800118a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000000 	.word	0x20000000
 80011d8:	431bde83 	.word	0x431bde83

080011dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d127      	bne.n	8001246 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0201 	bic.w	r2, r2, #1
 8001204:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001206:	f7ff fb77 	bl	80008f8 <HAL_GetTick>
 800120a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800120c:	e014      	b.n	8001238 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800120e:	f7ff fb73 	bl	80008f8 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d90d      	bls.n	8001238 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001220:	f043 0210 	orr.w	r2, r3, #16
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	f043 0201 	orr.w	r2, r3, #1
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e007      	b.n	8001248 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b01      	cmp	r3, #1
 8001244:	d0e3      	beq.n	800120e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001262:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001266:	2b00      	cmp	r3, #0
 8001268:	d127      	bne.n	80012ba <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001280:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001284:	d115      	bne.n	80012b2 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800128a:	2b00      	cmp	r3, #0
 800128c:	d111      	bne.n	80012b2 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001292:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d105      	bne.n	80012b2 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7ff f8f2 	bl	800049c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80012b8:	e004      	b.n	80012c4 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	4798      	blx	r3
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f7ff f8fc 	bl	80004d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001306:	f043 0204 	orr.w	r2, r3, #4
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f7ff fdba 	bl	8000e88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
	...

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0b      	blt.n	80013be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	4906      	ldr	r1, [pc, #24]	; (80013c8 <__NVIC_EnableIRQ+0x34>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001494:	d301      	bcc.n	800149a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001496:	2301      	movs	r3, #1
 8001498:	e00f      	b.n	80014ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <SysTick_Config+0x40>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a2:	210f      	movs	r1, #15
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f7ff ff90 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <SysTick_Config+0x40>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <SysTick_Config+0x40>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff2d 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f0:	f7ff ff42 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ff90 	bl	8001420 <NVIC_EncodePriority>
 8001500:	4602      	mov	r2, r0
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff5f 	bl	80013cc <__NVIC_SetPriority>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff35 	bl	8001394 <__NVIC_EnableIRQ>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffa2 	bl	8001484 <SysTick_Config>
 8001540:	4603      	mov	r3, r0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e043      	b.n	80015ea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <HAL_DMA_Init+0xa8>)
 800156a:	4413      	add	r3, r2
 800156c:	4a22      	ldr	r2, [pc, #136]	; (80015f8 <HAL_DMA_Init+0xac>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	009a      	lsls	r2, r3, #2
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a1f      	ldr	r2, [pc, #124]	; (80015fc <HAL_DMA_Init+0xb0>)
 800157e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2202      	movs	r2, #2
 8001584:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001596:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800159a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	bffdfff8 	.word	0xbffdfff8
 80015f8:	cccccccd 	.word	0xcccccccd
 80015fc:	40020000 	.word	0x40020000

08001600 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d101      	bne.n	8001620 <HAL_DMA_Start_IT+0x20>
 800161c:	2302      	movs	r3, #2
 800161e:	e04a      	b.n	80016b6 <HAL_DMA_Start_IT+0xb6>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800162e:	2b01      	cmp	r3, #1
 8001630:	d13a      	bne.n	80016a8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2202      	movs	r2, #2
 8001636:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0201 	bic.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f972 	bl	8001940 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	2b00      	cmp	r3, #0
 8001662:	d008      	beq.n	8001676 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 020e 	orr.w	r2, r2, #14
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	e00f      	b.n	8001696 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0204 	bic.w	r2, r2, #4
 8001684:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 020a 	orr.w	r2, r2, #10
 8001694:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f042 0201 	orr.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e005      	b.n	80016b4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80016b0:	2302      	movs	r3, #2
 80016b2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016be:	b480      	push	{r7}
 80016c0:	b085      	sub	sp, #20
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d008      	beq.n	80016e6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2204      	movs	r2, #4
 80016d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e020      	b.n	8001728 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 020e 	bic.w	r2, r2, #14
 80016f4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0201 	bic.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170e:	2101      	movs	r1, #1
 8001710:	fa01 f202 	lsl.w	r2, r1, r2
 8001714:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001726:	7bfb      	ldrb	r3, [r7, #15]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
	...

08001734 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	2204      	movs	r2, #4
 8001752:	409a      	lsls	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d04f      	beq.n	80017fc <HAL_DMA_IRQHandler+0xc8>
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	2b00      	cmp	r3, #0
 8001764:	d04a      	beq.n	80017fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0320 	and.w	r3, r3, #32
 8001770:	2b00      	cmp	r3, #0
 8001772:	d107      	bne.n	8001784 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0204 	bic.w	r2, r2, #4
 8001782:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a66      	ldr	r2, [pc, #408]	; (8001924 <HAL_DMA_IRQHandler+0x1f0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d029      	beq.n	80017e2 <HAL_DMA_IRQHandler+0xae>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a65      	ldr	r2, [pc, #404]	; (8001928 <HAL_DMA_IRQHandler+0x1f4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d022      	beq.n	80017de <HAL_DMA_IRQHandler+0xaa>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a63      	ldr	r2, [pc, #396]	; (800192c <HAL_DMA_IRQHandler+0x1f8>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d01a      	beq.n	80017d8 <HAL_DMA_IRQHandler+0xa4>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a62      	ldr	r2, [pc, #392]	; (8001930 <HAL_DMA_IRQHandler+0x1fc>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d012      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x9e>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a60      	ldr	r2, [pc, #384]	; (8001934 <HAL_DMA_IRQHandler+0x200>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d00a      	beq.n	80017cc <HAL_DMA_IRQHandler+0x98>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a5f      	ldr	r2, [pc, #380]	; (8001938 <HAL_DMA_IRQHandler+0x204>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d102      	bne.n	80017c6 <HAL_DMA_IRQHandler+0x92>
 80017c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017c4:	e00e      	b.n	80017e4 <HAL_DMA_IRQHandler+0xb0>
 80017c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017ca:	e00b      	b.n	80017e4 <HAL_DMA_IRQHandler+0xb0>
 80017cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017d0:	e008      	b.n	80017e4 <HAL_DMA_IRQHandler+0xb0>
 80017d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017d6:	e005      	b.n	80017e4 <HAL_DMA_IRQHandler+0xb0>
 80017d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017dc:	e002      	b.n	80017e4 <HAL_DMA_IRQHandler+0xb0>
 80017de:	2340      	movs	r3, #64	; 0x40
 80017e0:	e000      	b.n	80017e4 <HAL_DMA_IRQHandler+0xb0>
 80017e2:	2304      	movs	r3, #4
 80017e4:	4a55      	ldr	r2, [pc, #340]	; (800193c <HAL_DMA_IRQHandler+0x208>)
 80017e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 8094 	beq.w	800191a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017fa:	e08e      	b.n	800191a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	2202      	movs	r2, #2
 8001802:	409a      	lsls	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d056      	beq.n	80018ba <HAL_DMA_IRQHandler+0x186>
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d051      	beq.n	80018ba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0320 	and.w	r3, r3, #32
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10b      	bne.n	800183c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 020a 	bic.w	r2, r2, #10
 8001832:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a38      	ldr	r2, [pc, #224]	; (8001924 <HAL_DMA_IRQHandler+0x1f0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d029      	beq.n	800189a <HAL_DMA_IRQHandler+0x166>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a37      	ldr	r2, [pc, #220]	; (8001928 <HAL_DMA_IRQHandler+0x1f4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d022      	beq.n	8001896 <HAL_DMA_IRQHandler+0x162>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a35      	ldr	r2, [pc, #212]	; (800192c <HAL_DMA_IRQHandler+0x1f8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d01a      	beq.n	8001890 <HAL_DMA_IRQHandler+0x15c>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a34      	ldr	r2, [pc, #208]	; (8001930 <HAL_DMA_IRQHandler+0x1fc>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d012      	beq.n	800188a <HAL_DMA_IRQHandler+0x156>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a32      	ldr	r2, [pc, #200]	; (8001934 <HAL_DMA_IRQHandler+0x200>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00a      	beq.n	8001884 <HAL_DMA_IRQHandler+0x150>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a31      	ldr	r2, [pc, #196]	; (8001938 <HAL_DMA_IRQHandler+0x204>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d102      	bne.n	800187e <HAL_DMA_IRQHandler+0x14a>
 8001878:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800187c:	e00e      	b.n	800189c <HAL_DMA_IRQHandler+0x168>
 800187e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001882:	e00b      	b.n	800189c <HAL_DMA_IRQHandler+0x168>
 8001884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001888:	e008      	b.n	800189c <HAL_DMA_IRQHandler+0x168>
 800188a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800188e:	e005      	b.n	800189c <HAL_DMA_IRQHandler+0x168>
 8001890:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001894:	e002      	b.n	800189c <HAL_DMA_IRQHandler+0x168>
 8001896:	2320      	movs	r3, #32
 8001898:	e000      	b.n	800189c <HAL_DMA_IRQHandler+0x168>
 800189a:	2302      	movs	r3, #2
 800189c:	4a27      	ldr	r2, [pc, #156]	; (800193c <HAL_DMA_IRQHandler+0x208>)
 800189e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d034      	beq.n	800191a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018b8:	e02f      	b.n	800191a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	2208      	movs	r2, #8
 80018c0:	409a      	lsls	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d028      	beq.n	800191c <HAL_DMA_IRQHandler+0x1e8>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d023      	beq.n	800191c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 020e 	bic.w	r2, r2, #14
 80018e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ec:	2101      	movs	r1, #1
 80018ee:	fa01 f202 	lsl.w	r2, r1, r2
 80018f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	2b00      	cmp	r3, #0
 8001910:	d004      	beq.n	800191c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	4798      	blx	r3
    }
  }
  return;
 800191a:	bf00      	nop
 800191c:	bf00      	nop
}
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40020008 	.word	0x40020008
 8001928:	4002001c 	.word	0x4002001c
 800192c:	40020030 	.word	0x40020030
 8001930:	40020044 	.word	0x40020044
 8001934:	40020058 	.word	0x40020058
 8001938:	4002006c 	.word	0x4002006c
 800193c:	40020000 	.word	0x40020000

08001940 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001956:	2101      	movs	r1, #1
 8001958:	fa01 f202 	lsl.w	r2, r1, r2
 800195c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b10      	cmp	r3, #16
 800196c:	d108      	bne.n	8001980 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800197e:	e007      	b.n	8001990 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	60da      	str	r2, [r3, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
	...

0800199c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800199c:	b480      	push	{r7}
 800199e:	b08b      	sub	sp, #44	; 0x2c
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ae:	e127      	b.n	8001c00 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019b0:	2201      	movs	r2, #1
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	f040 8116 	bne.w	8001bfa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b12      	cmp	r3, #18
 80019d4:	d034      	beq.n	8001a40 <HAL_GPIO_Init+0xa4>
 80019d6:	2b12      	cmp	r3, #18
 80019d8:	d80d      	bhi.n	80019f6 <HAL_GPIO_Init+0x5a>
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d02b      	beq.n	8001a36 <HAL_GPIO_Init+0x9a>
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d804      	bhi.n	80019ec <HAL_GPIO_Init+0x50>
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d031      	beq.n	8001a4a <HAL_GPIO_Init+0xae>
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d01c      	beq.n	8001a24 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ea:	e048      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d043      	beq.n	8001a78 <HAL_GPIO_Init+0xdc>
 80019f0:	2b11      	cmp	r3, #17
 80019f2:	d01b      	beq.n	8001a2c <HAL_GPIO_Init+0x90>
          break;
 80019f4:	e043      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019f6:	4a89      	ldr	r2, [pc, #548]	; (8001c1c <HAL_GPIO_Init+0x280>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d026      	beq.n	8001a4a <HAL_GPIO_Init+0xae>
 80019fc:	4a87      	ldr	r2, [pc, #540]	; (8001c1c <HAL_GPIO_Init+0x280>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d806      	bhi.n	8001a10 <HAL_GPIO_Init+0x74>
 8001a02:	4a87      	ldr	r2, [pc, #540]	; (8001c20 <HAL_GPIO_Init+0x284>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d020      	beq.n	8001a4a <HAL_GPIO_Init+0xae>
 8001a08:	4a86      	ldr	r2, [pc, #536]	; (8001c24 <HAL_GPIO_Init+0x288>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d01d      	beq.n	8001a4a <HAL_GPIO_Init+0xae>
          break;
 8001a0e:	e036      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a10:	4a85      	ldr	r2, [pc, #532]	; (8001c28 <HAL_GPIO_Init+0x28c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d019      	beq.n	8001a4a <HAL_GPIO_Init+0xae>
 8001a16:	4a85      	ldr	r2, [pc, #532]	; (8001c2c <HAL_GPIO_Init+0x290>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d016      	beq.n	8001a4a <HAL_GPIO_Init+0xae>
 8001a1c:	4a84      	ldr	r2, [pc, #528]	; (8001c30 <HAL_GPIO_Init+0x294>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d013      	beq.n	8001a4a <HAL_GPIO_Init+0xae>
          break;
 8001a22:	e02c      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	623b      	str	r3, [r7, #32]
          break;
 8001a2a:	e028      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	3304      	adds	r3, #4
 8001a32:	623b      	str	r3, [r7, #32]
          break;
 8001a34:	e023      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	623b      	str	r3, [r7, #32]
          break;
 8001a3e:	e01e      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	330c      	adds	r3, #12
 8001a46:	623b      	str	r3, [r7, #32]
          break;
 8001a48:	e019      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d102      	bne.n	8001a58 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a52:	2304      	movs	r3, #4
 8001a54:	623b      	str	r3, [r7, #32]
          break;
 8001a56:	e012      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a60:	2308      	movs	r3, #8
 8001a62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	611a      	str	r2, [r3, #16]
          break;
 8001a6a:	e008      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	615a      	str	r2, [r3, #20]
          break;
 8001a76:	e002      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
          break;
 8001a7c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	2bff      	cmp	r3, #255	; 0xff
 8001a82:	d801      	bhi.n	8001a88 <HAL_GPIO_Init+0xec>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	e001      	b.n	8001a8c <HAL_GPIO_Init+0xf0>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	2bff      	cmp	r3, #255	; 0xff
 8001a92:	d802      	bhi.n	8001a9a <HAL_GPIO_Init+0xfe>
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	e002      	b.n	8001aa0 <HAL_GPIO_Init+0x104>
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	3b08      	subs	r3, #8
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	6a39      	ldr	r1, [r7, #32]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	431a      	orrs	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 8096 	beq.w	8001bfa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ace:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <HAL_GPIO_Init+0x298>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	4a58      	ldr	r2, [pc, #352]	; (8001c34 <HAL_GPIO_Init+0x298>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6193      	str	r3, [r2, #24]
 8001ada:	4b56      	ldr	r3, [pc, #344]	; (8001c34 <HAL_GPIO_Init+0x298>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ae6:	4a54      	ldr	r2, [pc, #336]	; (8001c38 <HAL_GPIO_Init+0x29c>)
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	089b      	lsrs	r3, r3, #2
 8001aec:	3302      	adds	r3, #2
 8001aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	220f      	movs	r2, #15
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4013      	ands	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4b      	ldr	r2, [pc, #300]	; (8001c3c <HAL_GPIO_Init+0x2a0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_GPIO_Init+0x19e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4a      	ldr	r2, [pc, #296]	; (8001c40 <HAL_GPIO_Init+0x2a4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d00d      	beq.n	8001b36 <HAL_GPIO_Init+0x19a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a49      	ldr	r2, [pc, #292]	; (8001c44 <HAL_GPIO_Init+0x2a8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d007      	beq.n	8001b32 <HAL_GPIO_Init+0x196>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a48      	ldr	r2, [pc, #288]	; (8001c48 <HAL_GPIO_Init+0x2ac>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_GPIO_Init+0x192>
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x1a0>
 8001b2e:	2304      	movs	r3, #4
 8001b30:	e004      	b.n	8001b3c <HAL_GPIO_Init+0x1a0>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e002      	b.n	8001b3c <HAL_GPIO_Init+0x1a0>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_GPIO_Init+0x1a0>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3e:	f002 0203 	and.w	r2, r2, #3
 8001b42:	0092      	lsls	r2, r2, #2
 8001b44:	4093      	lsls	r3, r2
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b4c:	493a      	ldr	r1, [pc, #232]	; (8001c38 <HAL_GPIO_Init+0x29c>)
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	3302      	adds	r3, #2
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b66:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4938      	ldr	r1, [pc, #224]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
 8001b72:	e006      	b.n	8001b82 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b74:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	4933      	ldr	r1, [pc, #204]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d006      	beq.n	8001b9c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b8e:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	492e      	ldr	r1, [pc, #184]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
 8001b9a:	e006      	b.n	8001baa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	4929      	ldr	r1, [pc, #164]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d006      	beq.n	8001bc4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bb6:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	4924      	ldr	r1, [pc, #144]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
 8001bc2:	e006      	b.n	8001bd2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	491f      	ldr	r1, [pc, #124]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d006      	beq.n	8001bec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	491a      	ldr	r1, [pc, #104]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	60cb      	str	r3, [r1, #12]
 8001bea:	e006      	b.n	8001bfa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bec:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	4915      	ldr	r1, [pc, #84]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f47f aed0 	bne.w	80019b0 <HAL_GPIO_Init+0x14>
  }
}
 8001c10:	bf00      	nop
 8001c12:	372c      	adds	r7, #44	; 0x2c
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	10210000 	.word	0x10210000
 8001c20:	10110000 	.word	0x10110000
 8001c24:	10120000 	.word	0x10120000
 8001c28:	10310000 	.word	0x10310000
 8001c2c:	10320000 	.word	0x10320000
 8001c30:	10220000 	.word	0x10220000
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010000 	.word	0x40010000
 8001c3c:	40010800 	.word	0x40010800
 8001c40:	40010c00 	.word	0x40010c00
 8001c44:	40011000 	.word	0x40011000
 8001c48:	40011400 	.word	0x40011400
 8001c4c:	40010400 	.word	0x40010400

08001c50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c52:	b08b      	sub	sp, #44	; 0x2c
 8001c54:	af06      	add	r7, sp, #24
 8001c56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0d3      	b.n	8001e0a <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d106      	bne.n	8001c7c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f004 fa14 	bl	80060a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2203      	movs	r2, #3
 8001c80:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f001 fb8a 	bl	80033a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	687e      	ldr	r6, [r7, #4]
 8001c96:	466d      	mov	r5, sp
 8001c98:	f106 0410 	add.w	r4, r6, #16
 8001c9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca0:	6823      	ldr	r3, [r4, #0]
 8001ca2:	602b      	str	r3, [r5, #0]
 8001ca4:	1d33      	adds	r3, r6, #4
 8001ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ca8:	6838      	ldr	r0, [r7, #0]
 8001caa:	f001 fb53 	bl	8003354 <USB_CoreInit>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0a4      	b.n	8001e0a <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f001 fb87 	bl	80033da <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	73fb      	strb	r3, [r7, #15]
 8001cd0:	e035      	b.n	8001d3e <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	015b      	lsls	r3, r3, #5
 8001cd8:	4413      	add	r3, r2
 8001cda:	3329      	adds	r3, #41	; 0x29
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	015b      	lsls	r3, r3, #5
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3328      	adds	r3, #40	; 0x28
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	b291      	uxth	r1, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	015b      	lsls	r3, r3, #5
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3336      	adds	r3, #54	; 0x36
 8001cfc:	460a      	mov	r2, r1
 8001cfe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	015b      	lsls	r3, r3, #5
 8001d06:	4413      	add	r3, r2
 8001d08:	332b      	adds	r3, #43	; 0x2b
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	015b      	lsls	r3, r3, #5
 8001d14:	4413      	add	r3, r2
 8001d16:	3338      	adds	r3, #56	; 0x38
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	015b      	lsls	r3, r3, #5
 8001d22:	4413      	add	r3, r2
 8001d24:	333c      	adds	r3, #60	; 0x3c
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	3302      	adds	r3, #2
 8001d30:	015b      	lsls	r3, r3, #5
 8001d32:	4413      	add	r3, r2
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d3c4      	bcc.n	8001cd2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	e031      	b.n	8001db2 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	015b      	lsls	r3, r3, #5
 8001d54:	4413      	add	r3, r2
 8001d56:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	015b      	lsls	r3, r3, #5
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	015b      	lsls	r3, r3, #5
 8001d74:	4413      	add	r3, r2
 8001d76:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	015b      	lsls	r3, r3, #5
 8001d84:	4413      	add	r3, r2
 8001d86:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	015b      	lsls	r3, r3, #5
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	330a      	adds	r3, #10
 8001da4:	015b      	lsls	r3, r3, #5
 8001da6:	4413      	add	r3, r2
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
 8001dae:	3301      	adds	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d3c8      	bcc.n	8001d4e <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	687e      	ldr	r6, [r7, #4]
 8001dc4:	466d      	mov	r5, sp
 8001dc6:	f106 0410 	add.w	r4, r6, #16
 8001dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	602b      	str	r3, [r5, #0]
 8001dd2:	1d33      	adds	r3, r6, #4
 8001dd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dd6:	6838      	ldr	r0, [r7, #0]
 8001dd8:	f001 fb0b 	bl	80033f2 <USB_DevInit>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2202      	movs	r2, #2
 8001de6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00d      	b.n	8001e0a <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 fb49 	bl	800449a <USB_DevDisconnect>

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e12 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_PCD_Start+0x16>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e016      	b.n	8001e56 <HAL_PCD_Start+0x44>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001e30:	2101      	movs	r1, #1
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f004 fb9d 	bl	8006572 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f002 fb22 	bl	8004486 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f001 fa94 	bl	8003374 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f002 fb1f 	bl	80044ae <USB_ReadInterrupts>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e7a:	d102      	bne.n	8001e82 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 faf3 	bl	8002468 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 fb11 	bl	80044ae <USB_ReadInterrupts>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e96:	d112      	bne.n	8001ebe <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eaa:	b292      	uxth	r2, r2
 8001eac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f004 f96c 	bl	800618e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f8de 	bl	800207a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f002 faf3 	bl	80044ae <USB_ReadInterrupts>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ed2:	d10b      	bne.n	8001eec <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ee6:	b292      	uxth	r2, r2
 8001ee8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f002 fadc 	bl	80044ae <USB_ReadInterrupts>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f00:	d10b      	bne.n	8001f1a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f14:	b292      	uxth	r2, r2
 8001f16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f002 fac5 	bl	80044ae <USB_ReadInterrupts>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f2e:	d126      	bne.n	8001f7e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0204 	bic.w	r2, r2, #4
 8001f42:	b292      	uxth	r2, r2
 8001f44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0208 	bic.w	r2, r2, #8
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f004 f94d 	bl	8006200 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f78:	b292      	uxth	r2, r2
 8001f7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f002 fa93 	bl	80044ae <USB_ReadInterrupts>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f92:	d13d      	bne.n	8002010 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0208 	orr.w	r2, r2, #8
 8001fa6:	b292      	uxth	r2, r2
 8001fa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fbe:	b292      	uxth	r2, r2
 8001fc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0204 	orr.w	r2, r2, #4
 8001fd6:	b292      	uxth	r2, r2
 8001fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f002 fa64 	bl	80044ae <USB_ReadInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ff0:	d10b      	bne.n	800200a <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002004:	b292      	uxth	r2, r2
 8002006:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f004 f8de 	bl	80061cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f002 fa4a 	bl	80044ae <USB_ReadInterrupts>
 800201a:	4603      	mov	r3, r0
 800201c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002024:	d10e      	bne.n	8002044 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800202e:	b29a      	uxth	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002038:	b292      	uxth	r2, r2
 800203a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f004 f897 	bl	8006172 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f002 fa30 	bl	80044ae <USB_ReadInterrupts>
 800204e:	4603      	mov	r3, r0
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002058:	d10b      	bne.n	8002072 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002062:	b29a      	uxth	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800206c:	b292      	uxth	r2, r2
 800206e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_PCD_SetAddress+0x1a>
 8002090:	2302      	movs	r3, #2
 8002092:	e013      	b.n	80020bc <HAL_PCD_SetAddress+0x42>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	78fa      	ldrb	r2, [r7, #3]
 80020a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f002 f9d7 	bl	8004460 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	4608      	mov	r0, r1
 80020ce:	4611      	mov	r1, r2
 80020d0:	461a      	mov	r2, r3
 80020d2:	4603      	mov	r3, r0
 80020d4:	70fb      	strb	r3, [r7, #3]
 80020d6:	460b      	mov	r3, r1
 80020d8:	803b      	strh	r3, [r7, #0]
 80020da:	4613      	mov	r3, r2
 80020dc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	da0b      	bge.n	8002102 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	015b      	lsls	r3, r3, #5
 80020f2:	3328      	adds	r3, #40	; 0x28
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	4413      	add	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	705a      	strb	r2, [r3, #1]
 8002100:	e00b      	b.n	800211a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	015b      	lsls	r3, r3, #5
 800210a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800211a:	78fb      	ldrb	r3, [r7, #3]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	b2da      	uxtb	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002126:	883a      	ldrh	r2, [r7, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	78ba      	ldrb	r2, [r7, #2]
 8002130:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	785b      	ldrb	r3, [r3, #1]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d004      	beq.n	8002144 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002144:	78bb      	ldrb	r3, [r7, #2]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d102      	bne.n	8002150 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_PCD_EP_Open+0x9a>
 800215a:	2302      	movs	r3, #2
 800215c:	e00e      	b.n	800217c <HAL_PCD_EP_Open+0xb8>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68f9      	ldr	r1, [r7, #12]
 800216c:	4618      	mov	r0, r3
 800216e:	f001 f965 	bl	800343c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800217a:	7afb      	ldrb	r3, [r7, #11]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002190:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002194:	2b00      	cmp	r3, #0
 8002196:	da0b      	bge.n	80021b0 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	015b      	lsls	r3, r3, #5
 80021a0:	3328      	adds	r3, #40	; 0x28
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	705a      	strb	r2, [r3, #1]
 80021ae:	e00b      	b.n	80021c8 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	015b      	lsls	r3, r3, #5
 80021b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	4413      	add	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_PCD_EP_Close+0x5e>
 80021de:	2302      	movs	r3, #2
 80021e0:	e00e      	b.n	8002200 <HAL_PCD_EP_Close+0x7c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68f9      	ldr	r1, [r7, #12]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f001 fc11 	bl	8003a18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	460b      	mov	r3, r1
 8002216:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002218:	7afb      	ldrb	r3, [r7, #11]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	015b      	lsls	r3, r3, #5
 8002220:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2200      	movs	r2, #0
 800223a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2200      	movs	r2, #0
 8002240:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002242:	7afb      	ldrb	r3, [r7, #11]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	b2da      	uxtb	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800224e:	7afb      	ldrb	r3, [r7, #11]
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	2b00      	cmp	r3, #0
 8002256:	d106      	bne.n	8002266 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6979      	ldr	r1, [r7, #20]
 800225e:	4618      	mov	r0, r3
 8002260:	f001 fd70 	bl	8003d44 <USB_EPStartXfer>
 8002264:	e005      	b.n	8002272 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6979      	ldr	r1, [r7, #20]
 800226c:	4618      	mov	r0, r3
 800226e:	f001 fd69 	bl	8003d44 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	330a      	adds	r3, #10
 8002292:	015b      	lsls	r3, r3, #5
 8002294:	4413      	add	r3, r2
 8002296:	3304      	adds	r3, #4
 8002298:	681b      	ldr	r3, [r3, #0]
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	460b      	mov	r3, r1
 80022b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022b4:	7afb      	ldrb	r3, [r7, #11]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	015b      	lsls	r3, r3, #5
 80022bc:	3328      	adds	r3, #40	; 0x28
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4413      	add	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2201      	movs	r2, #1
 80022da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022dc:	7afb      	ldrb	r3, [r7, #11]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022e8:	7afb      	ldrb	r3, [r7, #11]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6979      	ldr	r1, [r7, #20]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f001 fd23 	bl	8003d44 <USB_EPStartXfer>
 80022fe:	e005      	b.n	800230c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6979      	ldr	r1, [r7, #20]
 8002306:	4618      	mov	r0, r3
 8002308:	f001 fd1c 	bl	8003d44 <USB_EPStartXfer>
  }

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	460b      	mov	r3, r1
 8002320:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	f003 0207 	and.w	r2, r3, #7
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	d901      	bls.n	8002334 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e046      	b.n	80023c2 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002338:	2b00      	cmp	r3, #0
 800233a:	da0b      	bge.n	8002354 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	015b      	lsls	r3, r3, #5
 8002344:	3328      	adds	r3, #40	; 0x28
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2201      	movs	r2, #1
 8002350:	705a      	strb	r2, [r3, #1]
 8002352:	e009      	b.n	8002368 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002354:	78fb      	ldrb	r3, [r7, #3]
 8002356:	015b      	lsls	r3, r3, #5
 8002358:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800236e:	78fb      	ldrb	r3, [r7, #3]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	b2da      	uxtb	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_PCD_EP_SetStall+0x72>
 8002384:	2302      	movs	r3, #2
 8002386:	e01c      	b.n	80023c2 <HAL_PCD_EP_SetStall+0xac>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68f9      	ldr	r1, [r7, #12]
 8002396:	4618      	mov	r0, r3
 8002398:	f001 ff8c 	bl	80042b4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d108      	bne.n	80023b8 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80023b0:	4619      	mov	r1, r3
 80023b2:	4610      	mov	r0, r2
 80023b4:	f002 f88a 	bl	80044cc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b084      	sub	sp, #16
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	460b      	mov	r3, r1
 80023d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	f003 020f 	and.w	r2, r3, #15
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d901      	bls.n	80023e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e03a      	b.n	800245e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	da0b      	bge.n	8002408 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	015b      	lsls	r3, r3, #5
 80023f8:	3328      	adds	r3, #40	; 0x28
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	705a      	strb	r2, [r3, #1]
 8002406:	e00b      	b.n	8002420 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	015b      	lsls	r3, r3, #5
 8002410:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	b2da      	uxtb	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_PCD_EP_ClrStall+0x76>
 800243c:	2302      	movs	r3, #2
 800243e:	e00e      	b.n	800245e <HAL_PCD_EP_ClrStall+0x94>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68f9      	ldr	r1, [r7, #12]
 800244e:	4618      	mov	r0, r3
 8002450:	f001 ff72 	bl	8004338 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002470:	e282      	b.n	8002978 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800247a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800247c:	8afb      	ldrh	r3, [r7, #22]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002486:	7d7b      	ldrb	r3, [r7, #21]
 8002488:	2b00      	cmp	r3, #0
 800248a:	f040 8142 	bne.w	8002712 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800248e:	8afb      	ldrh	r3, [r7, #22]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b00      	cmp	r3, #0
 8002496:	d151      	bne.n	800253c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	b29b      	uxth	r3, r3
 80024a0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a8:	b29c      	uxth	r4, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80024b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3328      	adds	r3, #40	; 0x28
 80024be:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	3302      	adds	r3, #2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	441a      	add	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024fa:	2100      	movs	r1, #0
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f003 fe21 	bl	8006144 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8234 	beq.w	8002978 <PCD_EP_ISR_Handler+0x510>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f040 822f 	bne.w	8002978 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002526:	b2da      	uxtb	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	b292      	uxth	r2, r2
 800252e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800253a:	e21d      	b.n	8002978 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002542:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800254c:	8a7b      	ldrh	r3, [r7, #18]
 800254e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002552:	2b00      	cmp	r3, #0
 8002554:	d033      	beq.n	80025be <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255e:	b29b      	uxth	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	3306      	adds	r3, #6
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	4413      	add	r3, r2
 8002574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002594:	b29b      	uxth	r3, r3
 8002596:	f001 ffe8 	bl	800456a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025a6:	4013      	ands	r3, r2
 80025a8:	b29c      	uxth	r4, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80025b2:	b292      	uxth	r2, r2
 80025b4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f003 fd9a 	bl	80060f0 <HAL_PCD_SetupStageCallback>
 80025bc:	e1dc      	b.n	8002978 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f280 81d8 	bge.w	8002978 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025d4:	4013      	ands	r3, r2
 80025d6:	b29c      	uxth	r4, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80025e0:	b292      	uxth	r2, r2
 80025e2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	3306      	adds	r3, #6
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	4413      	add	r3, r2
 8002602:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d019      	beq.n	800264c <PCD_EP_ISR_Handler+0x1e4>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d015      	beq.n	800264c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6959      	ldr	r1, [r3, #20]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002630:	b29b      	uxth	r3, r3
 8002632:	f001 ff9a 	bl	800456a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	441a      	add	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002644:	2100      	movs	r1, #0
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f003 fd64 	bl	8006114 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	461c      	mov	r4, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800265a:	b29b      	uxth	r3, r3
 800265c:	441c      	add	r4, r3
 800265e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8002662:	461c      	mov	r4, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10e      	bne.n	800268a <PCD_EP_ISR_Handler+0x222>
 800266c:	8823      	ldrh	r3, [r4, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002674:	b29b      	uxth	r3, r3
 8002676:	8023      	strh	r3, [r4, #0]
 8002678:	8823      	ldrh	r3, [r4, #0]
 800267a:	b29b      	uxth	r3, r3
 800267c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002684:	b29b      	uxth	r3, r3
 8002686:	8023      	strh	r3, [r4, #0]
 8002688:	e02d      	b.n	80026e6 <PCD_EP_ISR_Handler+0x27e>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	2b3e      	cmp	r3, #62	; 0x3e
 8002690:	d812      	bhi.n	80026b8 <PCD_EP_ISR_Handler+0x250>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <PCD_EP_ISR_Handler+0x244>
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	3301      	adds	r3, #1
 80026aa:	61bb      	str	r3, [r7, #24]
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	029b      	lsls	r3, r3, #10
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	8023      	strh	r3, [r4, #0]
 80026b6:	e016      	b.n	80026e6 <PCD_EP_ISR_Handler+0x27e>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	095b      	lsrs	r3, r3, #5
 80026be:	61bb      	str	r3, [r7, #24]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d102      	bne.n	80026d2 <PCD_EP_ISR_Handler+0x26a>
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	029b      	lsls	r3, r3, #10
 80026d8:	b29b      	uxth	r3, r3
 80026da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f6:	b29c      	uxth	r4, r3
 80026f8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80026fc:	b29c      	uxth	r4, r3
 80026fe:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002702:	b29c      	uxth	r4, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4ba2      	ldr	r3, [pc, #648]	; (8002994 <PCD_EP_ISR_Handler+0x52c>)
 800270a:	4323      	orrs	r3, r4
 800270c:	b29b      	uxth	r3, r3
 800270e:	8013      	strh	r3, [r2, #0]
 8002710:	e132      	b.n	8002978 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	7d7b      	ldrb	r3, [r7, #21]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002722:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f280 80d1 	bge.w	80028ce <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	7d7b      	ldrb	r3, [r7, #21]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	b29a      	uxth	r2, r3
 800273c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002740:	4013      	ands	r3, r2
 8002742:	b29c      	uxth	r4, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	7d7b      	ldrb	r3, [r7, #21]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002754:	b292      	uxth	r2, r2
 8002756:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002758:	7d7b      	ldrb	r3, [r7, #21]
 800275a:	015b      	lsls	r3, r3, #5
 800275c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	4413      	add	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	7b1b      	ldrb	r3, [r3, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d121      	bne.n	80027b2 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002776:	b29b      	uxth	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	3306      	adds	r3, #6
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	4413      	add	r3, r2
 800278c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002796:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002798:	8bfb      	ldrh	r3, [r7, #30]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d072      	beq.n	8002884 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6959      	ldr	r1, [r3, #20]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	88da      	ldrh	r2, [r3, #6]
 80027aa:	8bfb      	ldrh	r3, [r7, #30]
 80027ac:	f001 fedd 	bl	800456a <USB_ReadPMA>
 80027b0:	e068      	b.n	8002884 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d021      	beq.n	8002810 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	3302      	adds	r3, #2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80027f6:	8bfb      	ldrh	r3, [r7, #30]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d02a      	beq.n	8002852 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6959      	ldr	r1, [r3, #20]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	891a      	ldrh	r2, [r3, #8]
 8002808:	8bfb      	ldrh	r3, [r7, #30]
 800280a:	f001 feae 	bl	800456a <USB_ReadPMA>
 800280e:	e020      	b.n	8002852 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002818:	b29b      	uxth	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	3306      	adds	r3, #6
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	4413      	add	r3, r2
 800282e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002838:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800283a:	8bfb      	ldrh	r3, [r7, #30]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6959      	ldr	r1, [r3, #20]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	895a      	ldrh	r2, [r3, #10]
 800284c:	8bfb      	ldrh	r3, [r7, #30]
 800284e:	f001 fe8c 	bl	800456a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	b29b      	uxth	r3, r3
 8002864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286c:	b29c      	uxth	r4, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	441a      	add	r2, r3
 800287c:	4b46      	ldr	r3, [pc, #280]	; (8002998 <PCD_EP_ISR_Handler+0x530>)
 800287e:	4323      	orrs	r3, r4
 8002880:	b29b      	uxth	r3, r3
 8002882:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	69da      	ldr	r2, [r3, #28]
 8002888:	8bfb      	ldrh	r3, [r7, #30]
 800288a:	441a      	add	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	8bfb      	ldrh	r3, [r7, #30]
 8002896:	441a      	add	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d004      	beq.n	80028ae <PCD_EP_ISR_Handler+0x446>
 80028a4:	8bfa      	ldrh	r2, [r7, #30]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d206      	bcs.n	80028bc <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	4619      	mov	r1, r3
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f003 fc2d 	bl	8006114 <HAL_PCD_DataOutStageCallback>
 80028ba:	e008      	b.n	80028ce <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	7819      	ldrb	r1, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff fc9d 	bl	8002208 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028ce:	8a7b      	ldrh	r3, [r7, #18]
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d04f      	beq.n	8002978 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80028d8:	7d7b      	ldrb	r3, [r7, #21]
 80028da:	015b      	lsls	r3, r3, #5
 80028dc:	3328      	adds	r3, #40	; 0x28
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	7d7b      	ldrb	r3, [r7, #21]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80028f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fc:	b29c      	uxth	r4, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	7d7b      	ldrb	r3, [r7, #21]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	441a      	add	r2, r3
 800290a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800290e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002912:	b29b      	uxth	r3, r3
 8002914:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800291e:	b29b      	uxth	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	3302      	adds	r3, #2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	4413      	add	r3, r2
 8002934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	441a      	add	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d106      	bne.n	8002966 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	4619      	mov	r1, r3
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f003 fbf0 	bl	8006144 <HAL_PCD_DataInStageCallback>
 8002964:	e008      	b.n	8002978 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	7819      	ldrb	r1, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff fc96 	bl	80022a4 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002980:	b29b      	uxth	r3, r3
 8002982:	b21b      	sxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	f6ff ad74 	blt.w	8002472 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3724      	adds	r7, #36	; 0x24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd90      	pop	{r4, r7, pc}
 8002994:	ffff8080 	.word	0xffff8080
 8002998:	ffff80c0 	.word	0xffff80c0

0800299c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	460b      	mov	r3, r1
 80029a8:	817b      	strh	r3, [r7, #10]
 80029aa:	4613      	mov	r3, r2
 80029ac:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029ae:	897b      	ldrh	r3, [r7, #10]
 80029b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ba:	897b      	ldrh	r3, [r7, #10]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	015b      	lsls	r3, r3, #5
 80029c2:	3328      	adds	r3, #40	; 0x28
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4413      	add	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]
 80029ca:	e006      	b.n	80029da <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029cc:	897b      	ldrh	r3, [r7, #10]
 80029ce:	015b      	lsls	r3, r3, #5
 80029d0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4413      	add	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029da:	893b      	ldrh	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d107      	bne.n	80029f0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2200      	movs	r2, #0
 80029e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	80da      	strh	r2, [r3, #6]
 80029ee:	e00b      	b.n	8002a08 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2201      	movs	r2, #1
 80029f4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	0c1b      	lsrs	r3, r3, #16
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e26c      	b.n	8002f00 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8087 	beq.w	8002b42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a34:	4b92      	ldr	r3, [pc, #584]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d00c      	beq.n	8002a5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a40:	4b8f      	ldr	r3, [pc, #572]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d112      	bne.n	8002a72 <HAL_RCC_OscConfig+0x5e>
 8002a4c:	4b8c      	ldr	r3, [pc, #560]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a58:	d10b      	bne.n	8002a72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5a:	4b89      	ldr	r3, [pc, #548]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d06c      	beq.n	8002b40 <HAL_RCC_OscConfig+0x12c>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d168      	bne.n	8002b40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e246      	b.n	8002f00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCC_OscConfig+0x76>
 8002a7c:	4b80      	ldr	r3, [pc, #512]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a7f      	ldr	r2, [pc, #508]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	e02e      	b.n	8002ae8 <HAL_RCC_OscConfig+0xd4>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0x98>
 8002a92:	4b7b      	ldr	r3, [pc, #492]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a7a      	ldr	r2, [pc, #488]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b78      	ldr	r3, [pc, #480]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a77      	ldr	r2, [pc, #476]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e01d      	b.n	8002ae8 <HAL_RCC_OscConfig+0xd4>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0xbc>
 8002ab6:	4b72      	ldr	r3, [pc, #456]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a71      	ldr	r2, [pc, #452]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b6f      	ldr	r3, [pc, #444]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6e      	ldr	r2, [pc, #440]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0xd4>
 8002ad0:	4b6b      	ldr	r3, [pc, #428]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a6a      	ldr	r2, [pc, #424]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b68      	ldr	r3, [pc, #416]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a67      	ldr	r2, [pc, #412]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fd ff02 	bl	80008f8 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fd fefe 	bl	80008f8 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	; 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e1fa      	b.n	8002f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4b5d      	ldr	r3, [pc, #372]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0xe4>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fd feee 	bl	80008f8 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fd feea 	bl	80008f8 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	; 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e1e6      	b.n	8002f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	4b53      	ldr	r3, [pc, #332]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x10c>
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d063      	beq.n	8002c16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b4e:	4b4c      	ldr	r3, [pc, #304]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b5a:	4b49      	ldr	r3, [pc, #292]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d11c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x18c>
 8002b66:	4b46      	ldr	r3, [pc, #280]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d116      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	4b43      	ldr	r3, [pc, #268]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_RCC_OscConfig+0x176>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e1ba      	b.n	8002f00 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8a:	4b3d      	ldr	r3, [pc, #244]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4939      	ldr	r1, [pc, #228]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	e03a      	b.n	8002c16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba8:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7fd fea3 	bl	80008f8 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb6:	f7fd fe9f 	bl	80008f8 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e19b      	b.n	8002f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd4:	4b2a      	ldr	r3, [pc, #168]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4927      	ldr	r1, [pc, #156]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]
 8002be8:	e015      	b.n	8002c16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bea:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fd fe82 	bl	80008f8 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7fd fe7e 	bl	80008f8 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e17a      	b.n	8002f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d03a      	beq.n	8002c98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d019      	beq.n	8002c5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <HAL_RCC_OscConfig+0x274>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c30:	f7fd fe62 	bl	80008f8 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c38:	f7fd fe5e 	bl	80008f8 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e15a      	b.n	8002f00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c56:	2001      	movs	r0, #1
 8002c58:	f000 faa8 	bl	80031ac <RCC_Delay>
 8002c5c:	e01c      	b.n	8002c98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <HAL_RCC_OscConfig+0x274>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c64:	f7fd fe48 	bl	80008f8 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6a:	e00f      	b.n	8002c8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c6c:	f7fd fe44 	bl	80008f8 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d908      	bls.n	8002c8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e140      	b.n	8002f00 <HAL_RCC_OscConfig+0x4ec>
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
 8002c84:	42420000 	.word	0x42420000
 8002c88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8c:	4b9e      	ldr	r3, [pc, #632]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1e9      	bne.n	8002c6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80a6 	beq.w	8002df2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002caa:	4b97      	ldr	r3, [pc, #604]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10d      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb6:	4b94      	ldr	r3, [pc, #592]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	4a93      	ldr	r2, [pc, #588]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	61d3      	str	r3, [r2, #28]
 8002cc2:	4b91      	ldr	r3, [pc, #580]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd2:	4b8e      	ldr	r3, [pc, #568]	; (8002f0c <HAL_RCC_OscConfig+0x4f8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d118      	bne.n	8002d10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cde:	4b8b      	ldr	r3, [pc, #556]	; (8002f0c <HAL_RCC_OscConfig+0x4f8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a8a      	ldr	r2, [pc, #552]	; (8002f0c <HAL_RCC_OscConfig+0x4f8>)
 8002ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cea:	f7fd fe05 	bl	80008f8 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf2:	f7fd fe01 	bl	80008f8 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b64      	cmp	r3, #100	; 0x64
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e0fd      	b.n	8002f00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	4b81      	ldr	r3, [pc, #516]	; (8002f0c <HAL_RCC_OscConfig+0x4f8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d106      	bne.n	8002d26 <HAL_RCC_OscConfig+0x312>
 8002d18:	4b7b      	ldr	r3, [pc, #492]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	4a7a      	ldr	r2, [pc, #488]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6213      	str	r3, [r2, #32]
 8002d24:	e02d      	b.n	8002d82 <HAL_RCC_OscConfig+0x36e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x334>
 8002d2e:	4b76      	ldr	r3, [pc, #472]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4a75      	ldr	r2, [pc, #468]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	4b73      	ldr	r3, [pc, #460]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	4a72      	ldr	r2, [pc, #456]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002d40:	f023 0304 	bic.w	r3, r3, #4
 8002d44:	6213      	str	r3, [r2, #32]
 8002d46:	e01c      	b.n	8002d82 <HAL_RCC_OscConfig+0x36e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	d10c      	bne.n	8002d6a <HAL_RCC_OscConfig+0x356>
 8002d50:	4b6d      	ldr	r3, [pc, #436]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4a6c      	ldr	r2, [pc, #432]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002d56:	f043 0304 	orr.w	r3, r3, #4
 8002d5a:	6213      	str	r3, [r2, #32]
 8002d5c:	4b6a      	ldr	r3, [pc, #424]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	4a69      	ldr	r2, [pc, #420]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6213      	str	r3, [r2, #32]
 8002d68:	e00b      	b.n	8002d82 <HAL_RCC_OscConfig+0x36e>
 8002d6a:	4b67      	ldr	r3, [pc, #412]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4a66      	ldr	r2, [pc, #408]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	6213      	str	r3, [r2, #32]
 8002d76:	4b64      	ldr	r3, [pc, #400]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	4a63      	ldr	r2, [pc, #396]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002d7c:	f023 0304 	bic.w	r3, r3, #4
 8002d80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d015      	beq.n	8002db6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8a:	f7fd fdb5 	bl	80008f8 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d92:	f7fd fdb1 	bl	80008f8 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e0ab      	b.n	8002f00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	4b57      	ldr	r3, [pc, #348]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ee      	beq.n	8002d92 <HAL_RCC_OscConfig+0x37e>
 8002db4:	e014      	b.n	8002de0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db6:	f7fd fd9f 	bl	80008f8 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fd fd9b 	bl	80008f8 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e095      	b.n	8002f00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd4:	4b4c      	ldr	r3, [pc, #304]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1ee      	bne.n	8002dbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d105      	bne.n	8002df2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de6:	4b48      	ldr	r3, [pc, #288]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	4a47      	ldr	r2, [pc, #284]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8081 	beq.w	8002efe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dfc:	4b42      	ldr	r3, [pc, #264]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d061      	beq.n	8002ecc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d146      	bne.n	8002e9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e10:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <HAL_RCC_OscConfig+0x4fc>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fd fd6f 	bl	80008f8 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7fd fd6b 	bl	80008f8 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e067      	b.n	8002f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e30:	4b35      	ldr	r3, [pc, #212]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e44:	d108      	bne.n	8002e58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e46:	4b30      	ldr	r3, [pc, #192]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	492d      	ldr	r1, [pc, #180]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e58:	4b2b      	ldr	r3, [pc, #172]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a19      	ldr	r1, [r3, #32]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	4927      	ldr	r1, [pc, #156]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e70:	4b27      	ldr	r3, [pc, #156]	; (8002f10 <HAL_RCC_OscConfig+0x4fc>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7fd fd3f 	bl	80008f8 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7fd fd3b 	bl	80008f8 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e037      	b.n	8002f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e90:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x46a>
 8002e9c:	e02f      	b.n	8002efe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9e:	4b1c      	ldr	r3, [pc, #112]	; (8002f10 <HAL_RCC_OscConfig+0x4fc>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fd fd28 	bl	80008f8 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eac:	f7fd fd24 	bl	80008f8 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e020      	b.n	8002f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ebe:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x498>
 8002eca:	e018      	b.n	8002efe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e013      	b.n	8002f00 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d106      	bne.n	8002efa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40007000 	.word	0x40007000
 8002f10:	42420060 	.word	0x42420060

08002f14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0d0      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f28:	4b6a      	ldr	r3, [pc, #424]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d910      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	4b67      	ldr	r3, [pc, #412]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 0207 	bic.w	r2, r3, #7
 8002f3e:	4965      	ldr	r1, [pc, #404]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b63      	ldr	r3, [pc, #396]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0b8      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f70:	4b59      	ldr	r3, [pc, #356]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a58      	ldr	r2, [pc, #352]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f88:	4b53      	ldr	r3, [pc, #332]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4a52      	ldr	r2, [pc, #328]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f94:	4b50      	ldr	r3, [pc, #320]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	494d      	ldr	r1, [pc, #308]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d040      	beq.n	8003034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b47      	ldr	r3, [pc, #284]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d115      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e07f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd2:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e073      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe2:	4b3d      	ldr	r3, [pc, #244]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e06b      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff2:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f023 0203 	bic.w	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4936      	ldr	r1, [pc, #216]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003004:	f7fd fc78 	bl	80008f8 <HAL_GetTick>
 8003008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300a:	e00a      	b.n	8003022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300c:	f7fd fc74 	bl	80008f8 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e053      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 020c 	and.w	r2, r3, #12
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	429a      	cmp	r2, r3
 8003032:	d1eb      	bne.n	800300c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003034:	4b27      	ldr	r3, [pc, #156]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d210      	bcs.n	8003064 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 0207 	bic.w	r2, r3, #7
 800304a:	4922      	ldr	r1, [pc, #136]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e032      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4916      	ldr	r1, [pc, #88]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 800307e:	4313      	orrs	r3, r2
 8003080:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800308e:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	490e      	ldr	r1, [pc, #56]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030a2:	f000 f821 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 80030a6:	4601      	mov	r1, r0
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <HAL_RCC_ClockConfig+0x1c8>)
 80030b4:	5cd3      	ldrb	r3, [r2, r3]
 80030b6:	fa21 f303 	lsr.w	r3, r1, r3
 80030ba:	4a09      	ldr	r2, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x1cc>)
 80030bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030be:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_ClockConfig+0x1d0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd fbd6 	bl	8000874 <HAL_InitTick>

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40022000 	.word	0x40022000
 80030d8:	40021000 	.word	0x40021000
 80030dc:	080067b8 	.word	0x080067b8
 80030e0:	20000000 	.word	0x20000000
 80030e4:	20000004 	.word	0x20000004

080030e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e8:	b490      	push	{r4, r7}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030ee:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <HAL_RCC_GetSysClockFreq+0xb0>)
 80030f0:	1d3c      	adds	r4, r7, #4
 80030f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030f8:	4b28      	ldr	r3, [pc, #160]	; (800319c <HAL_RCC_GetSysClockFreq+0xb4>)
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	2300      	movs	r3, #0
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003112:	4b23      	ldr	r3, [pc, #140]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b04      	cmp	r3, #4
 8003120:	d002      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x40>
 8003122:	2b08      	cmp	r3, #8
 8003124:	d003      	beq.n	800312e <HAL_RCC_GetSysClockFreq+0x46>
 8003126:	e02d      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003128:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800312a:	623b      	str	r3, [r7, #32]
      break;
 800312c:	e02d      	b.n	800318a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	0c9b      	lsrs	r3, r3, #18
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800313a:	4413      	add	r3, r2
 800313c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003140:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d013      	beq.n	8003174 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800314c:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	0c5b      	lsrs	r3, r3, #17
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800315a:	4413      	add	r3, r2
 800315c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003160:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	4a0f      	ldr	r2, [pc, #60]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003166:	fb02 f203 	mul.w	r2, r2, r3
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	627b      	str	r3, [r7, #36]	; 0x24
 8003172:	e004      	b.n	800317e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	4a0c      	ldr	r2, [pc, #48]	; (80031a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003178:	fb02 f303 	mul.w	r3, r2, r3
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	623b      	str	r3, [r7, #32]
      break;
 8003182:	e002      	b.n	800318a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003184:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003186:	623b      	str	r3, [r7, #32]
      break;
 8003188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318a:	6a3b      	ldr	r3, [r7, #32]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3728      	adds	r7, #40	; 0x28
 8003190:	46bd      	mov	sp, r7
 8003192:	bc90      	pop	{r4, r7}
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	0800675c 	.word	0x0800675c
 800319c:	0800676c 	.word	0x0800676c
 80031a0:	40021000 	.word	0x40021000
 80031a4:	007a1200 	.word	0x007a1200
 80031a8:	003d0900 	.word	0x003d0900

080031ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031b4:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <RCC_Delay+0x34>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <RCC_Delay+0x38>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	0a5b      	lsrs	r3, r3, #9
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	fb02 f303 	mul.w	r3, r2, r3
 80031c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031c8:	bf00      	nop
  }
  while (Delay --);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	1e5a      	subs	r2, r3, #1
 80031ce:	60fa      	str	r2, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f9      	bne.n	80031c8 <RCC_Delay+0x1c>
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20000000 	.word	0x20000000
 80031e4:	10624dd3 	.word	0x10624dd3

080031e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d07d      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003204:	2300      	movs	r3, #0
 8003206:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003208:	4b4f      	ldr	r3, [pc, #316]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10d      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003214:	4b4c      	ldr	r3, [pc, #304]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	4a4b      	ldr	r2, [pc, #300]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321e:	61d3      	str	r3, [r2, #28]
 8003220:	4b49      	ldr	r3, [pc, #292]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322c:	2301      	movs	r3, #1
 800322e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	4b46      	ldr	r3, [pc, #280]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d118      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800323c:	4b43      	ldr	r3, [pc, #268]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a42      	ldr	r2, [pc, #264]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003246:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003248:	f7fd fb56 	bl	80008f8 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324e:	e008      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003250:	f7fd fb52 	bl	80008f8 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	; 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e06d      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003262:	4b3a      	ldr	r3, [pc, #232]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800326e:	4b36      	ldr	r3, [pc, #216]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003276:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d02e      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	429a      	cmp	r2, r3
 800328a:	d027      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800328c:	4b2e      	ldr	r3, [pc, #184]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003294:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003296:	4b2e      	ldr	r3, [pc, #184]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800329c:	4b2c      	ldr	r3, [pc, #176]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032a2:	4a29      	ldr	r2, [pc, #164]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d014      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b2:	f7fd fb21 	bl	80008f8 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b8:	e00a      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ba:	f7fd fb1d 	bl	80008f8 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e036      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d0:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0ee      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032dc:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4917      	ldr	r1, [pc, #92]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032ee:	7dfb      	ldrb	r3, [r7, #23]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d105      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f4:	4b14      	ldr	r3, [pc, #80]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	4a13      	ldr	r2, [pc, #76]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800330c:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	490b      	ldr	r1, [pc, #44]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331a:	4313      	orrs	r3, r2
 800331c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	2b00      	cmp	r3, #0
 8003328:	d008      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800332a:	4b07      	ldr	r3, [pc, #28]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	4904      	ldr	r1, [pc, #16]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003338:	4313      	orrs	r3, r2
 800333a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	40007000 	.word	0x40007000
 8003350:	42420440 	.word	0x42420440

08003354 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003354:	b084      	sub	sp, #16
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	f107 0014 	add.w	r0, r7, #20
 8003362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	b004      	add	sp, #16
 8003372:	4770      	bx	lr

08003374 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800337c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003380:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003388:	b29a      	uxth	r2, r3
 800338a:	89fb      	ldrh	r3, [r7, #14]
 800338c:	4313      	orrs	r3, r2
 800338e:	b29a      	uxth	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr

080033a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b085      	sub	sp, #20
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80033aa:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80033ae:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	b21a      	sxth	r2, r3
 80033ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033be:	43db      	mvns	r3, r3
 80033c0:	b21b      	sxth	r3, r3
 80033c2:	4013      	ands	r3, r2
 80033c4:	b21b      	sxth	r3, r3
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr

080033da <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	460b      	mov	r3, r1
 80033e4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr

080033f2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80033f2:	b084      	sub	sp, #16
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	f107 0014 	add.w	r0, r7, #20
 8003400:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff ffa5 	bl	8003374 <USB_EnableGlobalInt>

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003436:	b004      	add	sp, #16
 8003438:	4770      	bx	lr
	...

0800343c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800343c:	b490      	push	{r4, r7}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	b29b      	uxth	r3, r3
 8003458:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800345c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003460:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	78db      	ldrb	r3, [r3, #3]
 8003466:	2b03      	cmp	r3, #3
 8003468:	d819      	bhi.n	800349e <USB_ActivateEndpoint+0x62>
 800346a:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <USB_ActivateEndpoint+0x34>)
 800346c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003470:	08003481 	.word	0x08003481
 8003474:	08003495 	.word	0x08003495
 8003478:	080034a5 	.word	0x080034a5
 800347c:	0800348b 	.word	0x0800348b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003480:	89bb      	ldrh	r3, [r7, #12]
 8003482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003486:	81bb      	strh	r3, [r7, #12]
      break;
 8003488:	e00d      	b.n	80034a6 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800348a:	89bb      	ldrh	r3, [r7, #12]
 800348c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003490:	81bb      	strh	r3, [r7, #12]
      break;
 8003492:	e008      	b.n	80034a6 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003494:	89bb      	ldrh	r3, [r7, #12]
 8003496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800349a:	81bb      	strh	r3, [r7, #12]
      break;
 800349c:	e003      	b.n	80034a6 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
      break;
 80034a2:	e000      	b.n	80034a6 <USB_ActivateEndpoint+0x6a>
      break;
 80034a4:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	441a      	add	r2, r3
 80034b0:	89bb      	ldrh	r3, [r7, #12]
 80034b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034dc:	b29a      	uxth	r2, r3
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	4313      	orrs	r3, r2
 80034e6:	b29c      	uxth	r4, r3
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	441a      	add	r2, r3
 80034f2:	4b8a      	ldr	r3, [pc, #552]	; (800371c <USB_ActivateEndpoint+0x2e0>)
 80034f4:	4323      	orrs	r3, r4
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	7b1b      	ldrb	r3, [r3, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f040 8112 	bne.w	8003728 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	785b      	ldrb	r3, [r3, #1]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d067      	beq.n	80035dc <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800350c:	687c      	ldr	r4, [r7, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003514:	b29b      	uxth	r3, r3
 8003516:	441c      	add	r4, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	4423      	add	r3, r4
 8003520:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003524:	461c      	mov	r4, r3
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	88db      	ldrh	r3, [r3, #6]
 800352a:	085b      	lsrs	r3, r3, #1
 800352c:	b29b      	uxth	r3, r3
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	b29b      	uxth	r3, r3
 8003532:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	b29c      	uxth	r4, r3
 8003542:	4623      	mov	r3, r4
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d014      	beq.n	8003576 <USB_ActivateEndpoint+0x13a>
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	b29b      	uxth	r3, r3
 800355a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800355e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003562:	b29c      	uxth	r4, r3
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	441a      	add	r2, r3
 800356e:	4b6c      	ldr	r3, [pc, #432]	; (8003720 <USB_ActivateEndpoint+0x2e4>)
 8003570:	4323      	orrs	r3, r4
 8003572:	b29b      	uxth	r3, r3
 8003574:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	78db      	ldrb	r3, [r3, #3]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d018      	beq.n	80035b0 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	b29b      	uxth	r3, r3
 800358c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003594:	b29c      	uxth	r4, r3
 8003596:	f084 0320 	eor.w	r3, r4, #32
 800359a:	b29c      	uxth	r4, r3
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	441a      	add	r2, r3
 80035a6:	4b5d      	ldr	r3, [pc, #372]	; (800371c <USB_ActivateEndpoint+0x2e0>)
 80035a8:	4323      	orrs	r3, r4
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	8013      	strh	r3, [r2, #0]
 80035ae:	e22b      	b.n	8003a08 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035c6:	b29c      	uxth	r4, r3
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	441a      	add	r2, r3
 80035d2:	4b52      	ldr	r3, [pc, #328]	; (800371c <USB_ActivateEndpoint+0x2e0>)
 80035d4:	4323      	orrs	r3, r4
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	8013      	strh	r3, [r2, #0]
 80035da:	e215      	b.n	8003a08 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80035dc:	687c      	ldr	r4, [r7, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	441c      	add	r4, r3
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	4423      	add	r3, r4
 80035f0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80035f4:	461c      	mov	r4, r3
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	88db      	ldrh	r3, [r3, #6]
 80035fa:	085b      	lsrs	r3, r3, #1
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	b29b      	uxth	r3, r3
 8003602:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003604:	687c      	ldr	r4, [r7, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800360c:	b29b      	uxth	r3, r3
 800360e:	441c      	add	r4, r3
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	4423      	add	r3, r4
 8003618:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800361c:	461c      	mov	r4, r3
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10e      	bne.n	8003644 <USB_ActivateEndpoint+0x208>
 8003626:	8823      	ldrh	r3, [r4, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800362e:	b29b      	uxth	r3, r3
 8003630:	8023      	strh	r3, [r4, #0]
 8003632:	8823      	ldrh	r3, [r4, #0]
 8003634:	b29b      	uxth	r3, r3
 8003636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800363a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800363e:	b29b      	uxth	r3, r3
 8003640:	8023      	strh	r3, [r4, #0]
 8003642:	e02d      	b.n	80036a0 <USB_ActivateEndpoint+0x264>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b3e      	cmp	r3, #62	; 0x3e
 800364a:	d812      	bhi.n	8003672 <USB_ActivateEndpoint+0x236>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	085b      	lsrs	r3, r3, #1
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <USB_ActivateEndpoint+0x22a>
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	3301      	adds	r3, #1
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	b29b      	uxth	r3, r3
 800366a:	029b      	lsls	r3, r3, #10
 800366c:	b29b      	uxth	r3, r3
 800366e:	8023      	strh	r3, [r4, #0]
 8003670:	e016      	b.n	80036a0 <USB_ActivateEndpoint+0x264>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	2b00      	cmp	r3, #0
 8003684:	d102      	bne.n	800368c <USB_ActivateEndpoint+0x250>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	3b01      	subs	r3, #1
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	b29b      	uxth	r3, r3
 8003690:	029b      	lsls	r3, r3, #10
 8003692:	b29b      	uxth	r3, r3
 8003694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800369c:	b29b      	uxth	r3, r3
 800369e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b29c      	uxth	r4, r3
 80036ae:	4623      	mov	r3, r4
 80036b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d014      	beq.n	80036e2 <USB_ActivateEndpoint+0x2a6>
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ce:	b29c      	uxth	r4, r3
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	441a      	add	r2, r3
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <USB_ActivateEndpoint+0x2e8>)
 80036dc:	4323      	orrs	r3, r4
 80036de:	b29b      	uxth	r3, r3
 80036e0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f8:	b29c      	uxth	r4, r3
 80036fa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80036fe:	b29c      	uxth	r4, r3
 8003700:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003704:	b29c      	uxth	r4, r3
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	441a      	add	r2, r3
 8003710:	4b02      	ldr	r3, [pc, #8]	; (800371c <USB_ActivateEndpoint+0x2e0>)
 8003712:	4323      	orrs	r3, r4
 8003714:	b29b      	uxth	r3, r3
 8003716:	8013      	strh	r3, [r2, #0]
 8003718:	e176      	b.n	8003a08 <USB_ActivateEndpoint+0x5cc>
 800371a:	bf00      	nop
 800371c:	ffff8080 	.word	0xffff8080
 8003720:	ffff80c0 	.word	0xffff80c0
 8003724:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	b29b      	uxth	r3, r3
 8003736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	b29c      	uxth	r4, r3
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	441a      	add	r2, r3
 800374a:	4b96      	ldr	r3, [pc, #600]	; (80039a4 <USB_ActivateEndpoint+0x568>)
 800374c:	4323      	orrs	r3, r4
 800374e:	b29b      	uxth	r3, r3
 8003750:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003752:	687c      	ldr	r4, [r7, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800375a:	b29b      	uxth	r3, r3
 800375c:	441c      	add	r4, r3
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	4423      	add	r3, r4
 8003766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800376a:	461c      	mov	r4, r3
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	891b      	ldrh	r3, [r3, #8]
 8003770:	085b      	lsrs	r3, r3, #1
 8003772:	b29b      	uxth	r3, r3
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	b29b      	uxth	r3, r3
 8003778:	8023      	strh	r3, [r4, #0]
 800377a:	687c      	ldr	r4, [r7, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003782:	b29b      	uxth	r3, r3
 8003784:	441c      	add	r4, r3
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	4423      	add	r3, r4
 800378e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003792:	461c      	mov	r4, r3
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	895b      	ldrh	r3, [r3, #10]
 8003798:	085b      	lsrs	r3, r3, #1
 800379a:	b29b      	uxth	r3, r3
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	b29b      	uxth	r3, r3
 80037a0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	785b      	ldrb	r3, [r3, #1]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f040 8088 	bne.w	80038bc <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	881b      	ldrh	r3, [r3, #0]
 80037b8:	b29c      	uxth	r4, r3
 80037ba:	4623      	mov	r3, r4
 80037bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d014      	beq.n	80037ee <USB_ActivateEndpoint+0x3b2>
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037da:	b29c      	uxth	r4, r3
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	441a      	add	r2, r3
 80037e6:	4b70      	ldr	r3, [pc, #448]	; (80039a8 <USB_ActivateEndpoint+0x56c>)
 80037e8:	4323      	orrs	r3, r4
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	b29c      	uxth	r4, r3
 80037fc:	4623      	mov	r3, r4
 80037fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d014      	beq.n	8003830 <USB_ActivateEndpoint+0x3f4>
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	b29b      	uxth	r3, r3
 8003814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381c:	b29c      	uxth	r4, r3
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	441a      	add	r2, r3
 8003828:	4b60      	ldr	r3, [pc, #384]	; (80039ac <USB_ActivateEndpoint+0x570>)
 800382a:	4323      	orrs	r3, r4
 800382c:	b29b      	uxth	r3, r3
 800382e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	b29b      	uxth	r3, r3
 800383e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003846:	b29c      	uxth	r4, r3
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	441a      	add	r2, r3
 8003852:	4b56      	ldr	r3, [pc, #344]	; (80039ac <USB_ActivateEndpoint+0x570>)
 8003854:	4323      	orrs	r3, r4
 8003856:	b29b      	uxth	r3, r3
 8003858:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	b29b      	uxth	r3, r3
 8003868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003870:	b29c      	uxth	r4, r3
 8003872:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003876:	b29c      	uxth	r4, r3
 8003878:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800387c:	b29c      	uxth	r4, r3
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	441a      	add	r2, r3
 8003888:	4b49      	ldr	r3, [pc, #292]	; (80039b0 <USB_ActivateEndpoint+0x574>)
 800388a:	4323      	orrs	r3, r4
 800388c:	b29b      	uxth	r3, r3
 800388e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	b29b      	uxth	r3, r3
 800389e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038a6:	b29c      	uxth	r4, r3
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	441a      	add	r2, r3
 80038b2:	4b3f      	ldr	r3, [pc, #252]	; (80039b0 <USB_ActivateEndpoint+0x574>)
 80038b4:	4323      	orrs	r3, r4
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	8013      	strh	r3, [r2, #0]
 80038ba:	e0a5      	b.n	8003a08 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	b29c      	uxth	r4, r3
 80038ca:	4623      	mov	r3, r4
 80038cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d014      	beq.n	80038fe <USB_ActivateEndpoint+0x4c2>
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ea:	b29c      	uxth	r4, r3
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	441a      	add	r2, r3
 80038f6:	4b2c      	ldr	r3, [pc, #176]	; (80039a8 <USB_ActivateEndpoint+0x56c>)
 80038f8:	4323      	orrs	r3, r4
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	b29c      	uxth	r4, r3
 800390c:	4623      	mov	r3, r4
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d014      	beq.n	8003940 <USB_ActivateEndpoint+0x504>
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	b29b      	uxth	r3, r3
 8003924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392c:	b29c      	uxth	r4, r3
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	441a      	add	r2, r3
 8003938:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <USB_ActivateEndpoint+0x570>)
 800393a:	4323      	orrs	r3, r4
 800393c:	b29b      	uxth	r3, r3
 800393e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	b29b      	uxth	r3, r3
 800394e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003956:	b29c      	uxth	r4, r3
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	441a      	add	r2, r3
 8003962:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <USB_ActivateEndpoint+0x56c>)
 8003964:	4323      	orrs	r3, r4
 8003966:	b29b      	uxth	r3, r3
 8003968:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	78db      	ldrb	r3, [r3, #3]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d020      	beq.n	80039b4 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003988:	b29c      	uxth	r4, r3
 800398a:	f084 0320 	eor.w	r3, r4, #32
 800398e:	b29c      	uxth	r4, r3
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	441a      	add	r2, r3
 800399a:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <USB_ActivateEndpoint+0x574>)
 800399c:	4323      	orrs	r3, r4
 800399e:	b29b      	uxth	r3, r3
 80039a0:	8013      	strh	r3, [r2, #0]
 80039a2:	e01c      	b.n	80039de <USB_ActivateEndpoint+0x5a2>
 80039a4:	ffff8180 	.word	0xffff8180
 80039a8:	ffffc080 	.word	0xffffc080
 80039ac:	ffff80c0 	.word	0xffff80c0
 80039b0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ca:	b29c      	uxth	r4, r3
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	441a      	add	r2, r3
 80039d6:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <USB_ActivateEndpoint+0x5d8>)
 80039d8:	4323      	orrs	r3, r4
 80039da:	b29b      	uxth	r3, r3
 80039dc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f4:	b29c      	uxth	r4, r3
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	441a      	add	r2, r3
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <USB_ActivateEndpoint+0x5d8>)
 8003a02:	4323      	orrs	r3, r4
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc90      	pop	{r4, r7}
 8003a12:	4770      	bx	lr
 8003a14:	ffff8080 	.word	0xffff8080

08003a18 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a18:	b490      	push	{r4, r7}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	7b1b      	ldrb	r3, [r3, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d171      	bne.n	8003b0e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	785b      	ldrb	r3, [r3, #1]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d036      	beq.n	8003aa0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	b29c      	uxth	r4, r3
 8003a40:	4623      	mov	r3, r4
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d014      	beq.n	8003a74 <USB_DeactivateEndpoint+0x5c>
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a60:	b29c      	uxth	r4, r3
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	441a      	add	r2, r3
 8003a6c:	4b6b      	ldr	r3, [pc, #428]	; (8003c1c <USB_DeactivateEndpoint+0x204>)
 8003a6e:	4323      	orrs	r3, r4
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a8a:	b29c      	uxth	r4, r3
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	441a      	add	r2, r3
 8003a96:	4b62      	ldr	r3, [pc, #392]	; (8003c20 <USB_DeactivateEndpoint+0x208>)
 8003a98:	4323      	orrs	r3, r4
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	8013      	strh	r3, [r2, #0]
 8003a9e:	e144      	b.n	8003d2a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	b29c      	uxth	r4, r3
 8003aae:	4623      	mov	r3, r4
 8003ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d014      	beq.n	8003ae2 <USB_DeactivateEndpoint+0xca>
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ace:	b29c      	uxth	r4, r3
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	441a      	add	r2, r3
 8003ada:	4b52      	ldr	r3, [pc, #328]	; (8003c24 <USB_DeactivateEndpoint+0x20c>)
 8003adc:	4323      	orrs	r3, r4
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af8:	b29c      	uxth	r4, r3
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	441a      	add	r2, r3
 8003b04:	4b46      	ldr	r3, [pc, #280]	; (8003c20 <USB_DeactivateEndpoint+0x208>)
 8003b06:	4323      	orrs	r3, r4
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	8013      	strh	r3, [r2, #0]
 8003b0c:	e10d      	b.n	8003d2a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	785b      	ldrb	r3, [r3, #1]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f040 8088 	bne.w	8003c28 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	b29c      	uxth	r4, r3
 8003b26:	4623      	mov	r3, r4
 8003b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d014      	beq.n	8003b5a <USB_DeactivateEndpoint+0x142>
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b46:	b29c      	uxth	r4, r3
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	441a      	add	r2, r3
 8003b52:	4b34      	ldr	r3, [pc, #208]	; (8003c24 <USB_DeactivateEndpoint+0x20c>)
 8003b54:	4323      	orrs	r3, r4
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	b29c      	uxth	r4, r3
 8003b68:	4623      	mov	r3, r4
 8003b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d014      	beq.n	8003b9c <USB_DeactivateEndpoint+0x184>
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b88:	b29c      	uxth	r4, r3
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	441a      	add	r2, r3
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <USB_DeactivateEndpoint+0x204>)
 8003b96:	4323      	orrs	r3, r4
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb2:	b29c      	uxth	r4, r3
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	441a      	add	r2, r3
 8003bbe:	4b17      	ldr	r3, [pc, #92]	; (8003c1c <USB_DeactivateEndpoint+0x204>)
 8003bc0:	4323      	orrs	r3, r4
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bdc:	b29c      	uxth	r4, r3
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	441a      	add	r2, r3
 8003be8:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <USB_DeactivateEndpoint+0x208>)
 8003bea:	4323      	orrs	r3, r4
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c06:	b29c      	uxth	r4, r3
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	441a      	add	r2, r3
 8003c12:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <USB_DeactivateEndpoint+0x208>)
 8003c14:	4323      	orrs	r3, r4
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	8013      	strh	r3, [r2, #0]
 8003c1a:	e086      	b.n	8003d2a <USB_DeactivateEndpoint+0x312>
 8003c1c:	ffff80c0 	.word	0xffff80c0
 8003c20:	ffff8080 	.word	0xffff8080
 8003c24:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	b29c      	uxth	r4, r3
 8003c36:	4623      	mov	r3, r4
 8003c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d014      	beq.n	8003c6a <USB_DeactivateEndpoint+0x252>
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c56:	b29c      	uxth	r4, r3
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	441a      	add	r2, r3
 8003c62:	4b35      	ldr	r3, [pc, #212]	; (8003d38 <USB_DeactivateEndpoint+0x320>)
 8003c64:	4323      	orrs	r3, r4
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	b29c      	uxth	r4, r3
 8003c78:	4623      	mov	r3, r4
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d014      	beq.n	8003cac <USB_DeactivateEndpoint+0x294>
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c98:	b29c      	uxth	r4, r3
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	441a      	add	r2, r3
 8003ca4:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <USB_DeactivateEndpoint+0x324>)
 8003ca6:	4323      	orrs	r3, r4
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc2:	b29c      	uxth	r4, r3
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	441a      	add	r2, r3
 8003cce:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <USB_DeactivateEndpoint+0x320>)
 8003cd0:	4323      	orrs	r3, r4
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cec:	b29c      	uxth	r4, r3
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	441a      	add	r2, r3
 8003cf8:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <USB_DeactivateEndpoint+0x328>)
 8003cfa:	4323      	orrs	r3, r4
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d16:	b29c      	uxth	r4, r3
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	441a      	add	r2, r3
 8003d22:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <USB_DeactivateEndpoint+0x328>)
 8003d24:	4323      	orrs	r3, r4
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc90      	pop	{r4, r7}
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	ffffc080 	.word	0xffffc080
 8003d3c:	ffff80c0 	.word	0xffff80c0
 8003d40:	ffff8080 	.word	0xffff8080

08003d44 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b08d      	sub	sp, #52	; 0x34
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	785b      	ldrb	r3, [r3, #1]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	f040 8160 	bne.w	8004018 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	699a      	ldr	r2, [r3, #24]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d909      	bls.n	8003d78 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d70:	1ad2      	subs	r2, r2, r3
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	619a      	str	r2, [r3, #24]
 8003d76:	e005      	b.n	8003d84 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2200      	movs	r2, #0
 8003d82:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	7b1b      	ldrb	r3, [r3, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d119      	bne.n	8003dc0 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	6959      	ldr	r1, [r3, #20]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	88da      	ldrh	r2, [r3, #6]
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fba2 	bl	80044e2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003d9e:	687c      	ldr	r4, [r7, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	441c      	add	r4, r3
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	4423      	add	r3, r4
 8003db2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003db6:	461c      	mov	r4, r3
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	8023      	strh	r3, [r4, #0]
 8003dbe:	e10f      	b.n	8003fe0 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d065      	beq.n	8003ea2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003dd6:	687c      	ldr	r4, [r7, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	785b      	ldrb	r3, [r3, #1]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d148      	bne.n	8003e72 <USB_EPStartXfer+0x12e>
 8003de0:	687c      	ldr	r4, [r7, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	441c      	add	r4, r3
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	4423      	add	r3, r4
 8003df4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003df8:	461c      	mov	r4, r3
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10e      	bne.n	8003e1e <USB_EPStartXfer+0xda>
 8003e00:	8823      	ldrh	r3, [r4, #0]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	8023      	strh	r3, [r4, #0]
 8003e0c:	8823      	ldrh	r3, [r4, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	8023      	strh	r3, [r4, #0]
 8003e1c:	e03d      	b.n	8003e9a <USB_EPStartXfer+0x156>
 8003e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e20:	2b3e      	cmp	r3, #62	; 0x3e
 8003e22:	d810      	bhi.n	8003e46 <USB_EPStartXfer+0x102>
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e26:	085b      	lsrs	r3, r3, #1
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <USB_EPStartXfer+0xf6>
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	3301      	adds	r3, #1
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	029b      	lsls	r3, r3, #10
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	8023      	strh	r3, [r4, #0]
 8003e44:	e029      	b.n	8003e9a <USB_EPStartXfer+0x156>
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d102      	bne.n	8003e5c <USB_EPStartXfer+0x118>
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	029b      	lsls	r3, r3, #10
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	8023      	strh	r3, [r4, #0]
 8003e70:	e013      	b.n	8003e9a <USB_EPStartXfer+0x156>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	785b      	ldrb	r3, [r3, #1]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d10f      	bne.n	8003e9a <USB_EPStartXfer+0x156>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	441c      	add	r4, r3
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	4423      	add	r3, r4
 8003e8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	895b      	ldrh	r3, [r3, #10]
 8003e9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003ea0:	e063      	b.n	8003f6a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	785b      	ldrb	r3, [r3, #1]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d148      	bne.n	8003f3c <USB_EPStartXfer+0x1f8>
 8003eaa:	687c      	ldr	r4, [r7, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	441c      	add	r4, r3
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	4423      	add	r3, r4
 8003ebe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ec2:	461c      	mov	r4, r3
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10e      	bne.n	8003ee8 <USB_EPStartXfer+0x1a4>
 8003eca:	8823      	ldrh	r3, [r4, #0]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	8023      	strh	r3, [r4, #0]
 8003ed6:	8823      	ldrh	r3, [r4, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	8023      	strh	r3, [r4, #0]
 8003ee6:	e03d      	b.n	8003f64 <USB_EPStartXfer+0x220>
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	2b3e      	cmp	r3, #62	; 0x3e
 8003eec:	d810      	bhi.n	8003f10 <USB_EPStartXfer+0x1cc>
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	623b      	str	r3, [r7, #32]
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <USB_EPStartXfer+0x1c0>
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	3301      	adds	r3, #1
 8003f02:	623b      	str	r3, [r7, #32]
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	029b      	lsls	r3, r3, #10
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	8023      	strh	r3, [r4, #0]
 8003f0e:	e029      	b.n	8003f64 <USB_EPStartXfer+0x220>
 8003f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	623b      	str	r3, [r7, #32]
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <USB_EPStartXfer+0x1e2>
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	623b      	str	r3, [r7, #32]
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	029b      	lsls	r3, r3, #10
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	8023      	strh	r3, [r4, #0]
 8003f3a:	e013      	b.n	8003f64 <USB_EPStartXfer+0x220>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	785b      	ldrb	r3, [r3, #1]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d10f      	bne.n	8003f64 <USB_EPStartXfer+0x220>
 8003f44:	687c      	ldr	r4, [r7, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	441c      	add	r4, r3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	4423      	add	r3, r4
 8003f58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f5c:	461c      	mov	r4, r3
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	891b      	ldrh	r3, [r3, #8]
 8003f68:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	6959      	ldr	r1, [r3, #20]
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fab4 	bl	80044e2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	785b      	ldrb	r3, [r3, #1]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d115      	bne.n	8003fae <USB_EPStartXfer+0x26a>
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f98:	b29c      	uxth	r4, r3
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	441a      	add	r2, r3
 8003fa4:	4b9a      	ldr	r3, [pc, #616]	; (8004210 <USB_EPStartXfer+0x4cc>)
 8003fa6:	4323      	orrs	r3, r4
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	8013      	strh	r3, [r2, #0]
 8003fac:	e018      	b.n	8003fe0 <USB_EPStartXfer+0x29c>
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	785b      	ldrb	r3, [r3, #1]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d114      	bne.n	8003fe0 <USB_EPStartXfer+0x29c>
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fcc:	b29c      	uxth	r4, r3
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	441a      	add	r2, r3
 8003fd8:	4b8e      	ldr	r3, [pc, #568]	; (8004214 <USB_EPStartXfer+0x4d0>)
 8003fda:	4323      	orrs	r3, r4
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff6:	b29c      	uxth	r4, r3
 8003ff8:	f084 0310 	eor.w	r3, r4, #16
 8003ffc:	b29c      	uxth	r4, r3
 8003ffe:	f084 0320 	eor.w	r3, r4, #32
 8004002:	b29c      	uxth	r4, r3
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	441a      	add	r2, r3
 800400e:	4b82      	ldr	r3, [pc, #520]	; (8004218 <USB_EPStartXfer+0x4d4>)
 8004010:	4323      	orrs	r3, r4
 8004012:	b29b      	uxth	r3, r3
 8004014:	8013      	strh	r3, [r2, #0]
 8004016:	e146      	b.n	80042a6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	699a      	ldr	r2, [r3, #24]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	429a      	cmp	r2, r3
 8004022:	d909      	bls.n	8004038 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	699a      	ldr	r2, [r3, #24]
 800402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004030:	1ad2      	subs	r2, r2, r3
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	619a      	str	r2, [r3, #24]
 8004036:	e005      	b.n	8004044 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2200      	movs	r2, #0
 8004042:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	7b1b      	ldrb	r3, [r3, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d148      	bne.n	80040de <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800404c:	687c      	ldr	r4, [r7, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004054:	b29b      	uxth	r3, r3
 8004056:	441c      	add	r4, r3
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	4423      	add	r3, r4
 8004060:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004064:	461c      	mov	r4, r3
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10e      	bne.n	800408a <USB_EPStartXfer+0x346>
 800406c:	8823      	ldrh	r3, [r4, #0]
 800406e:	b29b      	uxth	r3, r3
 8004070:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004074:	b29b      	uxth	r3, r3
 8004076:	8023      	strh	r3, [r4, #0]
 8004078:	8823      	ldrh	r3, [r4, #0]
 800407a:	b29b      	uxth	r3, r3
 800407c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004084:	b29b      	uxth	r3, r3
 8004086:	8023      	strh	r3, [r4, #0]
 8004088:	e0f2      	b.n	8004270 <USB_EPStartXfer+0x52c>
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	2b3e      	cmp	r3, #62	; 0x3e
 800408e:	d810      	bhi.n	80040b2 <USB_EPStartXfer+0x36e>
 8004090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <USB_EPStartXfer+0x362>
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	3301      	adds	r3, #1
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	029b      	lsls	r3, r3, #10
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	8023      	strh	r3, [r4, #0]
 80040b0:	e0de      	b.n	8004270 <USB_EPStartXfer+0x52c>
 80040b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	61fb      	str	r3, [r7, #28]
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d102      	bne.n	80040c8 <USB_EPStartXfer+0x384>
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	029b      	lsls	r3, r3, #10
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d8:	b29b      	uxth	r3, r3
 80040da:	8023      	strh	r3, [r4, #0]
 80040dc:	e0c8      	b.n	8004270 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	785b      	ldrb	r3, [r3, #1]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d148      	bne.n	8004178 <USB_EPStartXfer+0x434>
 80040e6:	687c      	ldr	r4, [r7, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	441c      	add	r4, r3
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	4423      	add	r3, r4
 80040fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040fe:	461c      	mov	r4, r3
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10e      	bne.n	8004124 <USB_EPStartXfer+0x3e0>
 8004106:	8823      	ldrh	r3, [r4, #0]
 8004108:	b29b      	uxth	r3, r3
 800410a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800410e:	b29b      	uxth	r3, r3
 8004110:	8023      	strh	r3, [r4, #0]
 8004112:	8823      	ldrh	r3, [r4, #0]
 8004114:	b29b      	uxth	r3, r3
 8004116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800411a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800411e:	b29b      	uxth	r3, r3
 8004120:	8023      	strh	r3, [r4, #0]
 8004122:	e03d      	b.n	80041a0 <USB_EPStartXfer+0x45c>
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	2b3e      	cmp	r3, #62	; 0x3e
 8004128:	d810      	bhi.n	800414c <USB_EPStartXfer+0x408>
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	085b      	lsrs	r3, r3, #1
 800412e:	61bb      	str	r3, [r7, #24]
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <USB_EPStartXfer+0x3fc>
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	3301      	adds	r3, #1
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	b29b      	uxth	r3, r3
 8004144:	029b      	lsls	r3, r3, #10
 8004146:	b29b      	uxth	r3, r3
 8004148:	8023      	strh	r3, [r4, #0]
 800414a:	e029      	b.n	80041a0 <USB_EPStartXfer+0x45c>
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	61bb      	str	r3, [r7, #24]
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	2b00      	cmp	r3, #0
 800415a:	d102      	bne.n	8004162 <USB_EPStartXfer+0x41e>
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	3b01      	subs	r3, #1
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	b29b      	uxth	r3, r3
 8004166:	029b      	lsls	r3, r3, #10
 8004168:	b29b      	uxth	r3, r3
 800416a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800416e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004172:	b29b      	uxth	r3, r3
 8004174:	8023      	strh	r3, [r4, #0]
 8004176:	e013      	b.n	80041a0 <USB_EPStartXfer+0x45c>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	785b      	ldrb	r3, [r3, #1]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d10f      	bne.n	80041a0 <USB_EPStartXfer+0x45c>
 8004180:	687c      	ldr	r4, [r7, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004188:	b29b      	uxth	r3, r3
 800418a:	441c      	add	r4, r3
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	4423      	add	r3, r4
 8004194:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004198:	461c      	mov	r4, r3
 800419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419c:	b29b      	uxth	r3, r3
 800419e:	8023      	strh	r3, [r4, #0]
 80041a0:	687c      	ldr	r4, [r7, #4]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d14e      	bne.n	8004248 <USB_EPStartXfer+0x504>
 80041aa:	687c      	ldr	r4, [r7, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	441c      	add	r4, r3
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	4423      	add	r3, r4
 80041be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041c2:	461c      	mov	r4, r3
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10e      	bne.n	80041e8 <USB_EPStartXfer+0x4a4>
 80041ca:	8823      	ldrh	r3, [r4, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	8023      	strh	r3, [r4, #0]
 80041d6:	8823      	ldrh	r3, [r4, #0]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	8023      	strh	r3, [r4, #0]
 80041e6:	e043      	b.n	8004270 <USB_EPStartXfer+0x52c>
 80041e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ea:	2b3e      	cmp	r3, #62	; 0x3e
 80041ec:	d816      	bhi.n	800421c <USB_EPStartXfer+0x4d8>
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	085b      	lsrs	r3, r3, #1
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <USB_EPStartXfer+0x4c0>
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	3301      	adds	r3, #1
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	b29b      	uxth	r3, r3
 8004208:	029b      	lsls	r3, r3, #10
 800420a:	b29b      	uxth	r3, r3
 800420c:	8023      	strh	r3, [r4, #0]
 800420e:	e02f      	b.n	8004270 <USB_EPStartXfer+0x52c>
 8004210:	ffff80c0 	.word	0xffff80c0
 8004214:	ffffc080 	.word	0xffffc080
 8004218:	ffff8080 	.word	0xffff8080
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	f003 031f 	and.w	r3, r3, #31
 8004228:	2b00      	cmp	r3, #0
 800422a:	d102      	bne.n	8004232 <USB_EPStartXfer+0x4ee>
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	3b01      	subs	r3, #1
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	b29b      	uxth	r3, r3
 8004236:	029b      	lsls	r3, r3, #10
 8004238:	b29b      	uxth	r3, r3
 800423a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800423e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004242:	b29b      	uxth	r3, r3
 8004244:	8023      	strh	r3, [r4, #0]
 8004246:	e013      	b.n	8004270 <USB_EPStartXfer+0x52c>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	785b      	ldrb	r3, [r3, #1]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d10f      	bne.n	8004270 <USB_EPStartXfer+0x52c>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004256:	b29b      	uxth	r3, r3
 8004258:	441c      	add	r4, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	4423      	add	r3, r4
 8004262:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004266:	613b      	str	r3, [r7, #16]
 8004268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426a:	b29a      	uxth	r2, r3
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004286:	b29c      	uxth	r4, r3
 8004288:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800428c:	b29c      	uxth	r4, r3
 800428e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004292:	b29c      	uxth	r4, r3
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	441a      	add	r2, r3
 800429e:	4b04      	ldr	r3, [pc, #16]	; (80042b0 <USB_EPStartXfer+0x56c>)
 80042a0:	4323      	orrs	r3, r4
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3734      	adds	r7, #52	; 0x34
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd90      	pop	{r4, r7, pc}
 80042b0:	ffff8080 	.word	0xffff8080

080042b4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042b4:	b490      	push	{r4, r7}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	785b      	ldrb	r3, [r3, #1]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d018      	beq.n	80042f8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042dc:	b29c      	uxth	r4, r3
 80042de:	f084 0310 	eor.w	r3, r4, #16
 80042e2:	b29c      	uxth	r4, r3
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	441a      	add	r2, r3
 80042ee:	4b11      	ldr	r3, [pc, #68]	; (8004334 <USB_EPSetStall+0x80>)
 80042f0:	4323      	orrs	r3, r4
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	8013      	strh	r3, [r2, #0]
 80042f6:	e017      	b.n	8004328 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b29b      	uxth	r3, r3
 8004306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800430a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430e:	b29c      	uxth	r4, r3
 8004310:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004314:	b29c      	uxth	r4, r3
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	441a      	add	r2, r3
 8004320:	4b04      	ldr	r3, [pc, #16]	; (8004334 <USB_EPSetStall+0x80>)
 8004322:	4323      	orrs	r3, r4
 8004324:	b29b      	uxth	r3, r3
 8004326:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bc90      	pop	{r4, r7}
 8004332:	4770      	bx	lr
 8004334:	ffff8080 	.word	0xffff8080

08004338 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004338:	b490      	push	{r4, r7}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	7b1b      	ldrb	r3, [r3, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d17d      	bne.n	8004446 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	785b      	ldrb	r3, [r3, #1]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d03d      	beq.n	80043ce <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29c      	uxth	r4, r3
 8004360:	4623      	mov	r3, r4
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d014      	beq.n	8004394 <USB_EPClearStall+0x5c>
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	b29b      	uxth	r3, r3
 8004378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800437c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004380:	b29c      	uxth	r4, r3
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	441a      	add	r2, r3
 800438c:	4b31      	ldr	r3, [pc, #196]	; (8004454 <USB_EPClearStall+0x11c>)
 800438e:	4323      	orrs	r3, r4
 8004390:	b29b      	uxth	r3, r3
 8004392:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	78db      	ldrb	r3, [r3, #3]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d054      	beq.n	8004446 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b2:	b29c      	uxth	r4, r3
 80043b4:	f084 0320 	eor.w	r3, r4, #32
 80043b8:	b29c      	uxth	r4, r3
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	441a      	add	r2, r3
 80043c4:	4b24      	ldr	r3, [pc, #144]	; (8004458 <USB_EPClearStall+0x120>)
 80043c6:	4323      	orrs	r3, r4
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	8013      	strh	r3, [r2, #0]
 80043cc:	e03b      	b.n	8004446 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	b29c      	uxth	r4, r3
 80043dc:	4623      	mov	r3, r4
 80043de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d014      	beq.n	8004410 <USB_EPClearStall+0xd8>
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fc:	b29c      	uxth	r4, r3
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	441a      	add	r2, r3
 8004408:	4b14      	ldr	r3, [pc, #80]	; (800445c <USB_EPClearStall+0x124>)
 800440a:	4323      	orrs	r3, r4
 800440c:	b29b      	uxth	r3, r3
 800440e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	b29b      	uxth	r3, r3
 800441e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004426:	b29c      	uxth	r4, r3
 8004428:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800442c:	b29c      	uxth	r4, r3
 800442e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004432:	b29c      	uxth	r4, r3
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	441a      	add	r2, r3
 800443e:	4b06      	ldr	r3, [pc, #24]	; (8004458 <USB_EPClearStall+0x120>)
 8004440:	4323      	orrs	r3, r4
 8004442:	b29b      	uxth	r3, r3
 8004444:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bc90      	pop	{r4, r7}
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	ffff80c0 	.word	0xffff80c0
 8004458:	ffff8080 	.word	0xffff8080
 800445c:	ffffc080 	.word	0xffffc080

08004460 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d103      	bne.n	800447a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2280      	movs	r2, #128	; 0x80
 8004476:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr

08004486 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr

0800449a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr

080044ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b085      	sub	sp, #20
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044bc:	b29b      	uxth	r3, r3
 80044be:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80044c0:	68fb      	ldr	r3, [r7, #12]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr

080044e2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b08d      	sub	sp, #52	; 0x34
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	4611      	mov	r1, r2
 80044ee:	461a      	mov	r2, r3
 80044f0:	460b      	mov	r3, r1
 80044f2:	80fb      	strh	r3, [r7, #6]
 80044f4:	4613      	mov	r3, r2
 80044f6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80044f8:	88bb      	ldrh	r3, [r7, #4]
 80044fa:	3301      	adds	r3, #1
 80044fc:	085b      	lsrs	r3, r3, #1
 80044fe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004508:	88fb      	ldrh	r3, [r7, #6]
 800450a:	005a      	lsls	r2, r3, #1
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800451a:	e01e      	b.n	800455a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	3301      	adds	r3, #1
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	b29b      	uxth	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	4313      	orrs	r3, r2
 8004538:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	b29a      	uxth	r2, r3
 800453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004540:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004544:	3302      	adds	r3, #2
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	3302      	adds	r3, #2
 800454c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	3301      	adds	r3, #1
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004556:	3b01      	subs	r3, #1
 8004558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800455a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1dd      	bne.n	800451c <USB_WritePMA+0x3a>
  }
}
 8004560:	bf00      	nop
 8004562:	3734      	adds	r7, #52	; 0x34
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr

0800456a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800456a:	b480      	push	{r7}
 800456c:	b08b      	sub	sp, #44	; 0x2c
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	4611      	mov	r1, r2
 8004576:	461a      	mov	r2, r3
 8004578:	460b      	mov	r3, r1
 800457a:	80fb      	strh	r3, [r7, #6]
 800457c:	4613      	mov	r3, r2
 800457e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004580:	88bb      	ldrh	r3, [r7, #4]
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	b29b      	uxth	r3, r3
 8004586:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004590:	88fb      	ldrh	r3, [r7, #6]
 8004592:	005a      	lsls	r2, r3, #1
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800459c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
 80045a2:	e01b      	b.n	80045dc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	3302      	adds	r3, #2
 80045b0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	3301      	adds	r3, #1
 80045be:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	0a1b      	lsrs	r3, r3, #8
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	3301      	adds	r3, #1
 80045ce:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	3302      	adds	r3, #2
 80045d4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	3b01      	subs	r3, #1
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e0      	bne.n	80045a4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80045e2:	88bb      	ldrh	r3, [r7, #4]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	701a      	strb	r2, [r3, #0]
  }
}
 80045fe:	bf00      	nop
 8004600:	372c      	adds	r7, #44	; 0x2c
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	7c1b      	ldrb	r3, [r3, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d115      	bne.n	800464c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004620:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004624:	2202      	movs	r2, #2
 8004626:	2181      	movs	r1, #129	; 0x81
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f001 fe6c 	bl	8006306 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004638:	2202      	movs	r2, #2
 800463a:	2101      	movs	r1, #1
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f001 fe62 	bl	8006306 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800464a:	e012      	b.n	8004672 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800464c:	2340      	movs	r3, #64	; 0x40
 800464e:	2202      	movs	r2, #2
 8004650:	2181      	movs	r1, #129	; 0x81
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f001 fe57 	bl	8006306 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800465e:	2340      	movs	r3, #64	; 0x40
 8004660:	2202      	movs	r2, #2
 8004662:	2101      	movs	r1, #1
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f001 fe4e 	bl	8006306 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004672:	2308      	movs	r3, #8
 8004674:	2203      	movs	r2, #3
 8004676:	2182      	movs	r1, #130	; 0x82
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f001 fe44 	bl	8006306 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004684:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004688:	f001 ff5e 	bl	8006548 <USBD_static_malloc>
 800468c:	4602      	mov	r2, r0
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800469e:	2301      	movs	r3, #1
 80046a0:	73fb      	strb	r3, [r7, #15]
 80046a2:	e026      	b.n	80046f2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046aa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	7c1b      	ldrb	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046d8:	2101      	movs	r1, #1
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f001 fefd 	bl	80064da <USBD_LL_PrepareReceive>
 80046e0:	e007      	b.n	80046f2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046e8:	2340      	movs	r3, #64	; 0x40
 80046ea:	2101      	movs	r1, #1
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f001 fef4 	bl	80064da <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800470c:	2181      	movs	r1, #129	; 0x81
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f001 fe1f 	bl	8006352 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800471a:	2101      	movs	r1, #1
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f001 fe18 	bl	8006352 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800472a:	2182      	movs	r1, #130	; 0x82
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f001 fe10 	bl	8006352 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00e      	beq.n	8004760 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004752:	4618      	mov	r0, r3
 8004754:	f001 ff04 	bl	8006560 <USBD_static_free>
    pdev->pClassData = NULL;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004760:	7bfb      	ldrb	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b086      	sub	sp, #24
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800477a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004790:	2b00      	cmp	r3, #0
 8004792:	d039      	beq.n	8004808 <USBD_CDC_Setup+0x9e>
 8004794:	2b20      	cmp	r3, #32
 8004796:	d17c      	bne.n	8004892 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	88db      	ldrh	r3, [r3, #6]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d029      	beq.n	80047f4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	b25b      	sxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	da11      	bge.n	80047ce <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80047b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	88d2      	ldrh	r2, [r2, #6]
 80047bc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80047be:	6939      	ldr	r1, [r7, #16]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	88db      	ldrh	r3, [r3, #6]
 80047c4:	461a      	mov	r2, r3
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f001 f9f6 	bl	8005bb8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80047cc:	e068      	b.n	80048a0 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	785a      	ldrb	r2, [r3, #1]
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	88db      	ldrh	r3, [r3, #6]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80047e4:	6939      	ldr	r1, [r7, #16]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	88db      	ldrh	r3, [r3, #6]
 80047ea:	461a      	mov	r2, r3
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f001 fa11 	bl	8005c14 <USBD_CtlPrepareRx>
      break;
 80047f2:	e055      	b.n	80048a0 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	7850      	ldrb	r0, [r2, #1]
 8004800:	2200      	movs	r2, #0
 8004802:	6839      	ldr	r1, [r7, #0]
 8004804:	4798      	blx	r3
      break;
 8004806:	e04b      	b.n	80048a0 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	785b      	ldrb	r3, [r3, #1]
 800480c:	2b0a      	cmp	r3, #10
 800480e:	d017      	beq.n	8004840 <USBD_CDC_Setup+0xd6>
 8004810:	2b0b      	cmp	r3, #11
 8004812:	d029      	beq.n	8004868 <USBD_CDC_Setup+0xfe>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d133      	bne.n	8004880 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800481e:	2b03      	cmp	r3, #3
 8004820:	d107      	bne.n	8004832 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004822:	f107 030c 	add.w	r3, r7, #12
 8004826:	2202      	movs	r2, #2
 8004828:	4619      	mov	r1, r3
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f001 f9c4 	bl	8005bb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004830:	e02e      	b.n	8004890 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004832:	6839      	ldr	r1, [r7, #0]
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f001 f955 	bl	8005ae4 <USBD_CtlError>
            ret = USBD_FAIL;
 800483a:	2302      	movs	r3, #2
 800483c:	75fb      	strb	r3, [r7, #23]
          break;
 800483e:	e027      	b.n	8004890 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004846:	2b03      	cmp	r3, #3
 8004848:	d107      	bne.n	800485a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800484a:	f107 030f 	add.w	r3, r7, #15
 800484e:	2201      	movs	r2, #1
 8004850:	4619      	mov	r1, r3
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f001 f9b0 	bl	8005bb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004858:	e01a      	b.n	8004890 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800485a:	6839      	ldr	r1, [r7, #0]
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f001 f941 	bl	8005ae4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004862:	2302      	movs	r3, #2
 8004864:	75fb      	strb	r3, [r7, #23]
          break;
 8004866:	e013      	b.n	8004890 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800486e:	2b03      	cmp	r3, #3
 8004870:	d00d      	beq.n	800488e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004872:	6839      	ldr	r1, [r7, #0]
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f001 f935 	bl	8005ae4 <USBD_CtlError>
            ret = USBD_FAIL;
 800487a:	2302      	movs	r3, #2
 800487c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800487e:	e006      	b.n	800488e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004880:	6839      	ldr	r1, [r7, #0]
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f001 f92e 	bl	8005ae4 <USBD_CtlError>
          ret = USBD_FAIL;
 8004888:	2302      	movs	r3, #2
 800488a:	75fb      	strb	r3, [r7, #23]
          break;
 800488c:	e000      	b.n	8004890 <USBD_CDC_Setup+0x126>
          break;
 800488e:	bf00      	nop
      }
      break;
 8004890:	e006      	b.n	80048a0 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004892:	6839      	ldr	r1, [r7, #0]
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f001 f925 	bl	8005ae4 <USBD_CtlError>
      ret = USBD_FAIL;
 800489a:	2302      	movs	r3, #2
 800489c:	75fb      	strb	r3, [r7, #23]
      break;
 800489e:	bf00      	nop
  }

  return ret;
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	460b      	mov	r3, r1
 80048b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048bc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048c4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d037      	beq.n	8004940 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	331c      	adds	r3, #28
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d026      	beq.n	8004934 <USBD_CDC_DataIn+0x8a>
 80048e6:	78fa      	ldrb	r2, [r7, #3]
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	331c      	adds	r3, #28
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	78fa      	ldrb	r2, [r7, #3]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	0152      	lsls	r2, r2, #5
 80048fe:	440a      	add	r2, r1
 8004900:	3238      	adds	r2, #56	; 0x38
 8004902:	6812      	ldr	r2, [r2, #0]
 8004904:	fbb3 f1f2 	udiv	r1, r3, r2
 8004908:	fb02 f201 	mul.w	r2, r2, r1
 800490c:	1a9b      	subs	r3, r3, r2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d110      	bne.n	8004934 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004912:	78fa      	ldrb	r2, [r7, #3]
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	4613      	mov	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	440b      	add	r3, r1
 8004920:	331c      	adds	r3, #28
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004926:	78f9      	ldrb	r1, [r7, #3]
 8004928:	2300      	movs	r3, #0
 800492a:	2200      	movs	r2, #0
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f001 fdb1 	bl	8006494 <USBD_LL_Transmit>
 8004932:	e003      	b.n	800493c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800493c:	2300      	movs	r3, #0
 800493e:	e000      	b.n	8004942 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8004940:	2302      	movs	r3, #2
  }
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	460b      	mov	r3, r1
 8004954:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800495c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	4619      	mov	r1, r3
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f001 fddc 	bl	8006520 <USBD_LL_GetRxDataSize>
 8004968:	4602      	mov	r2, r0
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00d      	beq.n	8004996 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800498e:	4611      	mov	r1, r2
 8004990:	4798      	blx	r3

    return USBD_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e000      	b.n	8004998 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004996:	2302      	movs	r3, #2
  }
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049ae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d015      	beq.n	80049e6 <USBD_CDC_EP0_RxReady+0x46>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80049c0:	2bff      	cmp	r3, #255	; 0xff
 80049c2:	d010      	beq.n	80049e6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80049d2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80049da:	b292      	uxth	r2, r2
 80049dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	22ff      	movs	r2, #255	; 0xff
 80049e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2243      	movs	r2, #67	; 0x43
 80049fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80049fe:	4b03      	ldr	r3, [pc, #12]	; (8004a0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20000094 	.word	0x20000094

08004a10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2243      	movs	r2, #67	; 0x43
 8004a1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004a1e:	4b03      	ldr	r3, [pc, #12]	; (8004a2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bc80      	pop	{r7}
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	20000050 	.word	0x20000050

08004a30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2243      	movs	r2, #67	; 0x43
 8004a3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004a3e:	4b03      	ldr	r3, [pc, #12]	; (8004a4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	200000d8 	.word	0x200000d8

08004a50 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	220a      	movs	r2, #10
 8004a5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004a5e:	4b03      	ldr	r3, [pc, #12]	; (8004a6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	2000000c 	.word	0x2000000c

08004a70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ab0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004aba:	88fa      	ldrh	r2, [r7, #6]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bc80      	pop	{r7}
 8004acc:	4770      	bx	lr

08004ace <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ade:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr

08004af4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d01c      	beq.n	8004b48 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d115      	bne.n	8004b44 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2181      	movs	r1, #129	; 0x81
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f001 fcaa 	bl	8006494 <USBD_LL_Transmit>

      return USBD_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	e002      	b.n	8004b4a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004b48:	2302      	movs	r3, #2
  }
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b60:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d017      	beq.n	8004b9c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	7c1b      	ldrb	r3, [r3, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b7e:	2101      	movs	r1, #1
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f001 fcaa 	bl	80064da <USBD_LL_PrepareReceive>
 8004b86:	e007      	b.n	8004b98 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b8e:	2340      	movs	r3, #64	; 0x40
 8004b90:	2101      	movs	r1, #1
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f001 fca1 	bl	80064da <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e000      	b.n	8004b9e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004b9c:	2302      	movs	r3, #2
  }
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e01a      	b.n	8004bf4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	79fa      	ldrb	r2, [r7, #7]
 8004bea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f001 fb15 	bl	800621c <USBD_LL_Init>

  return USBD_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d006      	beq.n	8004c1e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	73fb      	strb	r3, [r7, #15]
 8004c1c:	e001      	b.n	8004c22 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004c1e:	2302      	movs	r3, #2
 8004c20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr

08004c2e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f001 fb4a 	bl	80062d0 <USBD_LL_Start>

  return USBD_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bc80      	pop	{r7}
 8004c58:	4770      	bx	lr

08004c5a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	460b      	mov	r3, r1
 8004c64:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004c66:	2302      	movs	r3, #2
 8004c68:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00c      	beq.n	8004c8e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	78fa      	ldrb	r2, [r7, #3]
 8004c7e:	4611      	mov	r1, r2
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	78fa      	ldrb	r2, [r7, #3]
 8004cae:	4611      	mov	r1, r2
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	4798      	blx	r3

  return USBD_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004cce:	6839      	ldr	r1, [r7, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fecb 	bl	8005a6c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004cf2:	f003 031f 	and.w	r3, r3, #31
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d00c      	beq.n	8004d14 <USBD_LL_SetupStage+0x56>
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d302      	bcc.n	8004d04 <USBD_LL_SetupStage+0x46>
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d010      	beq.n	8004d24 <USBD_LL_SetupStage+0x66>
 8004d02:	e017      	b.n	8004d34 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f9cb 	bl	80050a8 <USBD_StdDevReq>
      break;
 8004d12:	e01a      	b.n	8004d4a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fa2d 	bl	800517c <USBD_StdItfReq>
      break;
 8004d22:	e012      	b.n	8004d4a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fa6b 	bl	8005208 <USBD_StdEPReq>
      break;
 8004d32:	e00a      	b.n	8004d4a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	4619      	mov	r1, r3
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f001 fb24 	bl	8006390 <USBD_LL_StallEP>
      break;
 8004d48:	bf00      	nop
  }

  return USBD_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004d62:	7afb      	ldrb	r3, [r7, #11]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d14b      	bne.n	8004e00 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004d6e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d134      	bne.n	8004de4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d919      	bls.n	8004dba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	1ad2      	subs	r2, r2, r3
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d203      	bcs.n	8004da8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	e002      	b.n	8004dae <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	461a      	mov	r2, r3
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 ff4c 	bl	8005c50 <USBD_CtlContinueRx>
 8004db8:	e038      	b.n	8004e2c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d105      	bne.n	8004ddc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 ff49 	bl	8005c74 <USBD_CtlSendStatus>
 8004de2:	e023      	b.n	8004e2c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004dea:	2b05      	cmp	r3, #5
 8004dec:	d11e      	bne.n	8004e2c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004df6:	2100      	movs	r1, #0
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f001 fac9 	bl	8006390 <USBD_LL_StallEP>
 8004dfe:	e015      	b.n	8004e2c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00d      	beq.n	8004e28 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d108      	bne.n	8004e28 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	7afa      	ldrb	r2, [r7, #11]
 8004e20:	4611      	mov	r1, r2
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	4798      	blx	r3
 8004e26:	e001      	b.n	8004e2c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e000      	b.n	8004e2e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b086      	sub	sp, #24
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004e44:	7afb      	ldrb	r3, [r7, #11]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d17f      	bne.n	8004f4a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	3314      	adds	r3, #20
 8004e4e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d15c      	bne.n	8004f14 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d915      	bls.n	8004e92 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	1ad2      	subs	r2, r2, r3
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 feb6 	bl	8005bf0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e84:	2300      	movs	r3, #0
 8004e86:	2200      	movs	r2, #0
 8004e88:	2100      	movs	r1, #0
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f001 fb25 	bl	80064da <USBD_LL_PrepareReceive>
 8004e90:	e04e      	b.n	8004f30 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	6912      	ldr	r2, [r2, #16]
 8004e9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e9e:	fb02 f201 	mul.w	r2, r2, r1
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d11c      	bne.n	8004ee2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d316      	bcc.n	8004ee2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d20f      	bcs.n	8004ee2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fe92 	bl	8005bf0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2100      	movs	r1, #0
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f001 fafd 	bl	80064da <USBD_LL_PrepareReceive>
 8004ee0:	e026      	b.n	8004f30 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d105      	bne.n	8004f04 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004f04:	2180      	movs	r1, #128	; 0x80
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f001 fa42 	bl	8006390 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 fec4 	bl	8005c9a <USBD_CtlReceiveStatus>
 8004f12:	e00d      	b.n	8004f30 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d004      	beq.n	8004f28 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d103      	bne.n	8004f30 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004f28:	2180      	movs	r1, #128	; 0x80
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f001 fa30 	bl	8006390 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d11d      	bne.n	8004f76 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f7ff fe83 	bl	8004c46 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004f48:	e015      	b.n	8004f76 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00d      	beq.n	8004f72 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d108      	bne.n	8004f72 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	7afa      	ldrb	r2, [r7, #11]
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	4798      	blx	r3
 8004f70:	e001      	b.n	8004f76 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004f72:	2302      	movs	r3, #2
 8004f74:	e000      	b.n	8004f78 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f88:	2340      	movs	r3, #64	; 0x40
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f001 f9b9 	bl	8006306 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2240      	movs	r2, #64	; 0x40
 8004fa0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004fa4:	2340      	movs	r3, #64	; 0x40
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	2180      	movs	r1, #128	; 0x80
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f001 f9ab 	bl	8006306 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2240      	movs	r2, #64	; 0x40
 8004fba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d009      	beq.n	8004ff8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6852      	ldr	r2, [r2, #4]
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	4798      	blx	r3
  }

  return USBD_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	78fa      	ldrb	r2, [r7, #3]
 8005012:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr

08005020 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2204      	movs	r2, #4
 8005038:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr

08005048 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005056:	2b04      	cmp	r3, #4
 8005058:	d105      	bne.n	8005066 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr

08005072 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005080:	2b03      	cmp	r3, #3
 8005082:	d10b      	bne.n	800509c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050be:	2b20      	cmp	r3, #32
 80050c0:	d004      	beq.n	80050cc <USBD_StdDevReq+0x24>
 80050c2:	2b40      	cmp	r3, #64	; 0x40
 80050c4:	d002      	beq.n	80050cc <USBD_StdDevReq+0x24>
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d008      	beq.n	80050dc <USBD_StdDevReq+0x34>
 80050ca:	e04c      	b.n	8005166 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	6839      	ldr	r1, [r7, #0]
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	4798      	blx	r3
      break;
 80050da:	e049      	b.n	8005170 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	2b09      	cmp	r3, #9
 80050e2:	d83a      	bhi.n	800515a <USBD_StdDevReq+0xb2>
 80050e4:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <USBD_StdDevReq+0x44>)
 80050e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ea:	bf00      	nop
 80050ec:	0800513d 	.word	0x0800513d
 80050f0:	08005151 	.word	0x08005151
 80050f4:	0800515b 	.word	0x0800515b
 80050f8:	08005147 	.word	0x08005147
 80050fc:	0800515b 	.word	0x0800515b
 8005100:	0800511f 	.word	0x0800511f
 8005104:	08005115 	.word	0x08005115
 8005108:	0800515b 	.word	0x0800515b
 800510c:	08005133 	.word	0x08005133
 8005110:	08005129 	.word	0x08005129
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005114:	6839      	ldr	r1, [r7, #0]
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f9d4 	bl	80054c4 <USBD_GetDescriptor>
          break;
 800511c:	e022      	b.n	8005164 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800511e:	6839      	ldr	r1, [r7, #0]
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fb37 	bl	8005794 <USBD_SetAddress>
          break;
 8005126:	e01d      	b.n	8005164 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005128:	6839      	ldr	r1, [r7, #0]
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fb74 	bl	8005818 <USBD_SetConfig>
          break;
 8005130:	e018      	b.n	8005164 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005132:	6839      	ldr	r1, [r7, #0]
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fbfd 	bl	8005934 <USBD_GetConfig>
          break;
 800513a:	e013      	b.n	8005164 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800513c:	6839      	ldr	r1, [r7, #0]
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fc2c 	bl	800599c <USBD_GetStatus>
          break;
 8005144:	e00e      	b.n	8005164 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005146:	6839      	ldr	r1, [r7, #0]
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fc5a 	bl	8005a02 <USBD_SetFeature>
          break;
 800514e:	e009      	b.n	8005164 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005150:	6839      	ldr	r1, [r7, #0]
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fc69 	bl	8005a2a <USBD_ClrFeature>
          break;
 8005158:	e004      	b.n	8005164 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800515a:	6839      	ldr	r1, [r7, #0]
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fcc1 	bl	8005ae4 <USBD_CtlError>
          break;
 8005162:	bf00      	nop
      }
      break;
 8005164:	e004      	b.n	8005170 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005166:	6839      	ldr	r1, [r7, #0]
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fcbb 	bl	8005ae4 <USBD_CtlError>
      break;
 800516e:	bf00      	nop
  }

  return ret;
 8005170:	7bfb      	ldrb	r3, [r7, #15]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop

0800517c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005192:	2b20      	cmp	r3, #32
 8005194:	d003      	beq.n	800519e <USBD_StdItfReq+0x22>
 8005196:	2b40      	cmp	r3, #64	; 0x40
 8005198:	d001      	beq.n	800519e <USBD_StdItfReq+0x22>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d12a      	bne.n	80051f4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051a4:	3b01      	subs	r3, #1
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d81d      	bhi.n	80051e6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	889b      	ldrh	r3, [r3, #4]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d813      	bhi.n	80051dc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	6839      	ldr	r1, [r7, #0]
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	4798      	blx	r3
 80051c2:	4603      	mov	r3, r0
 80051c4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	88db      	ldrh	r3, [r3, #6]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d110      	bne.n	80051f0 <USBD_StdItfReq+0x74>
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10d      	bne.n	80051f0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fd4d 	bl	8005c74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80051da:	e009      	b.n	80051f0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80051dc:	6839      	ldr	r1, [r7, #0]
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fc80 	bl	8005ae4 <USBD_CtlError>
          break;
 80051e4:	e004      	b.n	80051f0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80051e6:	6839      	ldr	r1, [r7, #0]
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fc7b 	bl	8005ae4 <USBD_CtlError>
          break;
 80051ee:	e000      	b.n	80051f2 <USBD_StdItfReq+0x76>
          break;
 80051f0:	bf00      	nop
      }
      break;
 80051f2:	e004      	b.n	80051fe <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80051f4:	6839      	ldr	r1, [r7, #0]
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fc74 	bl	8005ae4 <USBD_CtlError>
      break;
 80051fc:	bf00      	nop
  }

  return USBD_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	889b      	ldrh	r3, [r3, #4]
 800521a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005224:	2b20      	cmp	r3, #32
 8005226:	d004      	beq.n	8005232 <USBD_StdEPReq+0x2a>
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d002      	beq.n	8005232 <USBD_StdEPReq+0x2a>
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <USBD_StdEPReq+0x3a>
 8005230:	e13d      	b.n	80054ae <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	6839      	ldr	r1, [r7, #0]
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	4798      	blx	r3
      break;
 8005240:	e13a      	b.n	80054b8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800524a:	2b20      	cmp	r3, #32
 800524c:	d10a      	bne.n	8005264 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	6839      	ldr	r1, [r7, #0]
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	4798      	blx	r3
 800525c:	4603      	mov	r3, r0
 800525e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	e12a      	b.n	80054ba <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	785b      	ldrb	r3, [r3, #1]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d03e      	beq.n	80052ea <USBD_StdEPReq+0xe2>
 800526c:	2b03      	cmp	r3, #3
 800526e:	d002      	beq.n	8005276 <USBD_StdEPReq+0x6e>
 8005270:	2b00      	cmp	r3, #0
 8005272:	d070      	beq.n	8005356 <USBD_StdEPReq+0x14e>
 8005274:	e115      	b.n	80054a2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800527c:	2b02      	cmp	r3, #2
 800527e:	d002      	beq.n	8005286 <USBD_StdEPReq+0x7e>
 8005280:	2b03      	cmp	r3, #3
 8005282:	d015      	beq.n	80052b0 <USBD_StdEPReq+0xa8>
 8005284:	e02b      	b.n	80052de <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005286:	7bbb      	ldrb	r3, [r7, #14]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00c      	beq.n	80052a6 <USBD_StdEPReq+0x9e>
 800528c:	7bbb      	ldrb	r3, [r7, #14]
 800528e:	2b80      	cmp	r3, #128	; 0x80
 8005290:	d009      	beq.n	80052a6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005292:	7bbb      	ldrb	r3, [r7, #14]
 8005294:	4619      	mov	r1, r3
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f001 f87a 	bl	8006390 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800529c:	2180      	movs	r1, #128	; 0x80
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f001 f876 	bl	8006390 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80052a4:	e020      	b.n	80052e8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80052a6:	6839      	ldr	r1, [r7, #0]
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 fc1b 	bl	8005ae4 <USBD_CtlError>
              break;
 80052ae:	e01b      	b.n	80052e8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	885b      	ldrh	r3, [r3, #2]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10e      	bne.n	80052d6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80052b8:	7bbb      	ldrb	r3, [r7, #14]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00b      	beq.n	80052d6 <USBD_StdEPReq+0xce>
 80052be:	7bbb      	ldrb	r3, [r7, #14]
 80052c0:	2b80      	cmp	r3, #128	; 0x80
 80052c2:	d008      	beq.n	80052d6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	88db      	ldrh	r3, [r3, #6]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d104      	bne.n	80052d6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80052cc:	7bbb      	ldrb	r3, [r7, #14]
 80052ce:	4619      	mov	r1, r3
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f001 f85d 	bl	8006390 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fccc 	bl	8005c74 <USBD_CtlSendStatus>

              break;
 80052dc:	e004      	b.n	80052e8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80052de:	6839      	ldr	r1, [r7, #0]
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fbff 	bl	8005ae4 <USBD_CtlError>
              break;
 80052e6:	bf00      	nop
          }
          break;
 80052e8:	e0e0      	b.n	80054ac <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d002      	beq.n	80052fa <USBD_StdEPReq+0xf2>
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d015      	beq.n	8005324 <USBD_StdEPReq+0x11c>
 80052f8:	e026      	b.n	8005348 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80052fa:	7bbb      	ldrb	r3, [r7, #14]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00c      	beq.n	800531a <USBD_StdEPReq+0x112>
 8005300:	7bbb      	ldrb	r3, [r7, #14]
 8005302:	2b80      	cmp	r3, #128	; 0x80
 8005304:	d009      	beq.n	800531a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005306:	7bbb      	ldrb	r3, [r7, #14]
 8005308:	4619      	mov	r1, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f001 f840 	bl	8006390 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005310:	2180      	movs	r1, #128	; 0x80
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f001 f83c 	bl	8006390 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005318:	e01c      	b.n	8005354 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800531a:	6839      	ldr	r1, [r7, #0]
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fbe1 	bl	8005ae4 <USBD_CtlError>
              break;
 8005322:	e017      	b.n	8005354 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	885b      	ldrh	r3, [r3, #2]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d112      	bne.n	8005352 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800532c:	7bbb      	ldrb	r3, [r7, #14]
 800532e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005332:	2b00      	cmp	r3, #0
 8005334:	d004      	beq.n	8005340 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005336:	7bbb      	ldrb	r3, [r7, #14]
 8005338:	4619      	mov	r1, r3
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f001 f847 	bl	80063ce <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fc97 	bl	8005c74 <USBD_CtlSendStatus>
              }
              break;
 8005346:	e004      	b.n	8005352 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fbca 	bl	8005ae4 <USBD_CtlError>
              break;
 8005350:	e000      	b.n	8005354 <USBD_StdEPReq+0x14c>
              break;
 8005352:	bf00      	nop
          }
          break;
 8005354:	e0aa      	b.n	80054ac <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800535c:	2b02      	cmp	r3, #2
 800535e:	d002      	beq.n	8005366 <USBD_StdEPReq+0x15e>
 8005360:	2b03      	cmp	r3, #3
 8005362:	d032      	beq.n	80053ca <USBD_StdEPReq+0x1c2>
 8005364:	e097      	b.n	8005496 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005366:	7bbb      	ldrb	r3, [r7, #14]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d007      	beq.n	800537c <USBD_StdEPReq+0x174>
 800536c:	7bbb      	ldrb	r3, [r7, #14]
 800536e:	2b80      	cmp	r3, #128	; 0x80
 8005370:	d004      	beq.n	800537c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005372:	6839      	ldr	r1, [r7, #0]
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fbb5 	bl	8005ae4 <USBD_CtlError>
                break;
 800537a:	e091      	b.n	80054a0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800537c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005380:	2b00      	cmp	r3, #0
 8005382:	da0b      	bge.n	800539c <USBD_StdEPReq+0x194>
 8005384:	7bbb      	ldrb	r3, [r7, #14]
 8005386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	3310      	adds	r3, #16
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	4413      	add	r3, r2
 8005398:	3304      	adds	r3, #4
 800539a:	e00b      	b.n	80053b4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800539c:	7bbb      	ldrb	r3, [r7, #14]
 800539e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	4413      	add	r3, r2
 80053b2:	3304      	adds	r3, #4
 80053b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2202      	movs	r2, #2
 80053c0:	4619      	mov	r1, r3
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fbf8 	bl	8005bb8 <USBD_CtlSendData>
              break;
 80053c8:	e06a      	b.n	80054a0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80053ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	da11      	bge.n	80053f6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80053d2:	7bbb      	ldrb	r3, [r7, #14]
 80053d4:	f003 020f 	and.w	r2, r3, #15
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	4613      	mov	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	440b      	add	r3, r1
 80053e4:	3318      	adds	r3, #24
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d117      	bne.n	800541c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80053ec:	6839      	ldr	r1, [r7, #0]
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fb78 	bl	8005ae4 <USBD_CtlError>
                  break;
 80053f4:	e054      	b.n	80054a0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80053f6:	7bbb      	ldrb	r3, [r7, #14]
 80053f8:	f003 020f 	and.w	r2, r3, #15
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	4613      	mov	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	440b      	add	r3, r1
 8005408:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d104      	bne.n	800541c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005412:	6839      	ldr	r1, [r7, #0]
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fb65 	bl	8005ae4 <USBD_CtlError>
                  break;
 800541a:	e041      	b.n	80054a0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800541c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005420:	2b00      	cmp	r3, #0
 8005422:	da0b      	bge.n	800543c <USBD_StdEPReq+0x234>
 8005424:	7bbb      	ldrb	r3, [r7, #14]
 8005426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800542a:	4613      	mov	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	3310      	adds	r3, #16
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	4413      	add	r3, r2
 8005438:	3304      	adds	r3, #4
 800543a:	e00b      	b.n	8005454 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800543c:	7bbb      	ldrb	r3, [r7, #14]
 800543e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	4413      	add	r3, r2
 8005452:	3304      	adds	r3, #4
 8005454:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005456:	7bbb      	ldrb	r3, [r7, #14]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <USBD_StdEPReq+0x25a>
 800545c:	7bbb      	ldrb	r3, [r7, #14]
 800545e:	2b80      	cmp	r3, #128	; 0x80
 8005460:	d103      	bne.n	800546a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	e00e      	b.n	8005488 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800546a:	7bbb      	ldrb	r3, [r7, #14]
 800546c:	4619      	mov	r1, r3
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 ffcc 	bl	800640c <USBD_LL_IsStallEP>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2201      	movs	r2, #1
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	e002      	b.n	8005488 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2202      	movs	r2, #2
 800548c:	4619      	mov	r1, r3
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fb92 	bl	8005bb8 <USBD_CtlSendData>
              break;
 8005494:	e004      	b.n	80054a0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005496:	6839      	ldr	r1, [r7, #0]
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fb23 	bl	8005ae4 <USBD_CtlError>
              break;
 800549e:	bf00      	nop
          }
          break;
 80054a0:	e004      	b.n	80054ac <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80054a2:	6839      	ldr	r1, [r7, #0]
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fb1d 	bl	8005ae4 <USBD_CtlError>
          break;
 80054aa:	bf00      	nop
      }
      break;
 80054ac:	e004      	b.n	80054b8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80054ae:	6839      	ldr	r1, [r7, #0]
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 fb17 	bl	8005ae4 <USBD_CtlError>
      break;
 80054b6:	bf00      	nop
  }

  return ret;
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	885b      	ldrh	r3, [r3, #2]
 80054de:	0a1b      	lsrs	r3, r3, #8
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	3b01      	subs	r3, #1
 80054e4:	2b06      	cmp	r3, #6
 80054e6:	f200 8128 	bhi.w	800573a <USBD_GetDescriptor+0x276>
 80054ea:	a201      	add	r2, pc, #4	; (adr r2, 80054f0 <USBD_GetDescriptor+0x2c>)
 80054ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f0:	0800550d 	.word	0x0800550d
 80054f4:	08005525 	.word	0x08005525
 80054f8:	08005565 	.word	0x08005565
 80054fc:	0800573b 	.word	0x0800573b
 8005500:	0800573b 	.word	0x0800573b
 8005504:	080056db 	.word	0x080056db
 8005508:	08005707 	.word	0x08005707
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	7c12      	ldrb	r2, [r2, #16]
 8005518:	f107 0108 	add.w	r1, r7, #8
 800551c:	4610      	mov	r0, r2
 800551e:	4798      	blx	r3
 8005520:	60f8      	str	r0, [r7, #12]
      break;
 8005522:	e112      	b.n	800574a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	7c1b      	ldrb	r3, [r3, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10d      	bne.n	8005548 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005534:	f107 0208 	add.w	r2, r7, #8
 8005538:	4610      	mov	r0, r2
 800553a:	4798      	blx	r3
 800553c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	3301      	adds	r3, #1
 8005542:	2202      	movs	r2, #2
 8005544:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005546:	e100      	b.n	800574a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	f107 0208 	add.w	r2, r7, #8
 8005554:	4610      	mov	r0, r2
 8005556:	4798      	blx	r3
 8005558:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3301      	adds	r3, #1
 800555e:	2202      	movs	r2, #2
 8005560:	701a      	strb	r2, [r3, #0]
      break;
 8005562:	e0f2      	b.n	800574a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	885b      	ldrh	r3, [r3, #2]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b05      	cmp	r3, #5
 800556c:	f200 80ac 	bhi.w	80056c8 <USBD_GetDescriptor+0x204>
 8005570:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <USBD_GetDescriptor+0xb4>)
 8005572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005576:	bf00      	nop
 8005578:	08005591 	.word	0x08005591
 800557c:	080055c5 	.word	0x080055c5
 8005580:	080055f9 	.word	0x080055f9
 8005584:	0800562d 	.word	0x0800562d
 8005588:	08005661 	.word	0x08005661
 800558c:	08005695 	.word	0x08005695
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00b      	beq.n	80055b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	7c12      	ldrb	r2, [r2, #16]
 80055a8:	f107 0108 	add.w	r1, r7, #8
 80055ac:	4610      	mov	r0, r2
 80055ae:	4798      	blx	r3
 80055b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055b2:	e091      	b.n	80056d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055b4:	6839      	ldr	r1, [r7, #0]
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fa94 	bl	8005ae4 <USBD_CtlError>
            err++;
 80055bc:	7afb      	ldrb	r3, [r7, #11]
 80055be:	3301      	adds	r3, #1
 80055c0:	72fb      	strb	r3, [r7, #11]
          break;
 80055c2:	e089      	b.n	80056d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00b      	beq.n	80055e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	7c12      	ldrb	r2, [r2, #16]
 80055dc:	f107 0108 	add.w	r1, r7, #8
 80055e0:	4610      	mov	r0, r2
 80055e2:	4798      	blx	r3
 80055e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055e6:	e077      	b.n	80056d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fa7a 	bl	8005ae4 <USBD_CtlError>
            err++;
 80055f0:	7afb      	ldrb	r3, [r7, #11]
 80055f2:	3301      	adds	r3, #1
 80055f4:	72fb      	strb	r3, [r7, #11]
          break;
 80055f6:	e06f      	b.n	80056d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00b      	beq.n	800561c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	7c12      	ldrb	r2, [r2, #16]
 8005610:	f107 0108 	add.w	r1, r7, #8
 8005614:	4610      	mov	r0, r2
 8005616:	4798      	blx	r3
 8005618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800561a:	e05d      	b.n	80056d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800561c:	6839      	ldr	r1, [r7, #0]
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa60 	bl	8005ae4 <USBD_CtlError>
            err++;
 8005624:	7afb      	ldrb	r3, [r7, #11]
 8005626:	3301      	adds	r3, #1
 8005628:	72fb      	strb	r3, [r7, #11]
          break;
 800562a:	e055      	b.n	80056d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00b      	beq.n	8005650 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	7c12      	ldrb	r2, [r2, #16]
 8005644:	f107 0108 	add.w	r1, r7, #8
 8005648:	4610      	mov	r0, r2
 800564a:	4798      	blx	r3
 800564c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800564e:	e043      	b.n	80056d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fa46 	bl	8005ae4 <USBD_CtlError>
            err++;
 8005658:	7afb      	ldrb	r3, [r7, #11]
 800565a:	3301      	adds	r3, #1
 800565c:	72fb      	strb	r3, [r7, #11]
          break;
 800565e:	e03b      	b.n	80056d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00b      	beq.n	8005684 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	7c12      	ldrb	r2, [r2, #16]
 8005678:	f107 0108 	add.w	r1, r7, #8
 800567c:	4610      	mov	r0, r2
 800567e:	4798      	blx	r3
 8005680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005682:	e029      	b.n	80056d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005684:	6839      	ldr	r1, [r7, #0]
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fa2c 	bl	8005ae4 <USBD_CtlError>
            err++;
 800568c:	7afb      	ldrb	r3, [r7, #11]
 800568e:	3301      	adds	r3, #1
 8005690:	72fb      	strb	r3, [r7, #11]
          break;
 8005692:	e021      	b.n	80056d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00b      	beq.n	80056b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	7c12      	ldrb	r2, [r2, #16]
 80056ac:	f107 0108 	add.w	r1, r7, #8
 80056b0:	4610      	mov	r0, r2
 80056b2:	4798      	blx	r3
 80056b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056b6:	e00f      	b.n	80056d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80056b8:	6839      	ldr	r1, [r7, #0]
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fa12 	bl	8005ae4 <USBD_CtlError>
            err++;
 80056c0:	7afb      	ldrb	r3, [r7, #11]
 80056c2:	3301      	adds	r3, #1
 80056c4:	72fb      	strb	r3, [r7, #11]
          break;
 80056c6:	e007      	b.n	80056d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80056c8:	6839      	ldr	r1, [r7, #0]
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fa0a 	bl	8005ae4 <USBD_CtlError>
          err++;
 80056d0:	7afb      	ldrb	r3, [r7, #11]
 80056d2:	3301      	adds	r3, #1
 80056d4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80056d6:	e038      	b.n	800574a <USBD_GetDescriptor+0x286>
 80056d8:	e037      	b.n	800574a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	7c1b      	ldrb	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ea:	f107 0208 	add.w	r2, r7, #8
 80056ee:	4610      	mov	r0, r2
 80056f0:	4798      	blx	r3
 80056f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80056f4:	e029      	b.n	800574a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80056f6:	6839      	ldr	r1, [r7, #0]
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f9f3 	bl	8005ae4 <USBD_CtlError>
        err++;
 80056fe:	7afb      	ldrb	r3, [r7, #11]
 8005700:	3301      	adds	r3, #1
 8005702:	72fb      	strb	r3, [r7, #11]
      break;
 8005704:	e021      	b.n	800574a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	7c1b      	ldrb	r3, [r3, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10d      	bne.n	800572a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	f107 0208 	add.w	r2, r7, #8
 800571a:	4610      	mov	r0, r2
 800571c:	4798      	blx	r3
 800571e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3301      	adds	r3, #1
 8005724:	2207      	movs	r2, #7
 8005726:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005728:	e00f      	b.n	800574a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800572a:	6839      	ldr	r1, [r7, #0]
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f9d9 	bl	8005ae4 <USBD_CtlError>
        err++;
 8005732:	7afb      	ldrb	r3, [r7, #11]
 8005734:	3301      	adds	r3, #1
 8005736:	72fb      	strb	r3, [r7, #11]
      break;
 8005738:	e007      	b.n	800574a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800573a:	6839      	ldr	r1, [r7, #0]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f9d1 	bl	8005ae4 <USBD_CtlError>
      err++;
 8005742:	7afb      	ldrb	r3, [r7, #11]
 8005744:	3301      	adds	r3, #1
 8005746:	72fb      	strb	r3, [r7, #11]
      break;
 8005748:	bf00      	nop
  }

  if (err != 0U)
 800574a:	7afb      	ldrb	r3, [r7, #11]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d11c      	bne.n	800578a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005750:	893b      	ldrh	r3, [r7, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d011      	beq.n	800577a <USBD_GetDescriptor+0x2b6>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	88db      	ldrh	r3, [r3, #6]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00d      	beq.n	800577a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	88da      	ldrh	r2, [r3, #6]
 8005762:	893b      	ldrh	r3, [r7, #8]
 8005764:	4293      	cmp	r3, r2
 8005766:	bf28      	it	cs
 8005768:	4613      	movcs	r3, r2
 800576a:	b29b      	uxth	r3, r3
 800576c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800576e:	893b      	ldrh	r3, [r7, #8]
 8005770:	461a      	mov	r2, r3
 8005772:	68f9      	ldr	r1, [r7, #12]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fa1f 	bl	8005bb8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	88db      	ldrh	r3, [r3, #6]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d104      	bne.n	800578c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fa76 	bl	8005c74 <USBD_CtlSendStatus>
 8005788:	e000      	b.n	800578c <USBD_GetDescriptor+0x2c8>
    return;
 800578a:	bf00      	nop
    }
  }
}
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop

08005794 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	889b      	ldrh	r3, [r3, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d130      	bne.n	8005808 <USBD_SetAddress+0x74>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	88db      	ldrh	r3, [r3, #6]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d12c      	bne.n	8005808 <USBD_SetAddress+0x74>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	885b      	ldrh	r3, [r3, #2]
 80057b2:	2b7f      	cmp	r3, #127	; 0x7f
 80057b4:	d828      	bhi.n	8005808 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	885b      	ldrh	r3, [r3, #2]
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d104      	bne.n	80057d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80057cc:	6839      	ldr	r1, [r7, #0]
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f988 	bl	8005ae4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057d4:	e01c      	b.n	8005810 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	7bfa      	ldrb	r2, [r7, #15]
 80057da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80057de:	7bfb      	ldrb	r3, [r7, #15]
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fe37 	bl	8006456 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fa43 	bl	8005c74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d004      	beq.n	80057fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057fc:	e008      	b.n	8005810 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005806:	e003      	b.n	8005810 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005808:	6839      	ldr	r1, [r7, #0]
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f96a 	bl	8005ae4 <USBD_CtlError>
  }
}
 8005810:	bf00      	nop
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	885b      	ldrh	r3, [r3, #2]
 8005826:	b2da      	uxtb	r2, r3
 8005828:	4b41      	ldr	r3, [pc, #260]	; (8005930 <USBD_SetConfig+0x118>)
 800582a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800582c:	4b40      	ldr	r3, [pc, #256]	; (8005930 <USBD_SetConfig+0x118>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d904      	bls.n	800583e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f954 	bl	8005ae4 <USBD_CtlError>
 800583c:	e075      	b.n	800592a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005844:	2b02      	cmp	r3, #2
 8005846:	d002      	beq.n	800584e <USBD_SetConfig+0x36>
 8005848:	2b03      	cmp	r3, #3
 800584a:	d023      	beq.n	8005894 <USBD_SetConfig+0x7c>
 800584c:	e062      	b.n	8005914 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800584e:	4b38      	ldr	r3, [pc, #224]	; (8005930 <USBD_SetConfig+0x118>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01a      	beq.n	800588c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005856:	4b36      	ldr	r3, [pc, #216]	; (8005930 <USBD_SetConfig+0x118>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2203      	movs	r2, #3
 8005864:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005868:	4b31      	ldr	r3, [pc, #196]	; (8005930 <USBD_SetConfig+0x118>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	4619      	mov	r1, r3
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff f9f3 	bl	8004c5a <USBD_SetClassConfig>
 8005874:	4603      	mov	r3, r0
 8005876:	2b02      	cmp	r3, #2
 8005878:	d104      	bne.n	8005884 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f931 	bl	8005ae4 <USBD_CtlError>
            return;
 8005882:	e052      	b.n	800592a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f9f5 	bl	8005c74 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800588a:	e04e      	b.n	800592a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f9f1 	bl	8005c74 <USBD_CtlSendStatus>
        break;
 8005892:	e04a      	b.n	800592a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005894:	4b26      	ldr	r3, [pc, #152]	; (8005930 <USBD_SetConfig+0x118>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d112      	bne.n	80058c2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80058a4:	4b22      	ldr	r3, [pc, #136]	; (8005930 <USBD_SetConfig+0x118>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	461a      	mov	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80058ae:	4b20      	ldr	r3, [pc, #128]	; (8005930 <USBD_SetConfig+0x118>)
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	4619      	mov	r1, r3
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff f9ef 	bl	8004c98 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f9da 	bl	8005c74 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80058c0:	e033      	b.n	800592a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80058c2:	4b1b      	ldr	r3, [pc, #108]	; (8005930 <USBD_SetConfig+0x118>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d01d      	beq.n	800590c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	4619      	mov	r1, r3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff f9dd 	bl	8004c98 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80058de:	4b14      	ldr	r3, [pc, #80]	; (8005930 <USBD_SetConfig+0x118>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80058e8:	4b11      	ldr	r3, [pc, #68]	; (8005930 <USBD_SetConfig+0x118>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	4619      	mov	r1, r3
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7ff f9b3 	bl	8004c5a <USBD_SetClassConfig>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d104      	bne.n	8005904 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f8f1 	bl	8005ae4 <USBD_CtlError>
            return;
 8005902:	e012      	b.n	800592a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f9b5 	bl	8005c74 <USBD_CtlSendStatus>
        break;
 800590a:	e00e      	b.n	800592a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f9b1 	bl	8005c74 <USBD_CtlSendStatus>
        break;
 8005912:	e00a      	b.n	800592a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f8e4 	bl	8005ae4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800591c:	4b04      	ldr	r3, [pc, #16]	; (8005930 <USBD_SetConfig+0x118>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	4619      	mov	r1, r3
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff f9b8 	bl	8004c98 <USBD_ClrClassConfig>
        break;
 8005928:	bf00      	nop
    }
  }
}
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	20000200 	.word	0x20000200

08005934 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	88db      	ldrh	r3, [r3, #6]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d004      	beq.n	8005950 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f8cb 	bl	8005ae4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800594e:	e021      	b.n	8005994 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005956:	2b01      	cmp	r3, #1
 8005958:	db17      	blt.n	800598a <USBD_GetConfig+0x56>
 800595a:	2b02      	cmp	r3, #2
 800595c:	dd02      	ble.n	8005964 <USBD_GetConfig+0x30>
 800595e:	2b03      	cmp	r3, #3
 8005960:	d00b      	beq.n	800597a <USBD_GetConfig+0x46>
 8005962:	e012      	b.n	800598a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3308      	adds	r3, #8
 800596e:	2201      	movs	r2, #1
 8005970:	4619      	mov	r1, r3
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f920 	bl	8005bb8 <USBD_CtlSendData>
        break;
 8005978:	e00c      	b.n	8005994 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3304      	adds	r3, #4
 800597e:	2201      	movs	r2, #1
 8005980:	4619      	mov	r1, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f918 	bl	8005bb8 <USBD_CtlSendData>
        break;
 8005988:	e004      	b.n	8005994 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f8a9 	bl	8005ae4 <USBD_CtlError>
        break;
 8005992:	bf00      	nop
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059ac:	3b01      	subs	r3, #1
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d81e      	bhi.n	80059f0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	88db      	ldrh	r3, [r3, #6]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d004      	beq.n	80059c4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f891 	bl	8005ae4 <USBD_CtlError>
        break;
 80059c2:	e01a      	b.n	80059fa <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f043 0202 	orr.w	r2, r3, #2
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	330c      	adds	r3, #12
 80059e4:	2202      	movs	r2, #2
 80059e6:	4619      	mov	r1, r3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f8e5 	bl	8005bb8 <USBD_CtlSendData>
      break;
 80059ee:	e004      	b.n	80059fa <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f876 	bl	8005ae4 <USBD_CtlError>
      break;
 80059f8:	bf00      	nop
  }
}
 80059fa:	bf00      	nop
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	885b      	ldrh	r3, [r3, #2]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d106      	bne.n	8005a22 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f929 	bl	8005c74 <USBD_CtlSendStatus>
  }
}
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b082      	sub	sp, #8
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d80b      	bhi.n	8005a58 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	885b      	ldrh	r3, [r3, #2]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d10c      	bne.n	8005a62 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f90f 	bl	8005c74 <USBD_CtlSendStatus>
      }
      break;
 8005a56:	e004      	b.n	8005a62 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005a58:	6839      	ldr	r1, [r7, #0]
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f842 	bl	8005ae4 <USBD_CtlError>
      break;
 8005a60:	e000      	b.n	8005a64 <USBD_ClrFeature+0x3a>
      break;
 8005a62:	bf00      	nop
  }
}
 8005a64:	bf00      	nop
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781a      	ldrb	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	785a      	ldrb	r2, [r3, #1]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	3302      	adds	r3, #2
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	3303      	adds	r3, #3
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	4413      	add	r3, r2
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	3305      	adds	r3, #5
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	3306      	adds	r3, #6
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	3307      	adds	r3, #7
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	021b      	lsls	r3, r3, #8
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	4413      	add	r3, r2
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	80da      	strh	r2, [r3, #6]

}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr

08005ae4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005aee:	2180      	movs	r1, #128	; 0x80
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fc4d 	bl	8006390 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005af6:	2100      	movs	r1, #0
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fc49 	bl	8006390 <USBD_LL_StallEP>
}
 8005afe:	bf00      	nop
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b086      	sub	sp, #24
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d032      	beq.n	8005b82 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f834 	bl	8005b8a <USBD_GetLen>
 8005b22:	4603      	mov	r3, r0
 8005b24:	3301      	adds	r3, #1
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	75fa      	strb	r2, [r7, #23]
 8005b36:	461a      	mov	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	7812      	ldrb	r2, [r2, #0]
 8005b40:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005b42:	7dfb      	ldrb	r3, [r7, #23]
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	75fa      	strb	r2, [r7, #23]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	2203      	movs	r2, #3
 8005b50:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005b52:	e012      	b.n	8005b7a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	60fa      	str	r2, [r7, #12]
 8005b5a:	7dfa      	ldrb	r2, [r7, #23]
 8005b5c:	1c51      	adds	r1, r2, #1
 8005b5e:	75f9      	strb	r1, [r7, #23]
 8005b60:	4611      	mov	r1, r2
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	440a      	add	r2, r1
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005b6a:	7dfb      	ldrb	r3, [r7, #23]
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	75fa      	strb	r2, [r7, #23]
 8005b70:	461a      	mov	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	4413      	add	r3, r2
 8005b76:	2200      	movs	r2, #0
 8005b78:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e8      	bne.n	8005b54 <USBD_GetString+0x4e>
    }
  }
}
 8005b82:	bf00      	nop
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005b96:	e005      	b.n	8005ba4 <USBD_GetLen+0x1a>
  {
    len++;
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1f5      	bne.n	8005b98 <USBD_GetLen+0xe>
  }

  return len;
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr

08005bb8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005bce:	88fa      	ldrh	r2, [r7, #6]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005bd4:	88fa      	ldrh	r2, [r7, #6]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	2100      	movs	r1, #0
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 fc57 	bl	8006494 <USBD_LL_Transmit>

  return USBD_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005bfe:	88fb      	ldrh	r3, [r7, #6]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	2100      	movs	r1, #0
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 fc45 	bl	8006494 <USBD_LL_Transmit>

  return USBD_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2203      	movs	r2, #3
 8005c26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005c2a:	88fa      	ldrh	r2, [r7, #6]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005c32:	88fa      	ldrh	r2, [r7, #6]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c3a:	88fb      	ldrh	r3, [r7, #6]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	2100      	movs	r1, #0
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 fc4a 	bl	80064da <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	2100      	movs	r1, #0
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 fc38 	bl	80064da <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2204      	movs	r2, #4
 8005c80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005c84:	2300      	movs	r3, #0
 8005c86:	2200      	movs	r2, #0
 8005c88:	2100      	movs	r1, #0
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fc02 	bl	8006494 <USBD_LL_Transmit>

  return USBD_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b082      	sub	sp, #8
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2205      	movs	r2, #5
 8005ca6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005caa:	2300      	movs	r3, #0
 8005cac:	2200      	movs	r2, #0
 8005cae:	2100      	movs	r1, #0
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fc12 	bl	80064da <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	4912      	ldr	r1, [pc, #72]	; (8005d10 <MX_USB_DEVICE_Init+0x50>)
 8005cc8:	4812      	ldr	r0, [pc, #72]	; (8005d14 <MX_USB_DEVICE_Init+0x54>)
 8005cca:	f7fe ff6c 	bl	8004ba6 <USBD_Init>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005cd4:	f7fa fc42 	bl	800055c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005cd8:	490f      	ldr	r1, [pc, #60]	; (8005d18 <MX_USB_DEVICE_Init+0x58>)
 8005cda:	480e      	ldr	r0, [pc, #56]	; (8005d14 <MX_USB_DEVICE_Init+0x54>)
 8005cdc:	f7fe ff8e 	bl	8004bfc <USBD_RegisterClass>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005ce6:	f7fa fc39 	bl	800055c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005cea:	490c      	ldr	r1, [pc, #48]	; (8005d1c <MX_USB_DEVICE_Init+0x5c>)
 8005cec:	4809      	ldr	r0, [pc, #36]	; (8005d14 <MX_USB_DEVICE_Init+0x54>)
 8005cee:	f7fe febf 	bl	8004a70 <USBD_CDC_RegisterInterface>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005cf8:	f7fa fc30 	bl	800055c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005cfc:	4805      	ldr	r0, [pc, #20]	; (8005d14 <MX_USB_DEVICE_Init+0x54>)
 8005cfe:	f7fe ff96 	bl	8004c2e <USBD_Start>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005d08:	f7fa fc28 	bl	800055c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005d0c:	bf00      	nop
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	2000012c 	.word	0x2000012c
 8005d14:	20000c88 	.word	0x20000c88
 8005d18:	20000018 	.word	0x20000018
 8005d1c:	2000011c 	.word	0x2000011c

08005d20 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005d24:	2200      	movs	r2, #0
 8005d26:	4905      	ldr	r1, [pc, #20]	; (8005d3c <CDC_Init_FS+0x1c>)
 8005d28:	4805      	ldr	r0, [pc, #20]	; (8005d40 <CDC_Init_FS+0x20>)
 8005d2a:	f7fe feb7 	bl	8004a9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005d2e:	4905      	ldr	r1, [pc, #20]	; (8005d44 <CDC_Init_FS+0x24>)
 8005d30:	4803      	ldr	r0, [pc, #12]	; (8005d40 <CDC_Init_FS+0x20>)
 8005d32:	f7fe fecc 	bl	8004ace <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005d36:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	20001334 	.word	0x20001334
 8005d40:	20000c88 	.word	0x20000c88
 8005d44:	20000f4c 	.word	0x20000f4c

08005d48 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005d4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr
	...

08005d58 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	6039      	str	r1, [r7, #0]
 8005d62:	71fb      	strb	r3, [r7, #7]
 8005d64:	4613      	mov	r3, r2
 8005d66:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005d68:	79fb      	ldrb	r3, [r7, #7]
 8005d6a:	2b23      	cmp	r3, #35	; 0x23
 8005d6c:	d84a      	bhi.n	8005e04 <CDC_Control_FS+0xac>
 8005d6e:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <CDC_Control_FS+0x1c>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005e05 	.word	0x08005e05
 8005d78:	08005e05 	.word	0x08005e05
 8005d7c:	08005e05 	.word	0x08005e05
 8005d80:	08005e05 	.word	0x08005e05
 8005d84:	08005e05 	.word	0x08005e05
 8005d88:	08005e05 	.word	0x08005e05
 8005d8c:	08005e05 	.word	0x08005e05
 8005d90:	08005e05 	.word	0x08005e05
 8005d94:	08005e05 	.word	0x08005e05
 8005d98:	08005e05 	.word	0x08005e05
 8005d9c:	08005e05 	.word	0x08005e05
 8005da0:	08005e05 	.word	0x08005e05
 8005da4:	08005e05 	.word	0x08005e05
 8005da8:	08005e05 	.word	0x08005e05
 8005dac:	08005e05 	.word	0x08005e05
 8005db0:	08005e05 	.word	0x08005e05
 8005db4:	08005e05 	.word	0x08005e05
 8005db8:	08005e05 	.word	0x08005e05
 8005dbc:	08005e05 	.word	0x08005e05
 8005dc0:	08005e05 	.word	0x08005e05
 8005dc4:	08005e05 	.word	0x08005e05
 8005dc8:	08005e05 	.word	0x08005e05
 8005dcc:	08005e05 	.word	0x08005e05
 8005dd0:	08005e05 	.word	0x08005e05
 8005dd4:	08005e05 	.word	0x08005e05
 8005dd8:	08005e05 	.word	0x08005e05
 8005ddc:	08005e05 	.word	0x08005e05
 8005de0:	08005e05 	.word	0x08005e05
 8005de4:	08005e05 	.word	0x08005e05
 8005de8:	08005e05 	.word	0x08005e05
 8005dec:	08005e05 	.word	0x08005e05
 8005df0:	08005e05 	.word	0x08005e05
 8005df4:	08005e05 	.word	0x08005e05
 8005df8:	08005e05 	.word	0x08005e05
 8005dfc:	08005e05 	.word	0x08005e05
 8005e00:	08005e05 	.word	0x08005e05
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005e04:	bf00      	nop
  }

  return (USBD_OK);
 8005e06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc80      	pop	{r7}
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop

08005e14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	4805      	ldr	r0, [pc, #20]	; (8005e38 <CDC_Receive_FS+0x24>)
 8005e22:	f7fe fe54 	bl	8004ace <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005e26:	4804      	ldr	r0, [pc, #16]	; (8005e38 <CDC_Receive_FS+0x24>)
 8005e28:	f7fe fe93 	bl	8004b52 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005e2c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000c88 	.word	0x20000c88

08005e3c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	460b      	mov	r3, r1
 8005e46:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005e4c:	4b0d      	ldr	r3, [pc, #52]	; (8005e84 <CDC_Transmit_FS+0x48>)
 8005e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e52:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e00b      	b.n	8005e7a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005e62:	887b      	ldrh	r3, [r7, #2]
 8005e64:	461a      	mov	r2, r3
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	4806      	ldr	r0, [pc, #24]	; (8005e84 <CDC_Transmit_FS+0x48>)
 8005e6a:	f7fe fe17 	bl	8004a9c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005e6e:	4805      	ldr	r0, [pc, #20]	; (8005e84 <CDC_Transmit_FS+0x48>)
 8005e70:	f7fe fe40 	bl	8004af4 <USBD_CDC_TransmitPacket>
 8005e74:	4603      	mov	r3, r0
 8005e76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20000c88 	.word	0x20000c88

08005e88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	4603      	mov	r3, r0
 8005e90:	6039      	str	r1, [r7, #0]
 8005e92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2212      	movs	r2, #18
 8005e98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005e9a:	4b03      	ldr	r3, [pc, #12]	; (8005ea8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bc80      	pop	{r7}
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	20000148 	.word	0x20000148

08005eac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	6039      	str	r1, [r7, #0]
 8005eb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2204      	movs	r2, #4
 8005ebc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005ebe:	4b03      	ldr	r3, [pc, #12]	; (8005ecc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bc80      	pop	{r7}
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	2000015c 	.word	0x2000015c

08005ed0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	6039      	str	r1, [r7, #0]
 8005eda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d105      	bne.n	8005eee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	4907      	ldr	r1, [pc, #28]	; (8005f04 <USBD_FS_ProductStrDescriptor+0x34>)
 8005ee6:	4808      	ldr	r0, [pc, #32]	; (8005f08 <USBD_FS_ProductStrDescriptor+0x38>)
 8005ee8:	f7ff fe0d 	bl	8005b06 <USBD_GetString>
 8005eec:	e004      	b.n	8005ef8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	4904      	ldr	r1, [pc, #16]	; (8005f04 <USBD_FS_ProductStrDescriptor+0x34>)
 8005ef2:	4805      	ldr	r0, [pc, #20]	; (8005f08 <USBD_FS_ProductStrDescriptor+0x38>)
 8005ef4:	f7ff fe07 	bl	8005b06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ef8:	4b02      	ldr	r3, [pc, #8]	; (8005f04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	2000171c 	.word	0x2000171c
 8005f08:	08006770 	.word	0x08006770

08005f0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	4603      	mov	r3, r0
 8005f14:	6039      	str	r1, [r7, #0]
 8005f16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	4904      	ldr	r1, [pc, #16]	; (8005f2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005f1c:	4804      	ldr	r0, [pc, #16]	; (8005f30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005f1e:	f7ff fdf2 	bl	8005b06 <USBD_GetString>
  return USBD_StrDesc;
 8005f22:	4b02      	ldr	r3, [pc, #8]	; (8005f2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	2000171c 	.word	0x2000171c
 8005f30:	08006788 	.word	0x08006788

08005f34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	6039      	str	r1, [r7, #0]
 8005f3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	221a      	movs	r2, #26
 8005f44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005f46:	f000 f843 	bl	8005fd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005f4a:	4b02      	ldr	r3, [pc, #8]	; (8005f54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20000160 	.word	0x20000160

08005f58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	4603      	mov	r3, r0
 8005f60:	6039      	str	r1, [r7, #0]
 8005f62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d105      	bne.n	8005f76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	4907      	ldr	r1, [pc, #28]	; (8005f8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8005f6e:	4808      	ldr	r0, [pc, #32]	; (8005f90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005f70:	f7ff fdc9 	bl	8005b06 <USBD_GetString>
 8005f74:	e004      	b.n	8005f80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	4904      	ldr	r1, [pc, #16]	; (8005f8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8005f7a:	4805      	ldr	r0, [pc, #20]	; (8005f90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005f7c:	f7ff fdc3 	bl	8005b06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f80:	4b02      	ldr	r3, [pc, #8]	; (8005f8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	2000171c 	.word	0x2000171c
 8005f90:	0800679c 	.word	0x0800679c

08005f94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	6039      	str	r1, [r7, #0]
 8005f9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005fa0:	79fb      	ldrb	r3, [r7, #7]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d105      	bne.n	8005fb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	4907      	ldr	r1, [pc, #28]	; (8005fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005faa:	4808      	ldr	r0, [pc, #32]	; (8005fcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005fac:	f7ff fdab 	bl	8005b06 <USBD_GetString>
 8005fb0:	e004      	b.n	8005fbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	4904      	ldr	r1, [pc, #16]	; (8005fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005fb6:	4805      	ldr	r0, [pc, #20]	; (8005fcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005fb8:	f7ff fda5 	bl	8005b06 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005fbc:	4b02      	ldr	r3, [pc, #8]	; (8005fc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	2000171c 	.word	0x2000171c
 8005fcc:	080067a8 	.word	0x080067a8

08005fd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005fd6:	4b0f      	ldr	r3, [pc, #60]	; (8006014 <Get_SerialNum+0x44>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005fdc:	4b0e      	ldr	r3, [pc, #56]	; (8006018 <Get_SerialNum+0x48>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005fe2:	4b0e      	ldr	r3, [pc, #56]	; (800601c <Get_SerialNum+0x4c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4413      	add	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d009      	beq.n	800600a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005ff6:	2208      	movs	r2, #8
 8005ff8:	4909      	ldr	r1, [pc, #36]	; (8006020 <Get_SerialNum+0x50>)
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 f814 	bl	8006028 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006000:	2204      	movs	r2, #4
 8006002:	4908      	ldr	r1, [pc, #32]	; (8006024 <Get_SerialNum+0x54>)
 8006004:	68b8      	ldr	r0, [r7, #8]
 8006006:	f000 f80f 	bl	8006028 <IntToUnicode>
  }
}
 800600a:	bf00      	nop
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	1ffff7e8 	.word	0x1ffff7e8
 8006018:	1ffff7ec 	.word	0x1ffff7ec
 800601c:	1ffff7f0 	.word	0x1ffff7f0
 8006020:	20000162 	.word	0x20000162
 8006024:	20000172 	.word	0x20000172

08006028 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	4613      	mov	r3, r2
 8006034:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800603a:	2300      	movs	r3, #0
 800603c:	75fb      	strb	r3, [r7, #23]
 800603e:	e027      	b.n	8006090 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	0f1b      	lsrs	r3, r3, #28
 8006044:	2b09      	cmp	r3, #9
 8006046:	d80b      	bhi.n	8006060 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	0f1b      	lsrs	r3, r3, #28
 800604c:	b2da      	uxtb	r2, r3
 800604e:	7dfb      	ldrb	r3, [r7, #23]
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	4619      	mov	r1, r3
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	440b      	add	r3, r1
 8006058:	3230      	adds	r2, #48	; 0x30
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	e00a      	b.n	8006076 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	0f1b      	lsrs	r3, r3, #28
 8006064:	b2da      	uxtb	r2, r3
 8006066:	7dfb      	ldrb	r3, [r7, #23]
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	4619      	mov	r1, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	440b      	add	r3, r1
 8006070:	3237      	adds	r2, #55	; 0x37
 8006072:	b2d2      	uxtb	r2, r2
 8006074:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800607c:	7dfb      	ldrb	r3, [r7, #23]
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	3301      	adds	r3, #1
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	4413      	add	r3, r2
 8006086:	2200      	movs	r2, #0
 8006088:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800608a:	7dfb      	ldrb	r3, [r7, #23]
 800608c:	3301      	adds	r3, #1
 800608e:	75fb      	strb	r3, [r7, #23]
 8006090:	7dfa      	ldrb	r2, [r7, #23]
 8006092:	79fb      	ldrb	r3, [r7, #7]
 8006094:	429a      	cmp	r2, r3
 8006096:	d3d3      	bcc.n	8006040 <IntToUnicode+0x18>
  }
}
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	bc80      	pop	{r7}
 80060a0:	4770      	bx	lr
	...

080060a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a0d      	ldr	r2, [pc, #52]	; (80060e8 <HAL_PCD_MspInit+0x44>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d113      	bne.n	80060de <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80060b6:	4b0d      	ldr	r3, [pc, #52]	; (80060ec <HAL_PCD_MspInit+0x48>)
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	4a0c      	ldr	r2, [pc, #48]	; (80060ec <HAL_PCD_MspInit+0x48>)
 80060bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80060c0:	61d3      	str	r3, [r2, #28]
 80060c2:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <HAL_PCD_MspInit+0x48>)
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80060ce:	2200      	movs	r2, #0
 80060d0:	2100      	movs	r1, #0
 80060d2:	2014      	movs	r0, #20
 80060d4:	f7fb fa03 	bl	80014de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80060d8:	2014      	movs	r0, #20
 80060da:	f7fb fa1c 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80060de:	bf00      	nop
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	40005c00 	.word	0x40005c00
 80060ec:	40021000 	.word	0x40021000

080060f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006104:	4619      	mov	r1, r3
 8006106:	4610      	mov	r0, r2
 8006108:	f7fe fdd9 	bl	8004cbe <USBD_LL_SetupStage>
}
 800610c:	bf00      	nop
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006126:	78fb      	ldrb	r3, [r7, #3]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	015b      	lsls	r3, r3, #5
 800612c:	4413      	add	r3, r2
 800612e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	4619      	mov	r1, r3
 8006138:	f7fe fe0c 	bl	8004d54 <USBD_LL_DataOutStage>
}
 800613c:	bf00      	nop
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	015b      	lsls	r3, r3, #5
 800615c:	4413      	add	r3, r2
 800615e:	333c      	adds	r3, #60	; 0x3c
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	78fb      	ldrb	r3, [r7, #3]
 8006164:	4619      	mov	r1, r3
 8006166:	f7fe fe66 	bl	8004e36 <USBD_LL_DataInStage>
}
 800616a:	bf00      	nop
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b082      	sub	sp, #8
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006180:	4618      	mov	r0, r3
 8006182:	f7fe ff76 	bl	8005072 <USBD_LL_SOF>
}
 8006186:	bf00      	nop
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800618e:	b580      	push	{r7, lr}
 8006190:	b084      	sub	sp, #16
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006196:	2301      	movs	r3, #1
 8006198:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d001      	beq.n	80061a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80061a2:	f7fa f9db 	bl	800055c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80061ac:	7bfa      	ldrb	r2, [r7, #15]
 80061ae:	4611      	mov	r1, r2
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fe ff26 	bl	8005002 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fe fedf 	bl	8004f80 <USBD_LL_Reset>
}
 80061c2:	bf00      	nop
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fe ff20 	bl	8005020 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80061e8:	4b04      	ldr	r3, [pc, #16]	; (80061fc <HAL_PCD_SuspendCallback+0x30>)
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	4a03      	ldr	r2, [pc, #12]	; (80061fc <HAL_PCD_SuspendCallback+0x30>)
 80061ee:	f043 0306 	orr.w	r3, r3, #6
 80061f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80061f4:	bf00      	nop
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	e000ed00 	.word	0xe000ed00

08006200 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800620e:	4618      	mov	r0, r3
 8006210:	f7fe ff1a 	bl	8005048 <USBD_LL_Resume>
}
 8006214:	bf00      	nop
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006224:	4a28      	ldr	r2, [pc, #160]	; (80062c8 <USBD_LL_Init+0xac>)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a26      	ldr	r2, [pc, #152]	; (80062c8 <USBD_LL_Init+0xac>)
 8006230:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006234:	4b24      	ldr	r3, [pc, #144]	; (80062c8 <USBD_LL_Init+0xac>)
 8006236:	4a25      	ldr	r2, [pc, #148]	; (80062cc <USBD_LL_Init+0xb0>)
 8006238:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800623a:	4b23      	ldr	r3, [pc, #140]	; (80062c8 <USBD_LL_Init+0xac>)
 800623c:	2208      	movs	r2, #8
 800623e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006240:	4b21      	ldr	r3, [pc, #132]	; (80062c8 <USBD_LL_Init+0xac>)
 8006242:	2202      	movs	r2, #2
 8006244:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006246:	4b20      	ldr	r3, [pc, #128]	; (80062c8 <USBD_LL_Init+0xac>)
 8006248:	2200      	movs	r2, #0
 800624a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800624c:	4b1e      	ldr	r3, [pc, #120]	; (80062c8 <USBD_LL_Init+0xac>)
 800624e:	2200      	movs	r2, #0
 8006250:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006252:	4b1d      	ldr	r3, [pc, #116]	; (80062c8 <USBD_LL_Init+0xac>)
 8006254:	2200      	movs	r2, #0
 8006256:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006258:	481b      	ldr	r0, [pc, #108]	; (80062c8 <USBD_LL_Init+0xac>)
 800625a:	f7fb fcf9 	bl	8001c50 <HAL_PCD_Init>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006264:	f7fa f97a 	bl	800055c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800626e:	2318      	movs	r3, #24
 8006270:	2200      	movs	r2, #0
 8006272:	2100      	movs	r1, #0
 8006274:	f7fc fb92 	bl	800299c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800627e:	2358      	movs	r3, #88	; 0x58
 8006280:	2200      	movs	r2, #0
 8006282:	2180      	movs	r1, #128	; 0x80
 8006284:	f7fc fb8a 	bl	800299c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800628e:	23c0      	movs	r3, #192	; 0xc0
 8006290:	2200      	movs	r2, #0
 8006292:	2181      	movs	r1, #129	; 0x81
 8006294:	f7fc fb82 	bl	800299c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800629e:	f44f 7388 	mov.w	r3, #272	; 0x110
 80062a2:	2200      	movs	r2, #0
 80062a4:	2101      	movs	r1, #1
 80062a6:	f7fc fb79 	bl	800299c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80062b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062b4:	2200      	movs	r2, #0
 80062b6:	2182      	movs	r1, #130	; 0x82
 80062b8:	f7fc fb70 	bl	800299c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	2000181c 	.word	0x2000181c
 80062cc:	40005c00 	.word	0x40005c00

080062d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062d8:	2300      	movs	r3, #0
 80062da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fb fd93 	bl	8001e12 <HAL_PCD_Start>
 80062ec:	4603      	mov	r3, r0
 80062ee:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 f948 	bl	8006588 <USBD_Get_USB_Status>
 80062f8:	4603      	mov	r3, r0
 80062fa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80062fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	4608      	mov	r0, r1
 8006310:	4611      	mov	r1, r2
 8006312:	461a      	mov	r2, r3
 8006314:	4603      	mov	r3, r0
 8006316:	70fb      	strb	r3, [r7, #3]
 8006318:	460b      	mov	r3, r1
 800631a:	70bb      	strb	r3, [r7, #2]
 800631c:	4613      	mov	r3, r2
 800631e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006324:	2300      	movs	r3, #0
 8006326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800632e:	78bb      	ldrb	r3, [r7, #2]
 8006330:	883a      	ldrh	r2, [r7, #0]
 8006332:	78f9      	ldrb	r1, [r7, #3]
 8006334:	f7fb fec6 	bl	80020c4 <HAL_PCD_EP_Open>
 8006338:	4603      	mov	r3, r0
 800633a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800633c:	7bfb      	ldrb	r3, [r7, #15]
 800633e:	4618      	mov	r0, r3
 8006340:	f000 f922 	bl	8006588 <USBD_Get_USB_Status>
 8006344:	4603      	mov	r3, r0
 8006346:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006348:	7bbb      	ldrb	r3, [r7, #14]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	460b      	mov	r3, r1
 800635c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800636c:	78fa      	ldrb	r2, [r7, #3]
 800636e:	4611      	mov	r1, r2
 8006370:	4618      	mov	r0, r3
 8006372:	f7fb ff07 	bl	8002184 <HAL_PCD_EP_Close>
 8006376:	4603      	mov	r3, r0
 8006378:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	4618      	mov	r0, r3
 800637e:	f000 f903 	bl	8006588 <USBD_Get_USB_Status>
 8006382:	4603      	mov	r3, r0
 8006384:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8006386:	7bbb      	ldrb	r3, [r7, #14]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063aa:	78fa      	ldrb	r2, [r7, #3]
 80063ac:	4611      	mov	r1, r2
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fb ffb1 	bl	8002316 <HAL_PCD_EP_SetStall>
 80063b4:	4603      	mov	r3, r0
 80063b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 f8e4 	bl	8006588 <USBD_Get_USB_Status>
 80063c0:	4603      	mov	r3, r0
 80063c2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80063c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b084      	sub	sp, #16
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	460b      	mov	r3, r1
 80063d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063e8:	78fa      	ldrb	r2, [r7, #3]
 80063ea:	4611      	mov	r1, r2
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fb ffec 	bl	80023ca <HAL_PCD_EP_ClrStall>
 80063f2:	4603      	mov	r3, r0
 80063f4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f000 f8c5 	bl	8006588 <USBD_Get_USB_Status>
 80063fe:	4603      	mov	r3, r0
 8006400:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006402:	7bbb      	ldrb	r3, [r7, #14]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800641e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006424:	2b00      	cmp	r3, #0
 8006426:	da08      	bge.n	800643a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	015b      	lsls	r3, r3, #5
 8006432:	4413      	add	r3, r2
 8006434:	332a      	adds	r3, #42	; 0x2a
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	e008      	b.n	800644c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	015b      	lsls	r3, r3, #5
 8006444:	4413      	add	r3, r2
 8006446:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800644a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	bc80      	pop	{r7}
 8006454:	4770      	bx	lr

08006456 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b084      	sub	sp, #16
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	460b      	mov	r3, r1
 8006460:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006470:	78fa      	ldrb	r2, [r7, #3]
 8006472:	4611      	mov	r1, r2
 8006474:	4618      	mov	r0, r3
 8006476:	f7fb fe00 	bl	800207a <HAL_PCD_SetAddress>
 800647a:	4603      	mov	r3, r0
 800647c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	4618      	mov	r0, r3
 8006482:	f000 f881 	bl	8006588 <USBD_Get_USB_Status>
 8006486:	4603      	mov	r3, r0
 8006488:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800648a:	7bbb      	ldrb	r3, [r7, #14]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	607a      	str	r2, [r7, #4]
 800649e:	461a      	mov	r2, r3
 80064a0:	460b      	mov	r3, r1
 80064a2:	72fb      	strb	r3, [r7, #11]
 80064a4:	4613      	mov	r3, r2
 80064a6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80064b6:	893b      	ldrh	r3, [r7, #8]
 80064b8:	7af9      	ldrb	r1, [r7, #11]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	f7fb fef2 	bl	80022a4 <HAL_PCD_EP_Transmit>
 80064c0:	4603      	mov	r3, r0
 80064c2:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 f85e 	bl	8006588 <USBD_Get_USB_Status>
 80064cc:	4603      	mov	r3, r0
 80064ce:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80064d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3718      	adds	r7, #24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b086      	sub	sp, #24
 80064de:	af00      	add	r7, sp, #0
 80064e0:	60f8      	str	r0, [r7, #12]
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	461a      	mov	r2, r3
 80064e6:	460b      	mov	r3, r1
 80064e8:	72fb      	strb	r3, [r7, #11]
 80064ea:	4613      	mov	r3, r2
 80064ec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80064fc:	893b      	ldrh	r3, [r7, #8]
 80064fe:	7af9      	ldrb	r1, [r7, #11]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	f7fb fe81 	bl	8002208 <HAL_PCD_EP_Receive>
 8006506:	4603      	mov	r3, r0
 8006508:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800650a:	7dfb      	ldrb	r3, [r7, #23]
 800650c:	4618      	mov	r0, r3
 800650e:	f000 f83b 	bl	8006588 <USBD_Get_USB_Status>
 8006512:	4603      	mov	r3, r0
 8006514:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8006516:	7dbb      	ldrb	r3, [r7, #22]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006532:	78fa      	ldrb	r2, [r7, #3]
 8006534:	4611      	mov	r1, r2
 8006536:	4618      	mov	r0, r3
 8006538:	f7fb fea0 	bl	800227c <HAL_PCD_EP_GetRxCount>
 800653c:	4603      	mov	r3, r0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006550:	4b02      	ldr	r3, [pc, #8]	; (800655c <USBD_static_malloc+0x14>)
}
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	bc80      	pop	{r7}
 800655a:	4770      	bx	lr
 800655c:	20000204 	.word	0x20000204

08006560 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]

}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	bc80      	pop	{r7}
 8006570:	4770      	bx	lr

08006572 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	460b      	mov	r3, r1
 800657c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	bc80      	pop	{r7}
 8006586:	4770      	bx	lr

08006588 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	4603      	mov	r3, r0
 8006590:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006596:	79fb      	ldrb	r3, [r7, #7]
 8006598:	2b03      	cmp	r3, #3
 800659a:	d817      	bhi.n	80065cc <USBD_Get_USB_Status+0x44>
 800659c:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <USBD_Get_USB_Status+0x1c>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	080065b5 	.word	0x080065b5
 80065a8:	080065bb 	.word	0x080065bb
 80065ac:	080065c1 	.word	0x080065c1
 80065b0:	080065c7 	.word	0x080065c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	73fb      	strb	r3, [r7, #15]
    break;
 80065b8:	e00b      	b.n	80065d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80065ba:	2302      	movs	r3, #2
 80065bc:	73fb      	strb	r3, [r7, #15]
    break;
 80065be:	e008      	b.n	80065d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80065c0:	2301      	movs	r3, #1
 80065c2:	73fb      	strb	r3, [r7, #15]
    break;
 80065c4:	e005      	b.n	80065d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80065c6:	2302      	movs	r3, #2
 80065c8:	73fb      	strb	r3, [r7, #15]
    break;
 80065ca:	e002      	b.n	80065d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80065cc:	2302      	movs	r3, #2
 80065ce:	73fb      	strb	r3, [r7, #15]
    break;
 80065d0:	bf00      	nop
  }
  return usb_status;
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	bc80      	pop	{r7}
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop

080065e0 <__errno>:
 80065e0:	4b01      	ldr	r3, [pc, #4]	; (80065e8 <__errno+0x8>)
 80065e2:	6818      	ldr	r0, [r3, #0]
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	2000017c 	.word	0x2000017c

080065ec <__libc_init_array>:
 80065ec:	b570      	push	{r4, r5, r6, lr}
 80065ee:	2500      	movs	r5, #0
 80065f0:	4e0c      	ldr	r6, [pc, #48]	; (8006624 <__libc_init_array+0x38>)
 80065f2:	4c0d      	ldr	r4, [pc, #52]	; (8006628 <__libc_init_array+0x3c>)
 80065f4:	1ba4      	subs	r4, r4, r6
 80065f6:	10a4      	asrs	r4, r4, #2
 80065f8:	42a5      	cmp	r5, r4
 80065fa:	d109      	bne.n	8006610 <__libc_init_array+0x24>
 80065fc:	f000 f8a2 	bl	8006744 <_init>
 8006600:	2500      	movs	r5, #0
 8006602:	4e0a      	ldr	r6, [pc, #40]	; (800662c <__libc_init_array+0x40>)
 8006604:	4c0a      	ldr	r4, [pc, #40]	; (8006630 <__libc_init_array+0x44>)
 8006606:	1ba4      	subs	r4, r4, r6
 8006608:	10a4      	asrs	r4, r4, #2
 800660a:	42a5      	cmp	r5, r4
 800660c:	d105      	bne.n	800661a <__libc_init_array+0x2e>
 800660e:	bd70      	pop	{r4, r5, r6, pc}
 8006610:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006614:	4798      	blx	r3
 8006616:	3501      	adds	r5, #1
 8006618:	e7ee      	b.n	80065f8 <__libc_init_array+0xc>
 800661a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800661e:	4798      	blx	r3
 8006620:	3501      	adds	r5, #1
 8006622:	e7f2      	b.n	800660a <__libc_init_array+0x1e>
 8006624:	080067c8 	.word	0x080067c8
 8006628:	080067c8 	.word	0x080067c8
 800662c:	080067c8 	.word	0x080067c8
 8006630:	080067cc 	.word	0x080067cc

08006634 <malloc>:
 8006634:	4b02      	ldr	r3, [pc, #8]	; (8006640 <malloc+0xc>)
 8006636:	4601      	mov	r1, r0
 8006638:	6818      	ldr	r0, [r3, #0]
 800663a:	f000 b817 	b.w	800666c <_malloc_r>
 800663e:	bf00      	nop
 8006640:	2000017c 	.word	0x2000017c

08006644 <memcpy>:
 8006644:	b510      	push	{r4, lr}
 8006646:	1e43      	subs	r3, r0, #1
 8006648:	440a      	add	r2, r1
 800664a:	4291      	cmp	r1, r2
 800664c:	d100      	bne.n	8006650 <memcpy+0xc>
 800664e:	bd10      	pop	{r4, pc}
 8006650:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006654:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006658:	e7f7      	b.n	800664a <memcpy+0x6>

0800665a <memset>:
 800665a:	4603      	mov	r3, r0
 800665c:	4402      	add	r2, r0
 800665e:	4293      	cmp	r3, r2
 8006660:	d100      	bne.n	8006664 <memset+0xa>
 8006662:	4770      	bx	lr
 8006664:	f803 1b01 	strb.w	r1, [r3], #1
 8006668:	e7f9      	b.n	800665e <memset+0x4>
	...

0800666c <_malloc_r>:
 800666c:	b570      	push	{r4, r5, r6, lr}
 800666e:	1ccd      	adds	r5, r1, #3
 8006670:	f025 0503 	bic.w	r5, r5, #3
 8006674:	3508      	adds	r5, #8
 8006676:	2d0c      	cmp	r5, #12
 8006678:	bf38      	it	cc
 800667a:	250c      	movcc	r5, #12
 800667c:	2d00      	cmp	r5, #0
 800667e:	4606      	mov	r6, r0
 8006680:	db01      	blt.n	8006686 <_malloc_r+0x1a>
 8006682:	42a9      	cmp	r1, r5
 8006684:	d903      	bls.n	800668e <_malloc_r+0x22>
 8006686:	230c      	movs	r3, #12
 8006688:	6033      	str	r3, [r6, #0]
 800668a:	2000      	movs	r0, #0
 800668c:	bd70      	pop	{r4, r5, r6, pc}
 800668e:	f000 f857 	bl	8006740 <__malloc_lock>
 8006692:	4a21      	ldr	r2, [pc, #132]	; (8006718 <_malloc_r+0xac>)
 8006694:	6814      	ldr	r4, [r2, #0]
 8006696:	4621      	mov	r1, r4
 8006698:	b991      	cbnz	r1, 80066c0 <_malloc_r+0x54>
 800669a:	4c20      	ldr	r4, [pc, #128]	; (800671c <_malloc_r+0xb0>)
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	b91b      	cbnz	r3, 80066a8 <_malloc_r+0x3c>
 80066a0:	4630      	mov	r0, r6
 80066a2:	f000 f83d 	bl	8006720 <_sbrk_r>
 80066a6:	6020      	str	r0, [r4, #0]
 80066a8:	4629      	mov	r1, r5
 80066aa:	4630      	mov	r0, r6
 80066ac:	f000 f838 	bl	8006720 <_sbrk_r>
 80066b0:	1c43      	adds	r3, r0, #1
 80066b2:	d124      	bne.n	80066fe <_malloc_r+0x92>
 80066b4:	230c      	movs	r3, #12
 80066b6:	4630      	mov	r0, r6
 80066b8:	6033      	str	r3, [r6, #0]
 80066ba:	f000 f842 	bl	8006742 <__malloc_unlock>
 80066be:	e7e4      	b.n	800668a <_malloc_r+0x1e>
 80066c0:	680b      	ldr	r3, [r1, #0]
 80066c2:	1b5b      	subs	r3, r3, r5
 80066c4:	d418      	bmi.n	80066f8 <_malloc_r+0x8c>
 80066c6:	2b0b      	cmp	r3, #11
 80066c8:	d90f      	bls.n	80066ea <_malloc_r+0x7e>
 80066ca:	600b      	str	r3, [r1, #0]
 80066cc:	18cc      	adds	r4, r1, r3
 80066ce:	50cd      	str	r5, [r1, r3]
 80066d0:	4630      	mov	r0, r6
 80066d2:	f000 f836 	bl	8006742 <__malloc_unlock>
 80066d6:	f104 000b 	add.w	r0, r4, #11
 80066da:	1d23      	adds	r3, r4, #4
 80066dc:	f020 0007 	bic.w	r0, r0, #7
 80066e0:	1ac3      	subs	r3, r0, r3
 80066e2:	d0d3      	beq.n	800668c <_malloc_r+0x20>
 80066e4:	425a      	negs	r2, r3
 80066e6:	50e2      	str	r2, [r4, r3]
 80066e8:	e7d0      	b.n	800668c <_malloc_r+0x20>
 80066ea:	684b      	ldr	r3, [r1, #4]
 80066ec:	428c      	cmp	r4, r1
 80066ee:	bf16      	itet	ne
 80066f0:	6063      	strne	r3, [r4, #4]
 80066f2:	6013      	streq	r3, [r2, #0]
 80066f4:	460c      	movne	r4, r1
 80066f6:	e7eb      	b.n	80066d0 <_malloc_r+0x64>
 80066f8:	460c      	mov	r4, r1
 80066fa:	6849      	ldr	r1, [r1, #4]
 80066fc:	e7cc      	b.n	8006698 <_malloc_r+0x2c>
 80066fe:	1cc4      	adds	r4, r0, #3
 8006700:	f024 0403 	bic.w	r4, r4, #3
 8006704:	42a0      	cmp	r0, r4
 8006706:	d005      	beq.n	8006714 <_malloc_r+0xa8>
 8006708:	1a21      	subs	r1, r4, r0
 800670a:	4630      	mov	r0, r6
 800670c:	f000 f808 	bl	8006720 <_sbrk_r>
 8006710:	3001      	adds	r0, #1
 8006712:	d0cf      	beq.n	80066b4 <_malloc_r+0x48>
 8006714:	6025      	str	r5, [r4, #0]
 8006716:	e7db      	b.n	80066d0 <_malloc_r+0x64>
 8006718:	20000424 	.word	0x20000424
 800671c:	20000428 	.word	0x20000428

08006720 <_sbrk_r>:
 8006720:	b538      	push	{r3, r4, r5, lr}
 8006722:	2300      	movs	r3, #0
 8006724:	4c05      	ldr	r4, [pc, #20]	; (800673c <_sbrk_r+0x1c>)
 8006726:	4605      	mov	r5, r0
 8006728:	4608      	mov	r0, r1
 800672a:	6023      	str	r3, [r4, #0]
 800672c:	f7fa f806 	bl	800073c <_sbrk>
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d102      	bne.n	800673a <_sbrk_r+0x1a>
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	b103      	cbz	r3, 800673a <_sbrk_r+0x1a>
 8006738:	602b      	str	r3, [r5, #0]
 800673a:	bd38      	pop	{r3, r4, r5, pc}
 800673c:	20001a88 	.word	0x20001a88

08006740 <__malloc_lock>:
 8006740:	4770      	bx	lr

08006742 <__malloc_unlock>:
 8006742:	4770      	bx	lr

08006744 <_init>:
 8006744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006746:	bf00      	nop
 8006748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674a:	bc08      	pop	{r3}
 800674c:	469e      	mov	lr, r3
 800674e:	4770      	bx	lr

08006750 <_fini>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	bf00      	nop
 8006754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006756:	bc08      	pop	{r3}
 8006758:	469e      	mov	lr, r3
 800675a:	4770      	bx	lr
