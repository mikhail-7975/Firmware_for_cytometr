
Trigger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000672c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08006838  08006838  00016838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068a4  080068a4  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  080068a4  080068a4  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068a4  080068a4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068a4  080068a4  000168a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068a8  080068a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  080068ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020c0  2000017c  08006a28  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000223c  08006a28  0002223c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014965  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003288  00000000  00000000  00034b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e88  00000000  00000000  00037d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  00038c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001721c  00000000  00000000  00039920  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000edfd  00000000  00000000  00050b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000740f5  00000000  00000000  0005f939  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3a2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039ec  00000000  00000000  000d3aac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006820 	.word	0x08006820

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08006820 	.word	0x08006820

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fbe9 	bl	8000928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f87d 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f98f 	bl	800047c <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f96f 	bl	8000440 <MX_DMA_Init>
  MX_ADC1_Init();
 8000162:	f000 f8d5 	bl	8000310 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000166:	f000 f933 	bl	80003d0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800016a:	f005 fe91 	bl	8005e90 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  particleCounter = 0;
 800016e:	4b30      	ldr	r3, [pc, #192]	; (8000230 <main+0xe4>)
 8000170:	2200      	movs	r2, #0
 8000172:	601a      	str	r2, [r3, #0]
  firstBufferPartState = Empty;
 8000174:	4b2f      	ldr	r3, [pc, #188]	; (8000234 <main+0xe8>)
 8000176:	2200      	movs	r2, #0
 8000178:	701a      	strb	r2, [r3, #0]
  secondBufferPartState = Empty;
 800017a:	4b2f      	ldr	r3, [pc, #188]	; (8000238 <main+0xec>)
 800017c:	2200      	movs	r2, #0
 800017e:	701a      	strb	r2, [r3, #0]
  WhatBufferPartFull = None;
 8000180:	4b2e      	ldr	r3, [pc, #184]	; (800023c <main+0xf0>)
 8000182:	2200      	movs	r2, #0
 8000184:	701a      	strb	r2, [r3, #0]
  WhereIsTrigger = None;
 8000186:	4b2e      	ldr	r3, [pc, #184]	; (8000240 <main+0xf4>)
 8000188:	2200      	movs	r2, #0
 800018a:	701a      	strb	r2, [r3, #0]
  IsReadyToDataTransmit = False;
 800018c:	4b2d      	ldr	r3, [pc, #180]	; (8000244 <main+0xf8>)
 800018e:	2200      	movs	r2, #0
 8000190:	701a      	strb	r2, [r3, #0]

  //dataToTransmit = (uint8_t*)malloc(sizeof(uint16_t) * TRACE_SIZE);

  for(int i = 0; i < TRACE_SIZE; i++) {
 8000192:	2300      	movs	r3, #0
 8000194:	607b      	str	r3, [r7, #4]
 8000196:	e007      	b.n	80001a8 <main+0x5c>
 	  dataFromADC[i] = 0;
 8000198:	4a2b      	ldr	r2, [pc, #172]	; (8000248 <main+0xfc>)
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2100      	movs	r1, #0
 800019e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i = 0; i < TRACE_SIZE; i++) {
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	3301      	adds	r3, #1
 80001a6:	607b      	str	r3, [r7, #4]
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001ae:	dbf3      	blt.n	8000198 <main+0x4c>
   }
   HAL_ADC_Start_DMA(&hadc1, &dataFromADC, TRACE_SIZE);
 80001b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001b4:	4924      	ldr	r1, [pc, #144]	; (8000248 <main+0xfc>)
 80001b6:	4825      	ldr	r0, [pc, #148]	; (800024c <main+0x100>)
 80001b8:	f000 fcf0 	bl	8000b9c <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if(IsReadyToDataTransmit == True) {
 80001bc:	4b21      	ldr	r3, [pc, #132]	; (8000244 <main+0xf8>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d1fb      	bne.n	80001bc <main+0x70>
		  	  memcpy(dataToTransmit, &dataFromADC[TRACE_SIZE / 2], TRACE_SIZE / 2);
		  	  while(CDC_Transmit_FS(dataToTransmit, TRACE_SIZE / 2) != USBD_OK);
		  	  memcpy(dataToTransmit, &dataFromADC, TRACE_SIZE / 2);
		  	  while(CDC_Transmit_FS(dataToTransmit, TRACE_SIZE / 2) != USBD_OK);
		  }*/
		  memcpy(dataToTransmit, &dataFromADC, TRACE_SIZE * sizeof(uint16_t));
 80001c4:	4a22      	ldr	r2, [pc, #136]	; (8000250 <main+0x104>)
 80001c6:	4b20      	ldr	r3, [pc, #128]	; (8000248 <main+0xfc>)
 80001c8:	4610      	mov	r0, r2
 80001ca:	4619      	mov	r1, r3
 80001cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80001d0:	461a      	mov	r2, r3
 80001d2:	f006 fb11 	bl	80067f8 <memcpy>
		  //CDC_Transmit_FS(dataToTransmit, TRACE_SIZE);
		  while(CDC_Transmit_FS(dataToTransmit, TRACE_SIZE) != USBD_OK);
 80001d6:	bf00      	nop
 80001d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80001dc:	481c      	ldr	r0, [pc, #112]	; (8000250 <main+0x104>)
 80001de:	f005 ff15 	bl	800600c <CDC_Transmit_FS>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d1f7      	bne.n	80001d8 <main+0x8c>
		  //HAL_Delay(1000);
		  for(int i = 0; i < TRACE_SIZE; i++) {
 80001e8:	2300      	movs	r3, #0
 80001ea:	603b      	str	r3, [r7, #0]
 80001ec:	e008      	b.n	8000200 <main+0xb4>
		   	  dataFromADC[i] = 2000;
 80001ee:	4a16      	ldr	r2, [pc, #88]	; (8000248 <main+0xfc>)
 80001f0:	683b      	ldr	r3, [r7, #0]
 80001f2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80001f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(int i = 0; i < TRACE_SIZE; i++) {
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	3301      	adds	r3, #1
 80001fe:	603b      	str	r3, [r7, #0]
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000206:	dbf2      	blt.n	80001ee <main+0xa2>
		  }
		  //HAL_Delay(1000);
		  firstBufferPartState = Empty;
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <main+0xe8>)
 800020a:	2200      	movs	r2, #0
 800020c:	701a      	strb	r2, [r3, #0]
		  secondBufferPartState = Empty;
 800020e:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <main+0xec>)
 8000210:	2200      	movs	r2, #0
 8000212:	701a      	strb	r2, [r3, #0]
		  WhatBufferPartFull = None;
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <main+0xf0>)
 8000216:	2200      	movs	r2, #0
 8000218:	701a      	strb	r2, [r3, #0]
		  WhereIsTrigger = None;
 800021a:	4b09      	ldr	r3, [pc, #36]	; (8000240 <main+0xf4>)
 800021c:	2200      	movs	r2, #0
 800021e:	701a      	strb	r2, [r3, #0]
		  IsReadyToDataTransmit == False;
		  HAL_ADC_Start_DMA(&hadc1, &dataFromADC, TRACE_SIZE);
 8000220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000224:	4908      	ldr	r1, [pc, #32]	; (8000248 <main+0xfc>)
 8000226:	4809      	ldr	r0, [pc, #36]	; (800024c <main+0x100>)
 8000228:	f000 fcb8 	bl	8000b9c <HAL_ADC_Start_DMA>
	 if(IsReadyToDataTransmit == True) {
 800022c:	e7c6      	b.n	80001bc <main+0x70>
 800022e:	bf00      	nop
 8000230:	20000c08 	.word	0x20000c08
 8000234:	20000434 	.word	0x20000434
 8000238:	20000435 	.word	0x20000435
 800023c:	200003bd 	.word	0x200003bd
 8000240:	20000c0c 	.word	0x20000c0c
 8000244:	200003bc 	.word	0x200003bc
 8000248:	20000c68 	.word	0x20000c68
 800024c:	200003c0 	.word	0x200003c0
 8000250:	20000438 	.word	0x20000438

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b094      	sub	sp, #80	; 0x50
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800025e:	2228      	movs	r2, #40	; 0x28
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f006 fad3 	bl	800680e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	605a      	str	r2, [r3, #4]
 8000272:	609a      	str	r2, [r3, #8]
 8000274:	60da      	str	r2, [r3, #12]
 8000276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000284:	2301      	movs	r3, #1
 8000286:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000292:	2301      	movs	r3, #1
 8000294:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000296:	2302      	movs	r3, #2
 8000298:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800029a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 fc3a 	bl	8002b24 <HAL_RCC_OscConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002b6:	f000 f993 	bl	80005e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	230f      	movs	r3, #15
 80002bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002be:	2302      	movs	r3, #2
 80002c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	2101      	movs	r1, #1
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 fea4 	bl	8003024 <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002e2:	f000 f97d 	bl	80005e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80002e6:	2312      	movs	r3, #18
 80002e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80002ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002f4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4618      	mov	r0, r3
 80002fa:	f002 fffd 	bl	80032f8 <HAL_RCCEx_PeriphCLKConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000304:	f000 f96c 	bl	80005e0 <Error_Handler>
  }
}
 8000308:	bf00      	nop
 800030a:	3750      	adds	r7, #80	; 0x50
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	; 0x28
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]
 8000326:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000332:	4b24      	ldr	r3, [pc, #144]	; (80003c4 <MX_ADC1_Init+0xb4>)
 8000334:	4a24      	ldr	r2, [pc, #144]	; (80003c8 <MX_ADC1_Init+0xb8>)
 8000336:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000338:	4b22      	ldr	r3, [pc, #136]	; (80003c4 <MX_ADC1_Init+0xb4>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800033e:	4b21      	ldr	r3, [pc, #132]	; (80003c4 <MX_ADC1_Init+0xb4>)
 8000340:	2201      	movs	r2, #1
 8000342:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000344:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <MX_ADC1_Init+0xb4>)
 8000346:	2200      	movs	r2, #0
 8000348:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800034a:	4b1e      	ldr	r3, [pc, #120]	; (80003c4 <MX_ADC1_Init+0xb4>)
 800034c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000350:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000352:	4b1c      	ldr	r3, [pc, #112]	; (80003c4 <MX_ADC1_Init+0xb4>)
 8000354:	2200      	movs	r2, #0
 8000356:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000358:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <MX_ADC1_Init+0xb4>)
 800035a:	2201      	movs	r2, #1
 800035c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800035e:	4819      	ldr	r0, [pc, #100]	; (80003c4 <MX_ADC1_Init+0xb4>)
 8000360:	f000 fb44 	bl	80009ec <HAL_ADC_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 800036a:	f000 f939 	bl	80005e0 <Error_Handler>
  }
  /** Configure Analog WatchDog 1 
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800036e:	4b17      	ldr	r3, [pc, #92]	; (80003cc <MX_ADC1_Init+0xbc>)
 8000370:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 2012;
 8000372:	f240 73dc 	movw	r3, #2012	; 0x7dc
 8000376:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 800037c:	2300      	movs	r3, #0
 800037e:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = ENABLE;
 8000380:	2301      	movs	r3, #1
 8000382:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000384:	f107 0310 	add.w	r3, r7, #16
 8000388:	4619      	mov	r1, r3
 800038a:	480e      	ldr	r0, [pc, #56]	; (80003c4 <MX_ADC1_Init+0xb4>)
 800038c:	f000 feee 	bl	800116c <HAL_ADC_AnalogWDGConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000396:	f000 f923 	bl	80005e0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800039a:	2300      	movs	r3, #0
 800039c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800039e:	2301      	movs	r3, #1
 80003a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4619      	mov	r1, r3
 80003aa:	4806      	ldr	r0, [pc, #24]	; (80003c4 <MX_ADC1_Init+0xb4>)
 80003ac:	f000 fde6 	bl	8000f7c <HAL_ADC_ConfigChannel>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80003b6:	f000 f913 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ba:	bf00      	nop
 80003bc:	3728      	adds	r7, #40	; 0x28
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	200003c0 	.word	0x200003c0
 80003c8:	40012400 	.word	0x40012400
 80003cc:	00800200 	.word	0x00800200

080003d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003d4:	4b18      	ldr	r3, [pc, #96]	; (8000438 <MX_SPI1_Init+0x68>)
 80003d6:	4a19      	ldr	r2, [pc, #100]	; (800043c <MX_SPI1_Init+0x6c>)
 80003d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003da:	4b17      	ldr	r3, [pc, #92]	; (8000438 <MX_SPI1_Init+0x68>)
 80003dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <MX_SPI1_Init+0x68>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80003e8:	4b13      	ldr	r3, [pc, #76]	; (8000438 <MX_SPI1_Init+0x68>)
 80003ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80003ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <MX_SPI1_Init+0x68>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <MX_SPI1_Init+0x68>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003fc:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <MX_SPI1_Init+0x68>)
 80003fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000402:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <MX_SPI1_Init+0x68>)
 8000406:	2208      	movs	r2, #8
 8000408:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800040a:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <MX_SPI1_Init+0x68>)
 800040c:	2200      	movs	r2, #0
 800040e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <MX_SPI1_Init+0x68>)
 8000412:	2200      	movs	r2, #0
 8000414:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <MX_SPI1_Init+0x68>)
 8000418:	2200      	movs	r2, #0
 800041a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <MX_SPI1_Init+0x68>)
 800041e:	220a      	movs	r2, #10
 8000420:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000422:	4805      	ldr	r0, [pc, #20]	; (8000438 <MX_SPI1_Init+0x68>)
 8000424:	f003 f81e 	bl	8003464 <HAL_SPI_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800042e:	f000 f8d7 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000c10 	.word	0x20000c10
 800043c:	40013000 	.word	0x40013000

08000440 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_DMA_Init+0x38>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a0b      	ldr	r2, [pc, #44]	; (8000478 <MX_DMA_Init+0x38>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6153      	str	r3, [r2, #20]
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_DMA_Init+0x38>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	2100      	movs	r1, #0
 8000462:	200b      	movs	r0, #11
 8000464:	f001 f8ab 	bl	80015be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000468:	200b      	movs	r0, #11
 800046a:	f001 f8c4 	bl	80015f6 <HAL_NVIC_EnableIRQ>

}
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000490:	4b23      	ldr	r3, [pc, #140]	; (8000520 <MX_GPIO_Init+0xa4>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a22      	ldr	r2, [pc, #136]	; (8000520 <MX_GPIO_Init+0xa4>)
 8000496:	f043 0310 	orr.w	r3, r3, #16
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b20      	ldr	r3, [pc, #128]	; (8000520 <MX_GPIO_Init+0xa4>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0310 	and.w	r3, r3, #16
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a8:	4b1d      	ldr	r3, [pc, #116]	; (8000520 <MX_GPIO_Init+0xa4>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a1c      	ldr	r2, [pc, #112]	; (8000520 <MX_GPIO_Init+0xa4>)
 80004ae:	f043 0320 	orr.w	r3, r3, #32
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <MX_GPIO_Init+0xa4>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0320 	and.w	r3, r3, #32
 80004bc:	60bb      	str	r3, [r7, #8]
 80004be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	4b17      	ldr	r3, [pc, #92]	; (8000520 <MX_GPIO_Init+0xa4>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a16      	ldr	r2, [pc, #88]	; (8000520 <MX_GPIO_Init+0xa4>)
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b14      	ldr	r3, [pc, #80]	; (8000520 <MX_GPIO_Init+0xa4>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0304 	and.w	r3, r3, #4
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MX_GPIO_Init+0xa4>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a10      	ldr	r2, [pc, #64]	; (8000520 <MX_GPIO_Init+0xa4>)
 80004de:	f043 0308 	orr.w	r3, r3, #8
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_GPIO_Init+0xa4>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0308 	and.w	r3, r3, #8
 80004ec:	603b      	str	r3, [r7, #0]
 80004ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2180      	movs	r1, #128	; 0x80
 80004f4:	480b      	ldr	r0, [pc, #44]	; (8000524 <MX_GPIO_Init+0xa8>)
 80004f6:	f001 fc1b 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004fa:	2380      	movs	r3, #128	; 0x80
 80004fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	2301      	movs	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2302      	movs	r3, #2
 8000508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4619      	mov	r1, r3
 8000510:	4804      	ldr	r0, [pc, #16]	; (8000524 <MX_GPIO_Init+0xa8>)
 8000512:	f001 fab3 	bl	8001a7c <HAL_GPIO_Init>

}
 8000516:	bf00      	nop
 8000518:	3720      	adds	r7, #32
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000
 8000524:	40010c00 	.word	0x40010c00

08000528 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	WhatBufferPartFull = SecondBufferHalf;
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <HAL_ADC_ConvCpltCallback+0x30>)
 8000532:	2216      	movs	r2, #22
 8000534:	701a      	strb	r2, [r3, #0]
	dataFromADC[0];
	if(WhereIsTrigger == FirstBufferHalf) {
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <HAL_ADC_ConvCpltCallback+0x34>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b0b      	cmp	r3, #11
 800053c:	d105      	bne.n	800054a <HAL_ADC_ConvCpltCallback+0x22>
		HAL_ADC_Stop_DMA(&hadc1);
 800053e:	4808      	ldr	r0, [pc, #32]	; (8000560 <HAL_ADC_ConvCpltCallback+0x38>)
 8000540:	f000 fc0a 	bl	8000d58 <HAL_ADC_Stop_DMA>
		IsReadyToDataTransmit = True;
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]
	}
	HAL_ADC_Stop_DMA(&hadc1);
 800054a:	4805      	ldr	r0, [pc, #20]	; (8000560 <HAL_ADC_ConvCpltCallback+0x38>)
 800054c:	f000 fc04 	bl	8000d58 <HAL_ADC_Stop_DMA>
	//IsReadyToDataTransmit = True;
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	200003bd 	.word	0x200003bd
 800055c:	20000c0c 	.word	0x20000c0c
 8000560:	200003c0 	.word	0x200003c0
 8000564:	200003bc 	.word	0x200003bc

08000568 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 8000570:	4806      	ldr	r0, [pc, #24]	; (800058c <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000572:	f000 fbf1 	bl	8000d58 <HAL_ADC_Stop_DMA>
	IsReadyToDataTransmit = True;
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000578:	2201      	movs	r2, #1
 800057a:	701a      	strb	r2, [r3, #0]
	WhatBufferPartFull = FirstBufferHalf;
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 800057e:	220b      	movs	r2, #11
 8000580:	701a      	strb	r2, [r3, #0]
	dataFromADC[0];
	//if(WhereIsTrigger == SecondBufferHalf) {
	//	HAL_ADC_Stop_DMA(&hadc1);
	//	IsReadyToDataTransmit = True;
	//}
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200003c0 	.word	0x200003c0
 8000590:	200003bc 	.word	0x200003bc
 8000594:	200003bd 	.word	0x200003bd

08000598 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc) {
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	/*if(WhatBufferPartFull == FirstBufferHalf)
		WhereIsTrigger = SecondBufferHalf;
	else
		WhereIsTrigger = FirstBufferHalf;*/
	switch(WhatBufferPartFull) {
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HAL_ADC_LevelOutOfWindowCallback+0x3c>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b0b      	cmp	r3, #11
 80005a6:	d002      	beq.n	80005ae <HAL_ADC_LevelOutOfWindowCallback+0x16>
 80005a8:	2b16      	cmp	r3, #22
 80005aa:	d004      	beq.n	80005b6 <HAL_ADC_LevelOutOfWindowCallback+0x1e>
		case SecondBufferHalf:
			WhereIsTrigger = FirstBufferHalf;
			break;

		default:
			break;
 80005ac:	e007      	b.n	80005be <HAL_ADC_LevelOutOfWindowCallback+0x26>
			WhereIsTrigger = SecondBufferHalf;
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <HAL_ADC_LevelOutOfWindowCallback+0x40>)
 80005b0:	2216      	movs	r2, #22
 80005b2:	701a      	strb	r2, [r3, #0]
			break;
 80005b4:	e003      	b.n	80005be <HAL_ADC_LevelOutOfWindowCallback+0x26>
			WhereIsTrigger = FirstBufferHalf;
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <HAL_ADC_LevelOutOfWindowCallback+0x40>)
 80005b8:	220b      	movs	r2, #11
 80005ba:	701a      	strb	r2, [r3, #0]
			break;
 80005bc:	bf00      	nop
	}
	particleCounter++;
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <HAL_ADC_LevelOutOfWindowCallback+0x44>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	4a05      	ldr	r2, [pc, #20]	; (80005dc <HAL_ADC_LevelOutOfWindowCallback+0x44>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	200003bd 	.word	0x200003bd
 80005d8:	20000c0c 	.word	0x20000c0c
 80005dc:	20000c08 	.word	0x20000c08

080005e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <HAL_MspInit+0x5c>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	4a14      	ldr	r2, [pc, #80]	; (8000648 <HAL_MspInit+0x5c>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6193      	str	r3, [r2, #24]
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_MspInit+0x5c>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <HAL_MspInit+0x5c>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <HAL_MspInit+0x5c>)
 8000610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000614:	61d3      	str	r3, [r2, #28]
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_MspInit+0x5c>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <HAL_MspInit+0x60>)
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <HAL_MspInit+0x60>)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	40021000 	.word	0x40021000
 800064c:	40010000 	.word	0x40010000

08000650 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0310 	add.w	r3, r7, #16
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a2c      	ldr	r2, [pc, #176]	; (800071c <HAL_ADC_MspInit+0xcc>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d151      	bne.n	8000714 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <HAL_ADC_MspInit+0xd0>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <HAL_ADC_MspInit+0xd0>)
 8000676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b28      	ldr	r3, [pc, #160]	; (8000720 <HAL_ADC_MspInit+0xd0>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	4b25      	ldr	r3, [pc, #148]	; (8000720 <HAL_ADC_MspInit+0xd0>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a24      	ldr	r2, [pc, #144]	; (8000720 <HAL_ADC_MspInit+0xd0>)
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <HAL_ADC_MspInit+0xd0>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006a0:	2301      	movs	r3, #1
 80006a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a4:	2303      	movs	r3, #3
 80006a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4619      	mov	r1, r3
 80006ae:	481d      	ldr	r0, [pc, #116]	; (8000724 <HAL_ADC_MspInit+0xd4>)
 80006b0:	f001 f9e4 	bl	8001a7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006b4:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <HAL_ADC_MspInit+0xd8>)
 80006b6:	4a1d      	ldr	r2, [pc, #116]	; (800072c <HAL_ADC_MspInit+0xdc>)
 80006b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006ba:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <HAL_ADC_MspInit+0xd8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c0:	4b19      	ldr	r3, [pc, #100]	; (8000728 <HAL_ADC_MspInit+0xd8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_ADC_MspInit+0xd8>)
 80006c8:	2280      	movs	r2, #128	; 0x80
 80006ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <HAL_ADC_MspInit+0xd8>)
 80006ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <HAL_ADC_MspInit+0xd8>)
 80006d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_ADC_MspInit+0xd8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <HAL_ADC_MspInit+0xd8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006e8:	480f      	ldr	r0, [pc, #60]	; (8000728 <HAL_ADC_MspInit+0xd8>)
 80006ea:	f000 ff9f 	bl	800162c <HAL_DMA_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80006f4:	f7ff ff74 	bl	80005e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <HAL_ADC_MspInit+0xd8>)
 80006fc:	621a      	str	r2, [r3, #32]
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <HAL_ADC_MspInit+0xd8>)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	2012      	movs	r0, #18
 800070a:	f000 ff58 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800070e:	2012      	movs	r0, #18
 8000710:	f000 ff71 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000714:	bf00      	nop
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40012400 	.word	0x40012400
 8000720:	40021000 	.word	0x40021000
 8000724:	40010800 	.word	0x40010800
 8000728:	200003f0 	.word	0x200003f0
 800072c:	40020008 	.word	0x40020008

08000730 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a22      	ldr	r2, [pc, #136]	; (80007d4 <HAL_SPI_MspInit+0xa4>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d13d      	bne.n	80007cc <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000750:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <HAL_SPI_MspInit+0xa8>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a20      	ldr	r2, [pc, #128]	; (80007d8 <HAL_SPI_MspInit+0xa8>)
 8000756:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <HAL_SPI_MspInit+0xa8>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <HAL_SPI_MspInit+0xa8>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a1a      	ldr	r2, [pc, #104]	; (80007d8 <HAL_SPI_MspInit+0xa8>)
 800076e:	f043 0308 	orr.w	r3, r3, #8
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <HAL_SPI_MspInit+0xa8>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f003 0308 	and.w	r3, r3, #8
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000780:	2328      	movs	r3, #40	; 0x28
 8000782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	4812      	ldr	r0, [pc, #72]	; (80007dc <HAL_SPI_MspInit+0xac>)
 8000794:	f001 f972 	bl	8001a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000798:	2310      	movs	r3, #16
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	480c      	ldr	r0, [pc, #48]	; (80007dc <HAL_SPI_MspInit+0xac>)
 80007ac:	f001 f966 	bl	8001a7c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <HAL_SPI_MspInit+0xb0>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
 80007b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
 80007c6:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <HAL_SPI_MspInit+0xb0>)
 80007c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ca:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007cc:	bf00      	nop
 80007ce:	3728      	adds	r7, #40	; 0x28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40013000 	.word	0x40013000
 80007d8:	40021000 	.word	0x40021000
 80007dc:	40010c00 	.word	0x40010c00
 80007e0:	40010000 	.word	0x40010000

080007e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <HardFault_Handler+0x4>

080007f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <MemManage_Handler+0x4>

080007fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <BusFault_Handler+0x4>

08000802 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <UsageFault_Handler+0x4>

08000808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000830:	f000 f8c0 	bl	80009b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}

08000838 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <DMA1_Channel1_IRQHandler+0x10>)
 800083e:	f000 ffe9 	bl	8001814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200003f0 	.word	0x200003f0

0800084c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <ADC1_2_IRQHandler+0x10>)
 8000852:	f000 fac6 	bl	8000de2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200003c0 	.word	0x200003c0

08000860 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000866:	f001 fb82 	bl	8001f6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20001fd0 	.word	0x20001fd0

08000874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <SystemInit+0x5c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <SystemInit+0x5c>)
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <SystemInit+0x5c>)
 8000886:	685a      	ldr	r2, [r3, #4]
 8000888:	4911      	ldr	r1, [pc, #68]	; (80008d0 <SystemInit+0x5c>)
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <SystemInit+0x60>)
 800088c:	4013      	ands	r3, r2
 800088e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <SystemInit+0x5c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <SystemInit+0x5c>)
 8000896:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800089a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800089e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <SystemInit+0x5c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <SystemInit+0x5c>)
 80008a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <SystemInit+0x5c>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <SystemInit+0x5c>)
 80008b2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80008b6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <SystemInit+0x5c>)
 80008ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80008be:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <SystemInit+0x64>)
 80008c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	40021000 	.word	0x40021000
 80008d4:	f8ff0000 	.word	0xf8ff0000
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008de:	e003      	b.n	80008e8 <LoopCopyDataInit>

080008e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008e6:	3104      	adds	r1, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008e8:	480a      	ldr	r0, [pc, #40]	; (8000914 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008f0:	d3f6      	bcc.n	80008e0 <CopyDataInit>
  ldr r2, =_sbss
 80008f2:	4a0a      	ldr	r2, [pc, #40]	; (800091c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008f4:	e002      	b.n	80008fc <LoopFillZerobss>

080008f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008f8:	f842 3b04 	str.w	r3, [r2], #4

080008fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000900:	d3f9      	bcc.n	80008f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000902:	f7ff ffb7 	bl	8000874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000906:	f005 ff53 	bl	80067b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090a:	f7ff fc1f 	bl	800014c <main>
  bx lr
 800090e:	4770      	bx	lr
  ldr r3, =_sidata
 8000910:	080068ac 	.word	0x080068ac
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000918:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 800091c:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 8000920:	2000223c 	.word	0x2000223c

08000924 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <CAN1_RX1_IRQHandler>
	...

08000928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_Init+0x28>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a07      	ldr	r2, [pc, #28]	; (8000950 <HAL_Init+0x28>)
 8000932:	f043 0310 	orr.w	r3, r3, #16
 8000936:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000938:	2003      	movs	r0, #3
 800093a:	f000 fe35 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093e:	2000      	movs	r0, #0
 8000940:	f000 f808 	bl	8000954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000944:	f7ff fe52 	bl	80005ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40022000 	.word	0x40022000

08000954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_InitTick+0x54>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x58>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096a:	fbb3 f3f1 	udiv	r3, r3, r1
 800096e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fe4d 	bl	8001612 <HAL_SYSTICK_Config>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e00e      	b.n	80009a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d80a      	bhi.n	800099e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f000 fe15 	bl	80015be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <HAL_InitTick+0x5c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	e000      	b.n	80009a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000004 	.word	0x20000004

080009b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <HAL_IncTick+0x1c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_IncTick+0x20>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a03      	ldr	r2, [pc, #12]	; (80009d4 <HAL_IncTick+0x20>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20001438 	.word	0x20001438

080009d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <HAL_GetTick+0x10>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	20001438 	.word	0x20001438

080009ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009f4:	2300      	movs	r3, #0
 80009f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d101      	bne.n	8000a0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e0be      	b.n	8000b8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d109      	bne.n	8000a30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff fe10 	bl	8000650 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 fc43 	bl	80012bc <ADC_ConversionStop_Disable>
 8000a36:	4603      	mov	r3, r0
 8000a38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a3e:	f003 0310 	and.w	r3, r3, #16
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f040 8099 	bne.w	8000b7a <HAL_ADC_Init+0x18e>
 8000a48:	7dfb      	ldrb	r3, [r7, #23]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	f040 8095 	bne.w	8000b7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a58:	f023 0302 	bic.w	r3, r3, #2
 8000a5c:	f043 0202 	orr.w	r2, r3, #2
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	7b1b      	ldrb	r3, [r3, #12]
 8000a72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a84:	d003      	beq.n	8000a8e <HAL_ADC_Init+0xa2>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d102      	bne.n	8000a94 <HAL_ADC_Init+0xa8>
 8000a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a92:	e000      	b.n	8000a96 <HAL_ADC_Init+0xaa>
 8000a94:	2300      	movs	r3, #0
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	7d1b      	ldrb	r3, [r3, #20]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d119      	bne.n	8000ad8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	7b1b      	ldrb	r3, [r3, #12]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d109      	bne.n	8000ac0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	035a      	lsls	r2, r3, #13
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	e00b      	b.n	8000ad8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac4:	f043 0220 	orr.w	r2, r3, #32
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad0:	f043 0201 	orr.w	r2, r3, #1
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	689a      	ldr	r2, [r3, #8]
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <HAL_ADC_Init+0x1a8>)
 8000af4:	4013      	ands	r3, r2
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	6812      	ldr	r2, [r2, #0]
 8000afa:	68b9      	ldr	r1, [r7, #8]
 8000afc:	430b      	orrs	r3, r1
 8000afe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b08:	d003      	beq.n	8000b12 <HAL_ADC_Init+0x126>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d104      	bne.n	8000b1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	691b      	ldr	r3, [r3, #16]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	051b      	lsls	r3, r3, #20
 8000b1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b22:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	689a      	ldr	r2, [r3, #8]
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_ADC_Init+0x1ac>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d10b      	bne.n	8000b58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b4a:	f023 0303 	bic.w	r3, r3, #3
 8000b4e:	f043 0201 	orr.w	r2, r3, #1
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b56:	e018      	b.n	8000b8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5c:	f023 0312 	bic.w	r3, r3, #18
 8000b60:	f043 0210 	orr.w	r2, r3, #16
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6c:	f043 0201 	orr.w	r2, r3, #1
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b78:	e007      	b.n	8000b8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b7e:	f043 0210 	orr.w	r2, r3, #16
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	ffe1f7fd 	.word	0xffe1f7fd
 8000b98:	ff1f0efe 	.word	0xff1f0efe

08000b9c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a64      	ldr	r2, [pc, #400]	; (8000d44 <HAL_ADC_Start_DMA+0x1a8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d004      	beq.n	8000bc0 <HAL_ADC_Start_DMA+0x24>
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a63      	ldr	r2, [pc, #396]	; (8000d48 <HAL_ADC_Start_DMA+0x1ac>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d106      	bne.n	8000bce <HAL_ADC_Start_DMA+0x32>
 8000bc0:	4b60      	ldr	r3, [pc, #384]	; (8000d44 <HAL_ADC_Start_DMA+0x1a8>)
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f040 80b3 	bne.w	8000d34 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d101      	bne.n	8000bdc <HAL_ADC_Start_DMA+0x40>
 8000bd8:	2302      	movs	r3, #2
 8000bda:	e0ae      	b.n	8000d3a <HAL_ADC_Start_DMA+0x19e>
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2201      	movs	r2, #1
 8000be0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f000 fb17 	bl	8001218 <ADC_Enable>
 8000bea:	4603      	mov	r3, r0
 8000bec:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000bee:	7dfb      	ldrb	r3, [r7, #23]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	f040 809a 	bne.w	8000d2a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000bfe:	f023 0301 	bic.w	r3, r3, #1
 8000c02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a4e      	ldr	r2, [pc, #312]	; (8000d48 <HAL_ADC_Start_DMA+0x1ac>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d105      	bne.n	8000c20 <HAL_ADC_Start_DMA+0x84>
 8000c14:	4b4b      	ldr	r3, [pc, #300]	; (8000d44 <HAL_ADC_Start_DMA+0x1a8>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d115      	bne.n	8000c4c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d026      	beq.n	8000c88 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c4a:	e01d      	b.n	8000c88 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c50:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a39      	ldr	r2, [pc, #228]	; (8000d44 <HAL_ADC_Start_DMA+0x1a8>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d004      	beq.n	8000c6c <HAL_ADC_Start_DMA+0xd0>
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a38      	ldr	r2, [pc, #224]	; (8000d48 <HAL_ADC_Start_DMA+0x1ac>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d10d      	bne.n	8000c88 <HAL_ADC_Start_DMA+0xec>
 8000c6c:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <HAL_ADC_Start_DMA+0x1a8>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d007      	beq.n	8000c88 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d006      	beq.n	8000ca2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c98:	f023 0206 	bic.w	r2, r3, #6
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ca0:	e002      	b.n	8000ca8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	6a1b      	ldr	r3, [r3, #32]
 8000cb4:	4a25      	ldr	r2, [pc, #148]	; (8000d4c <HAL_ADC_Start_DMA+0x1b0>)
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	6a1b      	ldr	r3, [r3, #32]
 8000cbc:	4a24      	ldr	r2, [pc, #144]	; (8000d50 <HAL_ADC_Start_DMA+0x1b4>)
 8000cbe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	6a1b      	ldr	r3, [r3, #32]
 8000cc4:	4a23      	ldr	r2, [pc, #140]	; (8000d54 <HAL_ADC_Start_DMA+0x1b8>)
 8000cc6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f06f 0202 	mvn.w	r2, #2
 8000cd0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ce0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6a18      	ldr	r0, [r3, #32]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	334c      	adds	r3, #76	; 0x4c
 8000cec:	4619      	mov	r1, r3
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f000 fcf5 	bl	80016e0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d00:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d04:	d108      	bne.n	8000d18 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d14:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000d16:	e00f      	b.n	8000d38 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d26:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000d28:	e006      	b.n	8000d38 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000d32:	e001      	b.n	8000d38 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40012400 	.word	0x40012400
 8000d48:	40012800 	.word	0x40012800
 8000d4c:	08001331 	.word	0x08001331
 8000d50:	080013ad 	.word	0x080013ad
 8000d54:	080013c9 	.word	0x080013c9

08000d58 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d101      	bne.n	8000d72 <HAL_ADC_Stop_DMA+0x1a>
 8000d6e:	2302      	movs	r3, #2
 8000d70:	e033      	b.n	8000dda <HAL_ADC_Stop_DMA+0x82>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2201      	movs	r2, #1
 8000d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 fa9e 	bl	80012bc <ADC_ConversionStop_Disable>
 8000d80:	4603      	mov	r3, r0
 8000d82:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d122      	bne.n	8000dd0 <HAL_ADC_Stop_DMA+0x78>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d98:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a1b      	ldr	r3, [r3, #32]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fcfd 	bl	800179e <HAL_DMA_Abort>
 8000da4:	4603      	mov	r3, r0
 8000da6:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10a      	bne.n	8000dc4 <HAL_ADC_Stop_DMA+0x6c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000db6:	f023 0301 	bic.w	r3, r3, #1
 8000dba:	f043 0201 	orr.w	r2, r3, #1
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28
 8000dc2:	e005      	b.n	8000dd0 <HAL_ADC_Stop_DMA+0x78>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0320 	and.w	r3, r3, #32
 8000df4:	2b20      	cmp	r3, #32
 8000df6:	d140      	bne.n	8000e7a <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d139      	bne.n	8000e7a <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0a:	f003 0310 	and.w	r3, r3, #16
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d105      	bne.n	8000e1e <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e28:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e2c:	d11d      	bne.n	8000e6a <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d119      	bne.n	8000e6a <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 0220 	bic.w	r2, r2, #32
 8000e44:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d105      	bne.n	8000e6a <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e62:	f043 0201 	orr.w	r2, r3, #1
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff fb5c 	bl	8000528 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f06f 0212 	mvn.w	r2, #18
 8000e78:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e84:	2b80      	cmp	r3, #128	; 0x80
 8000e86:	d14f      	bne.n	8000f28 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	d148      	bne.n	8000f28 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9a:	f003 0310 	and.w	r3, r3, #16
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d105      	bne.n	8000eae <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000eb8:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000ebc:	d012      	beq.n	8000ee4 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d125      	bne.n	8000f18 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000ed6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000eda:	d11d      	bne.n	8000f18 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d119      	bne.n	8000f18 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ef2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d105      	bne.n	8000f18 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f10:	f043 0201 	orr.w	r2, r3, #1
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f000 fa6f 	bl	80013fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f06f 020c 	mvn.w	r2, #12
 8000f26:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f32:	2b40      	cmp	r3, #64	; 0x40
 8000f34:	d114      	bne.n	8000f60 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d10d      	bne.n	8000f60 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fb21 	bl	8000598 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f06f 0201 	mvn.w	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
	...

08000f7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d101      	bne.n	8000f9c <HAL_ADC_ConfigChannel+0x20>
 8000f98:	2302      	movs	r3, #2
 8000f9a:	e0dc      	b.n	8001156 <HAL_ADC_ConfigChannel+0x1da>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b06      	cmp	r3, #6
 8000faa:	d81c      	bhi.n	8000fe6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	3b05      	subs	r3, #5
 8000fbe:	221f      	movs	r2, #31
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	4019      	ands	r1, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	3b05      	subs	r3, #5
 8000fd8:	fa00 f203 	lsl.w	r2, r0, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	635a      	str	r2, [r3, #52]	; 0x34
 8000fe4:	e03c      	b.n	8001060 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b0c      	cmp	r3, #12
 8000fec:	d81c      	bhi.n	8001028 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	3b23      	subs	r3, #35	; 0x23
 8001000:	221f      	movs	r2, #31
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	4019      	ands	r1, r3
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	3b23      	subs	r3, #35	; 0x23
 800101a:	fa00 f203 	lsl.w	r2, r0, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	631a      	str	r2, [r3, #48]	; 0x30
 8001026:	e01b      	b.n	8001060 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	3b41      	subs	r3, #65	; 0x41
 800103a:	221f      	movs	r2, #31
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	4019      	ands	r1, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	3b41      	subs	r3, #65	; 0x41
 8001054:	fa00 f203 	lsl.w	r2, r0, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	430a      	orrs	r2, r1
 800105e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b09      	cmp	r3, #9
 8001066:	d91c      	bls.n	80010a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68d9      	ldr	r1, [r3, #12]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	3b1e      	subs	r3, #30
 800107a:	2207      	movs	r2, #7
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	4019      	ands	r1, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	6898      	ldr	r0, [r3, #8]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	3b1e      	subs	r3, #30
 8001094:	fa00 f203 	lsl.w	r2, r0, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	430a      	orrs	r2, r1
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	e019      	b.n	80010d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6919      	ldr	r1, [r3, #16]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	2207      	movs	r2, #7
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	4019      	ands	r1, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	6898      	ldr	r0, [r3, #8]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	fa00 f203 	lsl.w	r2, r0, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b10      	cmp	r3, #16
 80010dc:	d003      	beq.n	80010e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010e2:	2b11      	cmp	r3, #17
 80010e4:	d132      	bne.n	800114c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a1d      	ldr	r2, [pc, #116]	; (8001160 <HAL_ADC_ConfigChannel+0x1e4>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d125      	bne.n	800113c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d126      	bne.n	800114c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800110c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b10      	cmp	r3, #16
 8001114:	d11a      	bne.n	800114c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_ADC_ConfigChannel+0x1e8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a13      	ldr	r2, [pc, #76]	; (8001168 <HAL_ADC_ConfigChannel+0x1ec>)
 800111c:	fba2 2303 	umull	r2, r3, r2, r3
 8001120:	0c9a      	lsrs	r2, r3, #18
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800112c:	e002      	b.n	8001134 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	3b01      	subs	r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f9      	bne.n	800112e <HAL_ADC_ConfigChannel+0x1b2>
 800113a:	e007      	b.n	800114c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001140:	f043 0220 	orr.w	r2, r3, #32
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001154:	7bfb      	ldrb	r3, [r7, #15]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	40012400 	.word	0x40012400
 8001164:	20000000 	.word	0x20000000
 8001168:	431bde83 	.word	0x431bde83

0800116c <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a24      	ldr	r2, [pc, #144]	; (800120c <HAL_ADC_AnalogWDGConfig+0xa0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d003      	beq.n	8001188 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8001184:	4a22      	ldr	r2, [pc, #136]	; (8001210 <HAL_ADC_AnalogWDGConfig+0xa4>)
 8001186:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800118e:	2b01      	cmp	r3, #1
 8001190:	d101      	bne.n	8001196 <HAL_ADC_AnalogWDGConfig+0x2a>
 8001192:	2302      	movs	r3, #2
 8001194:	e035      	b.n	8001202 <HAL_ADC_AnalogWDGConfig+0x96>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	7a1b      	ldrb	r3, [r3, #8]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d108      	bne.n	80011b8 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	e007      	b.n	80011c8 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011c6:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_ADC_AnalogWDGConfig+0xa8>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	6811      	ldr	r1, [r2, #0]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	6852      	ldr	r2, [r2, #4]
 80011da:	4311      	orrs	r1, r2
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	430b      	orrs	r3, r1
 80011e2:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	68d2      	ldr	r2, [r2, #12]
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	6912      	ldr	r2, [r2, #16]
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	00800200 	.word	0x00800200
 8001210:	00400200 	.word	0x00400200
 8001214:	ff3ffde0 	.word	0xff3ffde0

08001218 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b01      	cmp	r3, #1
 8001234:	d039      	beq.n	80012aa <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f042 0201 	orr.w	r2, r2, #1
 8001244:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <ADC_Enable+0x9c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <ADC_Enable+0xa0>)
 800124c:	fba2 2303 	umull	r2, r3, r2, r3
 8001250:	0c9b      	lsrs	r3, r3, #18
 8001252:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001254:	e002      	b.n	800125c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	3b01      	subs	r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f9      	bne.n	8001256 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001262:	f7ff fbb9 	bl	80009d8 <HAL_GetTick>
 8001266:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001268:	e018      	b.n	800129c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800126a:	f7ff fbb5 	bl	80009d8 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d911      	bls.n	800129c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127c:	f043 0210 	orr.w	r2, r3, #16
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001288:	f043 0201 	orr.w	r2, r3, #1
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e007      	b.n	80012ac <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d1df      	bne.n	800126a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000000 	.word	0x20000000
 80012b8:	431bde83 	.word	0x431bde83

080012bc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d127      	bne.n	8001326 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0201 	bic.w	r2, r2, #1
 80012e4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012e6:	f7ff fb77 	bl	80009d8 <HAL_GetTick>
 80012ea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012ec:	e014      	b.n	8001318 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012ee:	f7ff fb73 	bl	80009d8 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d90d      	bls.n	8001318 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	f043 0210 	orr.w	r2, r3, #16
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	f043 0201 	orr.w	r2, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e007      	b.n	8001328 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b01      	cmp	r3, #1
 8001324:	d0e3      	beq.n	80012ee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001346:	2b00      	cmp	r3, #0
 8001348:	d127      	bne.n	800139a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001360:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001364:	d115      	bne.n	8001392 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800136a:	2b00      	cmp	r3, #0
 800136c:	d111      	bne.n	8001392 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001372:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d105      	bne.n	8001392 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	f043 0201 	orr.w	r2, r3, #1
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f7ff f8c8 	bl	8000528 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001398:	e004      	b.n	80013a4 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	4798      	blx	r3
}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f7ff f8d4 	bl	8000568 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e6:	f043 0204 	orr.w	r2, r3, #4
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f7ff fdba 	bl	8000f68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
	...

08001410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800142c:	4013      	ands	r3, r2
 800142e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <__NVIC_GetPriorityGrouping+0x18>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	f003 0307 	and.w	r3, r3, #7
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	db0b      	blt.n	800149e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	4906      	ldr	r1, [pc, #24]	; (80014a8 <__NVIC_EnableIRQ+0x34>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	095b      	lsrs	r3, r3, #5
 8001494:	2001      	movs	r0, #1
 8001496:	fa00 f202 	lsl.w	r2, r0, r2
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	; (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f7ff ff90 	bl	80014ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff2d 	bl	8001410 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff42 	bl	8001458 <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff90 	bl	8001500 <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5f 	bl	80014ac <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff35 	bl	8001474 <__NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffa2 	bl	8001564 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e043      	b.n	80016ca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <HAL_DMA_Init+0xa8>)
 800164a:	4413      	add	r3, r2
 800164c:	4a22      	ldr	r2, [pc, #136]	; (80016d8 <HAL_DMA_Init+0xac>)
 800164e:	fba2 2303 	umull	r2, r3, r2, r3
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	009a      	lsls	r2, r3, #2
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a1f      	ldr	r2, [pc, #124]	; (80016dc <HAL_DMA_Init+0xb0>)
 800165e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2202      	movs	r2, #2
 8001664:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001676:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800167a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001684:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001690:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800169c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	bffdfff8 	.word	0xbffdfff8
 80016d8:	cccccccd 	.word	0xcccccccd
 80016dc:	40020000 	.word	0x40020000

080016e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d101      	bne.n	8001700 <HAL_DMA_Start_IT+0x20>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e04a      	b.n	8001796 <HAL_DMA_Start_IT+0xb6>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800170e:	2b01      	cmp	r3, #1
 8001710:	d13a      	bne.n	8001788 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2202      	movs	r2, #2
 8001716:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 f972 	bl	8001a20 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 020e 	orr.w	r2, r2, #14
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	e00f      	b.n	8001776 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0204 	bic.w	r2, r2, #4
 8001764:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f042 020a 	orr.w	r2, r2, #10
 8001774:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f042 0201 	orr.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	e005      	b.n	8001794 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001790:	2302      	movs	r3, #2
 8001792:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001794:	7dfb      	ldrb	r3, [r7, #23]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800179e:	b480      	push	{r7}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d008      	beq.n	80017c6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2204      	movs	r2, #4
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e020      	b.n	8001808 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 020e 	bic.w	r2, r2, #14
 80017d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0201 	bic.w	r2, r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ee:	2101      	movs	r1, #1
 80017f0:	fa01 f202 	lsl.w	r2, r1, r2
 80017f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001806:	7bfb      	ldrb	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
	...

08001814 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	2204      	movs	r2, #4
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d04f      	beq.n	80018dc <HAL_DMA_IRQHandler+0xc8>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	2b00      	cmp	r3, #0
 8001844:	d04a      	beq.n	80018dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0320 	and.w	r3, r3, #32
 8001850:	2b00      	cmp	r3, #0
 8001852:	d107      	bne.n	8001864 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0204 	bic.w	r2, r2, #4
 8001862:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a66      	ldr	r2, [pc, #408]	; (8001a04 <HAL_DMA_IRQHandler+0x1f0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d029      	beq.n	80018c2 <HAL_DMA_IRQHandler+0xae>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a65      	ldr	r2, [pc, #404]	; (8001a08 <HAL_DMA_IRQHandler+0x1f4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d022      	beq.n	80018be <HAL_DMA_IRQHandler+0xaa>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a63      	ldr	r2, [pc, #396]	; (8001a0c <HAL_DMA_IRQHandler+0x1f8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d01a      	beq.n	80018b8 <HAL_DMA_IRQHandler+0xa4>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a62      	ldr	r2, [pc, #392]	; (8001a10 <HAL_DMA_IRQHandler+0x1fc>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d012      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x9e>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a60      	ldr	r2, [pc, #384]	; (8001a14 <HAL_DMA_IRQHandler+0x200>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d00a      	beq.n	80018ac <HAL_DMA_IRQHandler+0x98>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a5f      	ldr	r2, [pc, #380]	; (8001a18 <HAL_DMA_IRQHandler+0x204>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d102      	bne.n	80018a6 <HAL_DMA_IRQHandler+0x92>
 80018a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018a4:	e00e      	b.n	80018c4 <HAL_DMA_IRQHandler+0xb0>
 80018a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80018aa:	e00b      	b.n	80018c4 <HAL_DMA_IRQHandler+0xb0>
 80018ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80018b0:	e008      	b.n	80018c4 <HAL_DMA_IRQHandler+0xb0>
 80018b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018b6:	e005      	b.n	80018c4 <HAL_DMA_IRQHandler+0xb0>
 80018b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018bc:	e002      	b.n	80018c4 <HAL_DMA_IRQHandler+0xb0>
 80018be:	2340      	movs	r3, #64	; 0x40
 80018c0:	e000      	b.n	80018c4 <HAL_DMA_IRQHandler+0xb0>
 80018c2:	2304      	movs	r3, #4
 80018c4:	4a55      	ldr	r2, [pc, #340]	; (8001a1c <HAL_DMA_IRQHandler+0x208>)
 80018c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 8094 	beq.w	80019fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80018da:	e08e      	b.n	80019fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	2202      	movs	r2, #2
 80018e2:	409a      	lsls	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d056      	beq.n	800199a <HAL_DMA_IRQHandler+0x186>
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d051      	beq.n	800199a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0320 	and.w	r3, r3, #32
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10b      	bne.n	800191c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 020a 	bic.w	r2, r2, #10
 8001912:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a38      	ldr	r2, [pc, #224]	; (8001a04 <HAL_DMA_IRQHandler+0x1f0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d029      	beq.n	800197a <HAL_DMA_IRQHandler+0x166>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a37      	ldr	r2, [pc, #220]	; (8001a08 <HAL_DMA_IRQHandler+0x1f4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d022      	beq.n	8001976 <HAL_DMA_IRQHandler+0x162>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a35      	ldr	r2, [pc, #212]	; (8001a0c <HAL_DMA_IRQHandler+0x1f8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01a      	beq.n	8001970 <HAL_DMA_IRQHandler+0x15c>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a34      	ldr	r2, [pc, #208]	; (8001a10 <HAL_DMA_IRQHandler+0x1fc>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d012      	beq.n	800196a <HAL_DMA_IRQHandler+0x156>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a32      	ldr	r2, [pc, #200]	; (8001a14 <HAL_DMA_IRQHandler+0x200>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00a      	beq.n	8001964 <HAL_DMA_IRQHandler+0x150>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a31      	ldr	r2, [pc, #196]	; (8001a18 <HAL_DMA_IRQHandler+0x204>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d102      	bne.n	800195e <HAL_DMA_IRQHandler+0x14a>
 8001958:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800195c:	e00e      	b.n	800197c <HAL_DMA_IRQHandler+0x168>
 800195e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001962:	e00b      	b.n	800197c <HAL_DMA_IRQHandler+0x168>
 8001964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001968:	e008      	b.n	800197c <HAL_DMA_IRQHandler+0x168>
 800196a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800196e:	e005      	b.n	800197c <HAL_DMA_IRQHandler+0x168>
 8001970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001974:	e002      	b.n	800197c <HAL_DMA_IRQHandler+0x168>
 8001976:	2320      	movs	r3, #32
 8001978:	e000      	b.n	800197c <HAL_DMA_IRQHandler+0x168>
 800197a:	2302      	movs	r3, #2
 800197c:	4a27      	ldr	r2, [pc, #156]	; (8001a1c <HAL_DMA_IRQHandler+0x208>)
 800197e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	2b00      	cmp	r3, #0
 800198e:	d034      	beq.n	80019fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001998:	e02f      	b.n	80019fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	2208      	movs	r2, #8
 80019a0:	409a      	lsls	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d028      	beq.n	80019fc <HAL_DMA_IRQHandler+0x1e8>
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d023      	beq.n	80019fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 020e 	bic.w	r2, r2, #14
 80019c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019cc:	2101      	movs	r1, #1
 80019ce:	fa01 f202 	lsl.w	r2, r1, r2
 80019d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d004      	beq.n	80019fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	4798      	blx	r3
    }
  }
  return;
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
}
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40020008 	.word	0x40020008
 8001a08:	4002001c 	.word	0x4002001c
 8001a0c:	40020030 	.word	0x40020030
 8001a10:	40020044 	.word	0x40020044
 8001a14:	40020058 	.word	0x40020058
 8001a18:	4002006c 	.word	0x4002006c
 8001a1c:	40020000 	.word	0x40020000

08001a20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a36:	2101      	movs	r1, #1
 8001a38:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	d108      	bne.n	8001a60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a5e:	e007      	b.n	8001a70 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	60da      	str	r2, [r3, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b08b      	sub	sp, #44	; 0x2c
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8e:	e127      	b.n	8001ce0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a90:	2201      	movs	r2, #1
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	f040 8116 	bne.w	8001cda <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b12      	cmp	r3, #18
 8001ab4:	d034      	beq.n	8001b20 <HAL_GPIO_Init+0xa4>
 8001ab6:	2b12      	cmp	r3, #18
 8001ab8:	d80d      	bhi.n	8001ad6 <HAL_GPIO_Init+0x5a>
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d02b      	beq.n	8001b16 <HAL_GPIO_Init+0x9a>
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d804      	bhi.n	8001acc <HAL_GPIO_Init+0x50>
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d031      	beq.n	8001b2a <HAL_GPIO_Init+0xae>
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d01c      	beq.n	8001b04 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aca:	e048      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d043      	beq.n	8001b58 <HAL_GPIO_Init+0xdc>
 8001ad0:	2b11      	cmp	r3, #17
 8001ad2:	d01b      	beq.n	8001b0c <HAL_GPIO_Init+0x90>
          break;
 8001ad4:	e043      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ad6:	4a89      	ldr	r2, [pc, #548]	; (8001cfc <HAL_GPIO_Init+0x280>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d026      	beq.n	8001b2a <HAL_GPIO_Init+0xae>
 8001adc:	4a87      	ldr	r2, [pc, #540]	; (8001cfc <HAL_GPIO_Init+0x280>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d806      	bhi.n	8001af0 <HAL_GPIO_Init+0x74>
 8001ae2:	4a87      	ldr	r2, [pc, #540]	; (8001d00 <HAL_GPIO_Init+0x284>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d020      	beq.n	8001b2a <HAL_GPIO_Init+0xae>
 8001ae8:	4a86      	ldr	r2, [pc, #536]	; (8001d04 <HAL_GPIO_Init+0x288>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d01d      	beq.n	8001b2a <HAL_GPIO_Init+0xae>
          break;
 8001aee:	e036      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001af0:	4a85      	ldr	r2, [pc, #532]	; (8001d08 <HAL_GPIO_Init+0x28c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d019      	beq.n	8001b2a <HAL_GPIO_Init+0xae>
 8001af6:	4a85      	ldr	r2, [pc, #532]	; (8001d0c <HAL_GPIO_Init+0x290>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d016      	beq.n	8001b2a <HAL_GPIO_Init+0xae>
 8001afc:	4a84      	ldr	r2, [pc, #528]	; (8001d10 <HAL_GPIO_Init+0x294>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_GPIO_Init+0xae>
          break;
 8001b02:	e02c      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	623b      	str	r3, [r7, #32]
          break;
 8001b0a:	e028      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	3304      	adds	r3, #4
 8001b12:	623b      	str	r3, [r7, #32]
          break;
 8001b14:	e023      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	3308      	adds	r3, #8
 8001b1c:	623b      	str	r3, [r7, #32]
          break;
 8001b1e:	e01e      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	330c      	adds	r3, #12
 8001b26:	623b      	str	r3, [r7, #32]
          break;
 8001b28:	e019      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d102      	bne.n	8001b38 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b32:	2304      	movs	r3, #4
 8001b34:	623b      	str	r3, [r7, #32]
          break;
 8001b36:	e012      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d105      	bne.n	8001b4c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b40:	2308      	movs	r3, #8
 8001b42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	611a      	str	r2, [r3, #16]
          break;
 8001b4a:	e008      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	615a      	str	r2, [r3, #20]
          break;
 8001b56:	e002      	b.n	8001b5e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	623b      	str	r3, [r7, #32]
          break;
 8001b5c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	2bff      	cmp	r3, #255	; 0xff
 8001b62:	d801      	bhi.n	8001b68 <HAL_GPIO_Init+0xec>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	e001      	b.n	8001b6c <HAL_GPIO_Init+0xf0>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	2bff      	cmp	r3, #255	; 0xff
 8001b72:	d802      	bhi.n	8001b7a <HAL_GPIO_Init+0xfe>
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	e002      	b.n	8001b80 <HAL_GPIO_Init+0x104>
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	3b08      	subs	r3, #8
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	210f      	movs	r1, #15
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	401a      	ands	r2, r3
 8001b92:	6a39      	ldr	r1, [r7, #32]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 8096 	beq.w	8001cda <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bae:	4b59      	ldr	r3, [pc, #356]	; (8001d14 <HAL_GPIO_Init+0x298>)
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	4a58      	ldr	r2, [pc, #352]	; (8001d14 <HAL_GPIO_Init+0x298>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6193      	str	r3, [r2, #24]
 8001bba:	4b56      	ldr	r3, [pc, #344]	; (8001d14 <HAL_GPIO_Init+0x298>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bc6:	4a54      	ldr	r2, [pc, #336]	; (8001d18 <HAL_GPIO_Init+0x29c>)
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4013      	ands	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a4b      	ldr	r2, [pc, #300]	; (8001d1c <HAL_GPIO_Init+0x2a0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_GPIO_Init+0x19e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a4a      	ldr	r2, [pc, #296]	; (8001d20 <HAL_GPIO_Init+0x2a4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00d      	beq.n	8001c16 <HAL_GPIO_Init+0x19a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a49      	ldr	r2, [pc, #292]	; (8001d24 <HAL_GPIO_Init+0x2a8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d007      	beq.n	8001c12 <HAL_GPIO_Init+0x196>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a48      	ldr	r2, [pc, #288]	; (8001d28 <HAL_GPIO_Init+0x2ac>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d101      	bne.n	8001c0e <HAL_GPIO_Init+0x192>
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e006      	b.n	8001c1c <HAL_GPIO_Init+0x1a0>
 8001c0e:	2304      	movs	r3, #4
 8001c10:	e004      	b.n	8001c1c <HAL_GPIO_Init+0x1a0>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e002      	b.n	8001c1c <HAL_GPIO_Init+0x1a0>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_GPIO_Init+0x1a0>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c1e:	f002 0203 	and.w	r2, r2, #3
 8001c22:	0092      	lsls	r2, r2, #2
 8001c24:	4093      	lsls	r3, r2
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c2c:	493a      	ldr	r1, [pc, #232]	; (8001d18 <HAL_GPIO_Init+0x29c>)
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	089b      	lsrs	r3, r3, #2
 8001c32:	3302      	adds	r3, #2
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c46:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4938      	ldr	r1, [pc, #224]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
 8001c52:	e006      	b.n	8001c62 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c54:	4b35      	ldr	r3, [pc, #212]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	4933      	ldr	r1, [pc, #204]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d006      	beq.n	8001c7c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	492e      	ldr	r1, [pc, #184]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
 8001c7a:	e006      	b.n	8001c8a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	4929      	ldr	r1, [pc, #164]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c96:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	4924      	ldr	r1, [pc, #144]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
 8001ca2:	e006      	b.n	8001cb2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ca4:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	491f      	ldr	r1, [pc, #124]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d006      	beq.n	8001ccc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	491a      	ldr	r1, [pc, #104]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60cb      	str	r3, [r1, #12]
 8001cca:	e006      	b.n	8001cda <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	4915      	ldr	r1, [pc, #84]	; (8001d2c <HAL_GPIO_Init+0x2b0>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	3301      	adds	r3, #1
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f47f aed0 	bne.w	8001a90 <HAL_GPIO_Init+0x14>
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	372c      	adds	r7, #44	; 0x2c
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	10210000 	.word	0x10210000
 8001d00:	10110000 	.word	0x10110000
 8001d04:	10120000 	.word	0x10120000
 8001d08:	10310000 	.word	0x10310000
 8001d0c:	10320000 	.word	0x10320000
 8001d10:	10220000 	.word	0x10220000
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40010000 	.word	0x40010000
 8001d1c:	40010800 	.word	0x40010800
 8001d20:	40010c00 	.word	0x40010c00
 8001d24:	40011000 	.word	0x40011000
 8001d28:	40011400 	.word	0x40011400
 8001d2c:	40010400 	.word	0x40010400

08001d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d40:	787b      	ldrb	r3, [r7, #1]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d4c:	e003      	b.n	8001d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	041a      	lsls	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	611a      	str	r2, [r3, #16]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d62:	b08b      	sub	sp, #44	; 0x2c
 8001d64:	af06      	add	r7, sp, #24
 8001d66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e0d3      	b.n	8001f1a <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f004 fa74 	bl	8006274 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2203      	movs	r2, #3
 8001d90:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 fbeb 	bl	8003574 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	687e      	ldr	r6, [r7, #4]
 8001da6:	466d      	mov	r5, sp
 8001da8:	f106 0410 	add.w	r4, r6, #16
 8001dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db0:	6823      	ldr	r3, [r4, #0]
 8001db2:	602b      	str	r3, [r5, #0]
 8001db4:	1d33      	adds	r3, r6, #4
 8001db6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db8:	6838      	ldr	r0, [r7, #0]
 8001dba:	f001 fbb4 	bl	8003526 <USB_CoreInit>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0a4      	b.n	8001f1a <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f001 fbe8 	bl	80035ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	e035      	b.n	8001e4e <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	015b      	lsls	r3, r3, #5
 8001de8:	4413      	add	r3, r2
 8001dea:	3329      	adds	r3, #41	; 0x29
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	015b      	lsls	r3, r3, #5
 8001df6:	4413      	add	r3, r2
 8001df8:	3328      	adds	r3, #40	; 0x28
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	b291      	uxth	r1, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	015b      	lsls	r3, r3, #5
 8001e08:	4413      	add	r3, r2
 8001e0a:	3336      	adds	r3, #54	; 0x36
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	015b      	lsls	r3, r3, #5
 8001e16:	4413      	add	r3, r2
 8001e18:	332b      	adds	r3, #43	; 0x2b
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	015b      	lsls	r3, r3, #5
 8001e24:	4413      	add	r3, r2
 8001e26:	3338      	adds	r3, #56	; 0x38
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	015b      	lsls	r3, r3, #5
 8001e32:	4413      	add	r3, r2
 8001e34:	333c      	adds	r3, #60	; 0x3c
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	3302      	adds	r3, #2
 8001e40:	015b      	lsls	r3, r3, #5
 8001e42:	4413      	add	r3, r2
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	73fb      	strb	r3, [r7, #15]
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d3c4      	bcc.n	8001de2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	73fb      	strb	r3, [r7, #15]
 8001e5c:	e031      	b.n	8001ec2 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	015b      	lsls	r3, r3, #5
 8001e64:	4413      	add	r3, r2
 8001e66:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	015b      	lsls	r3, r3, #5
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	015b      	lsls	r3, r3, #5
 8001e84:	4413      	add	r3, r2
 8001e86:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	015b      	lsls	r3, r3, #5
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	015b      	lsls	r3, r3, #5
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	330a      	adds	r3, #10
 8001eb4:	015b      	lsls	r3, r3, #5
 8001eb6:	4413      	add	r3, r2
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	7bfa      	ldrb	r2, [r7, #15]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d3c8      	bcc.n	8001e5e <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	603b      	str	r3, [r7, #0]
 8001ed2:	687e      	ldr	r6, [r7, #4]
 8001ed4:	466d      	mov	r5, sp
 8001ed6:	f106 0410 	add.w	r4, r6, #16
 8001eda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	602b      	str	r3, [r5, #0]
 8001ee2:	1d33      	adds	r3, r6, #4
 8001ee4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ee6:	6838      	ldr	r0, [r7, #0]
 8001ee8:	f001 fb6c 	bl	80035c4 <USB_DevInit>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00d      	b.n	8001f1a <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 fba9 	bl	800466a <USB_DevDisconnect>

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f22 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d101      	bne.n	8001f38 <HAL_PCD_Start+0x16>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e016      	b.n	8001f66 <HAL_PCD_Start+0x44>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001f40:	2101      	movs	r1, #1
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f004 fbfd 	bl	8006742 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 fb82 	bl	8004656 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f001 faf5 	bl	8003546 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f002 fb7f 	bl	800467e <USB_ReadInterrupts>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f8a:	d102      	bne.n	8001f92 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 faf3 	bl	8002578 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f002 fb71 	bl	800467e <USB_ReadInterrupts>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa6:	d112      	bne.n	8001fce <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fba:	b292      	uxth	r2, r2
 8001fbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f004 f9cc 	bl	800635e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f8de 	bl	800218a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f002 fb53 	bl	800467e <USB_ReadInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fe2:	d10b      	bne.n	8001ffc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ff6:	b292      	uxth	r2, r2
 8001ff8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f002 fb3c 	bl	800467e <USB_ReadInterrupts>
 8002006:	4603      	mov	r3, r0
 8002008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800200c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002010:	d10b      	bne.n	800202a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800201a:	b29a      	uxth	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002024:	b292      	uxth	r2, r2
 8002026:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f002 fb25 	bl	800467e <USB_ReadInterrupts>
 8002034:	4603      	mov	r3, r0
 8002036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800203a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203e:	d126      	bne.n	800208e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002048:	b29a      	uxth	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0204 	bic.w	r2, r2, #4
 8002052:	b292      	uxth	r2, r2
 8002054:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002060:	b29a      	uxth	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0208 	bic.w	r2, r2, #8
 800206a:	b292      	uxth	r2, r2
 800206c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f004 f9ad 	bl	80063d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800207e:	b29a      	uxth	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002088:	b292      	uxth	r2, r2
 800208a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f002 faf3 	bl	800467e <USB_ReadInterrupts>
 8002098:	4603      	mov	r3, r0
 800209a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800209e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020a2:	d13d      	bne.n	8002120 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0208 	orr.w	r2, r2, #8
 80020b6:	b292      	uxth	r2, r2
 80020b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ce:	b292      	uxth	r2, r2
 80020d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020dc:	b29a      	uxth	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0204 	orr.w	r2, r2, #4
 80020e6:	b292      	uxth	r2, r2
 80020e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f002 fac4 	bl	800467e <USB_ReadInterrupts>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002100:	d10b      	bne.n	800211a <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800210a:	b29a      	uxth	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002114:	b292      	uxth	r2, r2
 8002116:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f004 f93e 	bl	800639c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f002 faaa 	bl	800467e <USB_ReadInterrupts>
 800212a:	4603      	mov	r3, r0
 800212c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002134:	d10e      	bne.n	8002154 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800213e:	b29a      	uxth	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002148:	b292      	uxth	r2, r2
 800214a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f004 f8f7 	bl	8006342 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f002 fa90 	bl	800467e <USB_ReadInterrupts>
 800215e:	4603      	mov	r3, r0
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002168:	d10b      	bne.n	8002182 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002172:	b29a      	uxth	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800217c:	b292      	uxth	r2, r2
 800217e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_PCD_SetAddress+0x1a>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e013      	b.n	80021cc <HAL_PCD_SetAddress+0x42>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f002 fa37 	bl	8004630 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	4608      	mov	r0, r1
 80021de:	4611      	mov	r1, r2
 80021e0:	461a      	mov	r2, r3
 80021e2:	4603      	mov	r3, r0
 80021e4:	70fb      	strb	r3, [r7, #3]
 80021e6:	460b      	mov	r3, r1
 80021e8:	803b      	strh	r3, [r7, #0]
 80021ea:	4613      	mov	r3, r2
 80021ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	da0b      	bge.n	8002212 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	015b      	lsls	r3, r3, #5
 8002202:	3328      	adds	r3, #40	; 0x28
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	4413      	add	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	705a      	strb	r2, [r3, #1]
 8002210:	e00b      	b.n	800222a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	015b      	lsls	r3, r3, #5
 800221a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	4413      	add	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	b2da      	uxtb	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002236:	883a      	ldrh	r2, [r7, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	78ba      	ldrb	r2, [r7, #2]
 8002240:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	785b      	ldrb	r3, [r3, #1]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002254:	78bb      	ldrb	r3, [r7, #2]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d102      	bne.n	8002260 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_PCD_EP_Open+0x9a>
 800226a:	2302      	movs	r3, #2
 800226c:	e00e      	b.n	800228c <HAL_PCD_EP_Open+0xb8>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68f9      	ldr	r1, [r7, #12]
 800227c:	4618      	mov	r0, r3
 800227e:	f001 f9c5 	bl	800360c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 800228a:	7afb      	ldrb	r3, [r7, #11]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	da0b      	bge.n	80022c0 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	015b      	lsls	r3, r3, #5
 80022b0:	3328      	adds	r3, #40	; 0x28
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	705a      	strb	r2, [r3, #1]
 80022be:	e00b      	b.n	80022d8 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	015b      	lsls	r3, r3, #5
 80022c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	4413      	add	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_PCD_EP_Close+0x5e>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e00e      	b.n	8002310 <HAL_PCD_EP_Close+0x7c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68f9      	ldr	r1, [r7, #12]
 8002300:	4618      	mov	r0, r3
 8002302:	f001 fc71 	bl	8003be8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	460b      	mov	r3, r1
 8002326:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002328:	7afb      	ldrb	r3, [r7, #11]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	015b      	lsls	r3, r3, #5
 8002330:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4413      	add	r3, r2
 8002338:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2200      	movs	r2, #0
 800234a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2200      	movs	r2, #0
 8002350:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002352:	7afb      	ldrb	r3, [r7, #11]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	b2da      	uxtb	r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800235e:	7afb      	ldrb	r3, [r7, #11]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	2b00      	cmp	r3, #0
 8002366:	d106      	bne.n	8002376 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6979      	ldr	r1, [r7, #20]
 800236e:	4618      	mov	r0, r3
 8002370:	f001 fdd0 	bl	8003f14 <USB_EPStartXfer>
 8002374:	e005      	b.n	8002382 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6979      	ldr	r1, [r7, #20]
 800237c:	4618      	mov	r0, r3
 800237e:	f001 fdc9 	bl	8003f14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	330a      	adds	r3, #10
 80023a2:	015b      	lsls	r3, r3, #5
 80023a4:	4413      	add	r3, r2
 80023a6:	3304      	adds	r3, #4
 80023a8:	681b      	ldr	r3, [r3, #0]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	460b      	mov	r3, r1
 80023c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023c4:	7afb      	ldrb	r3, [r7, #11]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	015b      	lsls	r3, r3, #5
 80023cc:	3328      	adds	r3, #40	; 0x28
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4413      	add	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2201      	movs	r2, #1
 80023ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ec:	7afb      	ldrb	r3, [r7, #11]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023f8:	7afb      	ldrb	r3, [r7, #11]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d106      	bne.n	8002410 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6979      	ldr	r1, [r7, #20]
 8002408:	4618      	mov	r0, r3
 800240a:	f001 fd83 	bl	8003f14 <USB_EPStartXfer>
 800240e:	e005      	b.n	800241c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6979      	ldr	r1, [r7, #20]
 8002416:	4618      	mov	r0, r3
 8002418:	f001 fd7c 	bl	8003f14 <USB_EPStartXfer>
  }

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b084      	sub	sp, #16
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	f003 0207 	and.w	r2, r3, #7
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	429a      	cmp	r2, r3
 800243e:	d901      	bls.n	8002444 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e046      	b.n	80024d2 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002444:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002448:	2b00      	cmp	r3, #0
 800244a:	da0b      	bge.n	8002464 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	015b      	lsls	r3, r3, #5
 8002454:	3328      	adds	r3, #40	; 0x28
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	705a      	strb	r2, [r3, #1]
 8002462:	e009      	b.n	8002478 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	015b      	lsls	r3, r3, #5
 8002468:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	4413      	add	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2201      	movs	r2, #1
 800247c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800247e:	78fb      	ldrb	r3, [r7, #3]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	b2da      	uxtb	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_PCD_EP_SetStall+0x72>
 8002494:	2302      	movs	r3, #2
 8002496:	e01c      	b.n	80024d2 <HAL_PCD_EP_SetStall+0xac>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68f9      	ldr	r1, [r7, #12]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f001 ffec 	bl	8004484 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d108      	bne.n	80024c8 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f002 f8ea 	bl	800469c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	460b      	mov	r3, r1
 80024e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	f003 020f 	and.w	r2, r3, #15
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d901      	bls.n	80024f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e03a      	b.n	800256e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	da0b      	bge.n	8002518 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	015b      	lsls	r3, r3, #5
 8002508:	3328      	adds	r3, #40	; 0x28
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	705a      	strb	r2, [r3, #1]
 8002516:	e00b      	b.n	8002530 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	015b      	lsls	r3, r3, #5
 8002520:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	4413      	add	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	b2da      	uxtb	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_PCD_EP_ClrStall+0x76>
 800254c:	2302      	movs	r3, #2
 800254e:	e00e      	b.n	800256e <HAL_PCD_EP_ClrStall+0x94>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68f9      	ldr	r1, [r7, #12]
 800255e:	4618      	mov	r0, r3
 8002560:	f001 ffd2 	bl	8004508 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002580:	e282      	b.n	8002a88 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800258a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800258c:	8afb      	ldrh	r3, [r7, #22]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002596:	7d7b      	ldrb	r3, [r7, #21]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f040 8142 	bne.w	8002822 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800259e:	8afb      	ldrh	r3, [r7, #22]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d151      	bne.n	800264c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b8:	b29c      	uxth	r4, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80025c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3328      	adds	r3, #40	; 0x28
 80025ce:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d8:	b29b      	uxth	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4413      	add	r3, r2
 80025e4:	3302      	adds	r3, #2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	441a      	add	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800260a:	2100      	movs	r1, #0
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f003 fe81 	bl	8006314 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 8234 	beq.w	8002a88 <PCD_EP_ISR_Handler+0x510>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	2b00      	cmp	r3, #0
 8002626:	f040 822f 	bne.w	8002a88 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002636:	b2da      	uxtb	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	b292      	uxth	r2, r2
 800263e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800264a:	e21d      	b.n	8002a88 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002652:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800265c:	8a7b      	ldrh	r3, [r7, #18]
 800265e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002662:	2b00      	cmp	r3, #0
 8002664:	d033      	beq.n	80026ce <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800266e:	b29b      	uxth	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	3306      	adds	r3, #6
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f002 f848 	bl	800473a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026b6:	4013      	ands	r3, r2
 80026b8:	b29c      	uxth	r4, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80026c2:	b292      	uxth	r2, r2
 80026c4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f003 fdfa 	bl	80062c0 <HAL_PCD_SetupStageCallback>
 80026cc:	e1dc      	b.n	8002a88 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f280 81d8 	bge.w	8002a88 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	b29a      	uxth	r2, r3
 80026e0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026e4:	4013      	ands	r3, r2
 80026e6:	b29c      	uxth	r4, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80026f0:	b292      	uxth	r2, r2
 80026f2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	461a      	mov	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	3306      	adds	r3, #6
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	4413      	add	r3, r2
 8002712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d019      	beq.n	800275c <PCD_EP_ISR_Handler+0x1e4>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d015      	beq.n	800275c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6959      	ldr	r1, [r3, #20]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002740:	b29b      	uxth	r3, r3
 8002742:	f001 fffa 	bl	800473a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	441a      	add	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002754:	2100      	movs	r1, #0
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f003 fdc4 	bl	80062e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	461c      	mov	r4, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800276a:	b29b      	uxth	r3, r3
 800276c:	441c      	add	r4, r3
 800276e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8002772:	461c      	mov	r4, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10e      	bne.n	800279a <PCD_EP_ISR_Handler+0x222>
 800277c:	8823      	ldrh	r3, [r4, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002784:	b29b      	uxth	r3, r3
 8002786:	8023      	strh	r3, [r4, #0]
 8002788:	8823      	ldrh	r3, [r4, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002794:	b29b      	uxth	r3, r3
 8002796:	8023      	strh	r3, [r4, #0]
 8002798:	e02d      	b.n	80027f6 <PCD_EP_ISR_Handler+0x27e>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b3e      	cmp	r3, #62	; 0x3e
 80027a0:	d812      	bhi.n	80027c8 <PCD_EP_ISR_Handler+0x250>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	085b      	lsrs	r3, r3, #1
 80027a8:	61bb      	str	r3, [r7, #24]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <PCD_EP_ISR_Handler+0x244>
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	3301      	adds	r3, #1
 80027ba:	61bb      	str	r3, [r7, #24]
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	029b      	lsls	r3, r3, #10
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	8023      	strh	r3, [r4, #0]
 80027c6:	e016      	b.n	80027f6 <PCD_EP_ISR_Handler+0x27e>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	61bb      	str	r3, [r7, #24]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <PCD_EP_ISR_Handler+0x26a>
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	3b01      	subs	r3, #1
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	029b      	lsls	r3, r3, #10
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002806:	b29c      	uxth	r4, r3
 8002808:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800280c:	b29c      	uxth	r4, r3
 800280e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002812:	b29c      	uxth	r4, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4ba2      	ldr	r3, [pc, #648]	; (8002aa4 <PCD_EP_ISR_Handler+0x52c>)
 800281a:	4323      	orrs	r3, r4
 800281c:	b29b      	uxth	r3, r3
 800281e:	8013      	strh	r3, [r2, #0]
 8002820:	e132      	b.n	8002a88 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	7d7b      	ldrb	r3, [r7, #21]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002832:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f280 80d1 	bge.w	80029de <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	461a      	mov	r2, r3
 8002842:	7d7b      	ldrb	r3, [r7, #21]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29a      	uxth	r2, r3
 800284c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002850:	4013      	ands	r3, r2
 8002852:	b29c      	uxth	r4, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	7d7b      	ldrb	r3, [r7, #21]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002864:	b292      	uxth	r2, r2
 8002866:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002868:	7d7b      	ldrb	r3, [r7, #21]
 800286a:	015b      	lsls	r3, r3, #5
 800286c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	4413      	add	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	7b1b      	ldrb	r3, [r3, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d121      	bne.n	80028c2 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002886:	b29b      	uxth	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	3306      	adds	r3, #6
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	4413      	add	r3, r2
 800289c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a6:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80028a8:	8bfb      	ldrh	r3, [r7, #30]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d072      	beq.n	8002994 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6959      	ldr	r1, [r3, #20]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	88da      	ldrh	r2, [r3, #6]
 80028ba:	8bfb      	ldrh	r3, [r7, #30]
 80028bc:	f001 ff3d 	bl	800473a <USB_ReadPMA>
 80028c0:	e068      	b.n	8002994 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d021      	beq.n	8002920 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4413      	add	r3, r2
 80028f0:	3302      	adds	r3, #2
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002904:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002906:	8bfb      	ldrh	r3, [r7, #30]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d02a      	beq.n	8002962 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6959      	ldr	r1, [r3, #20]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	891a      	ldrh	r2, [r3, #8]
 8002918:	8bfb      	ldrh	r3, [r7, #30]
 800291a:	f001 ff0e 	bl	800473a <USB_ReadPMA>
 800291e:	e020      	b.n	8002962 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002928:	b29b      	uxth	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4413      	add	r3, r2
 8002934:	3306      	adds	r3, #6
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	4413      	add	r3, r2
 800293e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002948:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800294a:	8bfb      	ldrh	r3, [r7, #30]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6959      	ldr	r1, [r3, #20]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	895a      	ldrh	r2, [r3, #10]
 800295c:	8bfb      	ldrh	r3, [r7, #30]
 800295e:	f001 feec 	bl	800473a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	b29b      	uxth	r3, r3
 8002974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297c:	b29c      	uxth	r4, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	441a      	add	r2, r3
 800298c:	4b46      	ldr	r3, [pc, #280]	; (8002aa8 <PCD_EP_ISR_Handler+0x530>)
 800298e:	4323      	orrs	r3, r4
 8002990:	b29b      	uxth	r3, r3
 8002992:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	69da      	ldr	r2, [r3, #28]
 8002998:	8bfb      	ldrh	r3, [r7, #30]
 800299a:	441a      	add	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	8bfb      	ldrh	r3, [r7, #30]
 80029a6:	441a      	add	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d004      	beq.n	80029be <PCD_EP_ISR_Handler+0x446>
 80029b4:	8bfa      	ldrh	r2, [r7, #30]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d206      	bcs.n	80029cc <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	4619      	mov	r1, r3
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f003 fc8d 	bl	80062e4 <HAL_PCD_DataOutStageCallback>
 80029ca:	e008      	b.n	80029de <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	7819      	ldrb	r1, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff fc9d 	bl	8002318 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80029de:	8a7b      	ldrh	r3, [r7, #18]
 80029e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d04f      	beq.n	8002a88 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80029e8:	7d7b      	ldrb	r3, [r7, #21]
 80029ea:	015b      	lsls	r3, r3, #5
 80029ec:	3328      	adds	r3, #40	; 0x28
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	7d7b      	ldrb	r3, [r7, #21]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0c:	b29c      	uxth	r4, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	7d7b      	ldrb	r3, [r7, #21]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	441a      	add	r2, r3
 8002a1a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	441a      	add	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d106      	bne.n	8002a76 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f003 fc50 	bl	8006314 <HAL_PCD_DataInStageCallback>
 8002a74:	e008      	b.n	8002a88 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	7819      	ldrb	r1, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fc96 	bl	80023b4 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	b21b      	sxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f6ff ad74 	blt.w	8002582 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3724      	adds	r7, #36	; 0x24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd90      	pop	{r4, r7, pc}
 8002aa4:	ffff8080 	.word	0xffff8080
 8002aa8:	ffff80c0 	.word	0xffff80c0

08002aac <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	817b      	strh	r3, [r7, #10]
 8002aba:	4613      	mov	r3, r2
 8002abc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002abe:	897b      	ldrh	r3, [r7, #10]
 8002ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d008      	beq.n	8002adc <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aca:	897b      	ldrh	r3, [r7, #10]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	015b      	lsls	r3, r3, #5
 8002ad2:	3328      	adds	r3, #40	; 0x28
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	e006      	b.n	8002aea <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002adc:	897b      	ldrh	r3, [r7, #10]
 8002ade:	015b      	lsls	r3, r3, #5
 8002ae0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002aea:	893b      	ldrh	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d107      	bne.n	8002b00 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2200      	movs	r2, #0
 8002af4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	80da      	strh	r2, [r3, #6]
 8002afe:	e00b      	b.n	8002b18 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2201      	movs	r2, #1
 8002b04:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	0c1b      	lsrs	r3, r3, #16
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e26c      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 8087 	beq.w	8002c52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b44:	4b92      	ldr	r3, [pc, #584]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d00c      	beq.n	8002b6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b50:	4b8f      	ldr	r3, [pc, #572]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 030c 	and.w	r3, r3, #12
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d112      	bne.n	8002b82 <HAL_RCC_OscConfig+0x5e>
 8002b5c:	4b8c      	ldr	r3, [pc, #560]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b68:	d10b      	bne.n	8002b82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6a:	4b89      	ldr	r3, [pc, #548]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d06c      	beq.n	8002c50 <HAL_RCC_OscConfig+0x12c>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d168      	bne.n	8002c50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e246      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b8a:	d106      	bne.n	8002b9a <HAL_RCC_OscConfig+0x76>
 8002b8c:	4b80      	ldr	r3, [pc, #512]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a7f      	ldr	r2, [pc, #508]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	e02e      	b.n	8002bf8 <HAL_RCC_OscConfig+0xd4>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x98>
 8002ba2:	4b7b      	ldr	r3, [pc, #492]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a7a      	ldr	r2, [pc, #488]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	4b78      	ldr	r3, [pc, #480]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a77      	ldr	r2, [pc, #476]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	e01d      	b.n	8002bf8 <HAL_RCC_OscConfig+0xd4>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0xbc>
 8002bc6:	4b72      	ldr	r3, [pc, #456]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a71      	ldr	r2, [pc, #452]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	4b6f      	ldr	r3, [pc, #444]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a6e      	ldr	r2, [pc, #440]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	e00b      	b.n	8002bf8 <HAL_RCC_OscConfig+0xd4>
 8002be0:	4b6b      	ldr	r3, [pc, #428]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a6a      	ldr	r2, [pc, #424]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	4b68      	ldr	r3, [pc, #416]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a67      	ldr	r2, [pc, #412]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d013      	beq.n	8002c28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7fd feea 	bl	80009d8 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c08:	f7fd fee6 	bl	80009d8 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b64      	cmp	r3, #100	; 0x64
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e1fa      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	4b5d      	ldr	r3, [pc, #372]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0xe4>
 8002c26:	e014      	b.n	8002c52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7fd fed6 	bl	80009d8 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c30:	f7fd fed2 	bl	80009d8 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	; 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e1e6      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c42:	4b53      	ldr	r3, [pc, #332]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x10c>
 8002c4e:	e000      	b.n	8002c52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d063      	beq.n	8002d26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c5e:	4b4c      	ldr	r3, [pc, #304]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c6a:	4b49      	ldr	r3, [pc, #292]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d11c      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x18c>
 8002c76:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d116      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c82:	4b43      	ldr	r3, [pc, #268]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_RCC_OscConfig+0x176>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e1ba      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9a:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4939      	ldr	r1, [pc, #228]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cae:	e03a      	b.n	8002d26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d020      	beq.n	8002cfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb8:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <HAL_RCC_OscConfig+0x270>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbe:	f7fd fe8b 	bl	80009d8 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cc6:	f7fd fe87 	bl	80009d8 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e19b      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	4b2d      	ldr	r3, [pc, #180]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce4:	4b2a      	ldr	r3, [pc, #168]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4927      	ldr	r1, [pc, #156]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	600b      	str	r3, [r1, #0]
 8002cf8:	e015      	b.n	8002d26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cfa:	4b26      	ldr	r3, [pc, #152]	; (8002d94 <HAL_RCC_OscConfig+0x270>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7fd fe6a 	bl	80009d8 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d08:	f7fd fe66 	bl	80009d8 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e17a      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d03a      	beq.n	8002da8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d019      	beq.n	8002d6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d3a:	4b17      	ldr	r3, [pc, #92]	; (8002d98 <HAL_RCC_OscConfig+0x274>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d40:	f7fd fe4a 	bl	80009d8 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d48:	f7fd fe46 	bl	80009d8 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e15a      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d66:	2001      	movs	r0, #1
 8002d68:	f000 faa8 	bl	80032bc <RCC_Delay>
 8002d6c:	e01c      	b.n	8002da8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <HAL_RCC_OscConfig+0x274>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d74:	f7fd fe30 	bl	80009d8 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7a:	e00f      	b.n	8002d9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d7c:	f7fd fe2c 	bl	80009d8 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d908      	bls.n	8002d9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e140      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000
 8002d94:	42420000 	.word	0x42420000
 8002d98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d9c:	4b9e      	ldr	r3, [pc, #632]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e9      	bne.n	8002d7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 80a6 	beq.w	8002f02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002db6:	2300      	movs	r3, #0
 8002db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dba:	4b97      	ldr	r3, [pc, #604]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10d      	bne.n	8002de2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	4b94      	ldr	r3, [pc, #592]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	4a93      	ldr	r2, [pc, #588]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	61d3      	str	r3, [r2, #28]
 8002dd2:	4b91      	ldr	r3, [pc, #580]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dde:	2301      	movs	r3, #1
 8002de0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de2:	4b8e      	ldr	r3, [pc, #568]	; (800301c <HAL_RCC_OscConfig+0x4f8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d118      	bne.n	8002e20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dee:	4b8b      	ldr	r3, [pc, #556]	; (800301c <HAL_RCC_OscConfig+0x4f8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a8a      	ldr	r2, [pc, #552]	; (800301c <HAL_RCC_OscConfig+0x4f8>)
 8002df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dfa:	f7fd fded 	bl	80009d8 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e02:	f7fd fde9 	bl	80009d8 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b64      	cmp	r3, #100	; 0x64
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e0fd      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e14:	4b81      	ldr	r3, [pc, #516]	; (800301c <HAL_RCC_OscConfig+0x4f8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d106      	bne.n	8002e36 <HAL_RCC_OscConfig+0x312>
 8002e28:	4b7b      	ldr	r3, [pc, #492]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	4a7a      	ldr	r2, [pc, #488]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	6213      	str	r3, [r2, #32]
 8002e34:	e02d      	b.n	8002e92 <HAL_RCC_OscConfig+0x36e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x334>
 8002e3e:	4b76      	ldr	r3, [pc, #472]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	4a75      	ldr	r2, [pc, #468]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	6213      	str	r3, [r2, #32]
 8002e4a:	4b73      	ldr	r3, [pc, #460]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4a72      	ldr	r2, [pc, #456]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	f023 0304 	bic.w	r3, r3, #4
 8002e54:	6213      	str	r3, [r2, #32]
 8002e56:	e01c      	b.n	8002e92 <HAL_RCC_OscConfig+0x36e>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b05      	cmp	r3, #5
 8002e5e:	d10c      	bne.n	8002e7a <HAL_RCC_OscConfig+0x356>
 8002e60:	4b6d      	ldr	r3, [pc, #436]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	4a6c      	ldr	r2, [pc, #432]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e66:	f043 0304 	orr.w	r3, r3, #4
 8002e6a:	6213      	str	r3, [r2, #32]
 8002e6c:	4b6a      	ldr	r3, [pc, #424]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	4a69      	ldr	r2, [pc, #420]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	6213      	str	r3, [r2, #32]
 8002e78:	e00b      	b.n	8002e92 <HAL_RCC_OscConfig+0x36e>
 8002e7a:	4b67      	ldr	r3, [pc, #412]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	4a66      	ldr	r2, [pc, #408]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	6213      	str	r3, [r2, #32]
 8002e86:	4b64      	ldr	r3, [pc, #400]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4a63      	ldr	r2, [pc, #396]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002e8c:	f023 0304 	bic.w	r3, r3, #4
 8002e90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d015      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e9a:	f7fd fd9d 	bl	80009d8 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f7fd fd99 	bl	80009d8 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e0ab      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	4b57      	ldr	r3, [pc, #348]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0ee      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x37e>
 8002ec4:	e014      	b.n	8002ef0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec6:	f7fd fd87 	bl	80009d8 <HAL_GetTick>
 8002eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ece:	f7fd fd83 	bl	80009d8 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e095      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee4:	4b4c      	ldr	r3, [pc, #304]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1ee      	bne.n	8002ece <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ef0:	7dfb      	ldrb	r3, [r7, #23]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d105      	bne.n	8002f02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef6:	4b48      	ldr	r3, [pc, #288]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	4a47      	ldr	r2, [pc, #284]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 8081 	beq.w	800300e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f0c:	4b42      	ldr	r3, [pc, #264]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 030c 	and.w	r3, r3, #12
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d061      	beq.n	8002fdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d146      	bne.n	8002fae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f20:	4b3f      	ldr	r3, [pc, #252]	; (8003020 <HAL_RCC_OscConfig+0x4fc>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7fd fd57 	bl	80009d8 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2e:	f7fd fd53 	bl	80009d8 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e067      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f40:	4b35      	ldr	r3, [pc, #212]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f54:	d108      	bne.n	8002f68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f56:	4b30      	ldr	r3, [pc, #192]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	492d      	ldr	r1, [pc, #180]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f68:	4b2b      	ldr	r3, [pc, #172]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a19      	ldr	r1, [r3, #32]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	4927      	ldr	r1, [pc, #156]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f80:	4b27      	ldr	r3, [pc, #156]	; (8003020 <HAL_RCC_OscConfig+0x4fc>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fd fd27 	bl	80009d8 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8e:	f7fd fd23 	bl	80009d8 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e037      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x46a>
 8002fac:	e02f      	b.n	800300e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fae:	4b1c      	ldr	r3, [pc, #112]	; (8003020 <HAL_RCC_OscConfig+0x4fc>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7fd fd10 	bl	80009d8 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fd fd0c 	bl	80009d8 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e020      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fce:	4b12      	ldr	r3, [pc, #72]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x498>
 8002fda:	e018      	b.n	800300e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e013      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d106      	bne.n	800300a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d001      	beq.n	800300e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021000 	.word	0x40021000
 800301c:	40007000 	.word	0x40007000
 8003020:	42420060 	.word	0x42420060

08003024 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0d0      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003038:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d910      	bls.n	8003068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b67      	ldr	r3, [pc, #412]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 0207 	bic.w	r2, r3, #7
 800304e:	4965      	ldr	r1, [pc, #404]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0b8      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d020      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003080:	4b59      	ldr	r3, [pc, #356]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4a58      	ldr	r2, [pc, #352]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800308a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003098:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a52      	ldr	r2, [pc, #328]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a4:	4b50      	ldr	r3, [pc, #320]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	494d      	ldr	r1, [pc, #308]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d040      	beq.n	8003144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d107      	bne.n	80030da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d115      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e07f      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e2:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e073      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f2:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e06b      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003102:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f023 0203 	bic.w	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4936      	ldr	r1, [pc, #216]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	4313      	orrs	r3, r2
 8003112:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003114:	f7fd fc60 	bl	80009d8 <HAL_GetTick>
 8003118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	e00a      	b.n	8003132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311c:	f7fd fc5c 	bl	80009d8 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e053      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	4b2d      	ldr	r3, [pc, #180]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 020c 	and.w	r2, r3, #12
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	429a      	cmp	r2, r3
 8003142:	d1eb      	bne.n	800311c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003144:	4b27      	ldr	r3, [pc, #156]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d210      	bcs.n	8003174 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 0207 	bic.w	r2, r3, #7
 800315a:	4922      	ldr	r1, [pc, #136]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e032      	b.n	80031da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003180:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4916      	ldr	r1, [pc, #88]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 800318e:	4313      	orrs	r3, r2
 8003190:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	490e      	ldr	r1, [pc, #56]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031b2:	f000 f821 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80031b6:	4601      	mov	r1, r0
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <HAL_RCC_ClockConfig+0x1c8>)
 80031c4:	5cd3      	ldrb	r3, [r2, r3]
 80031c6:	fa21 f303 	lsr.w	r3, r1, r3
 80031ca:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1cc>)
 80031cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_ClockConfig+0x1d0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd fbbe 	bl	8000954 <HAL_InitTick>

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40022000 	.word	0x40022000
 80031e8:	40021000 	.word	0x40021000
 80031ec:	08006894 	.word	0x08006894
 80031f0:	20000000 	.word	0x20000000
 80031f4:	20000004 	.word	0x20000004

080031f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f8:	b490      	push	{r4, r7}
 80031fa:	b08a      	sub	sp, #40	; 0x28
 80031fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031fe:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003200:	1d3c      	adds	r4, r7, #4
 8003202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003208:	4b28      	ldr	r3, [pc, #160]	; (80032ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	2300      	movs	r3, #0
 8003214:	61bb      	str	r3, [r7, #24]
 8003216:	2300      	movs	r3, #0
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003222:	4b23      	ldr	r3, [pc, #140]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b04      	cmp	r3, #4
 8003230:	d002      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x40>
 8003232:	2b08      	cmp	r3, #8
 8003234:	d003      	beq.n	800323e <HAL_RCC_GetSysClockFreq+0x46>
 8003236:	e02d      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003238:	4b1e      	ldr	r3, [pc, #120]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800323a:	623b      	str	r3, [r7, #32]
      break;
 800323c:	e02d      	b.n	800329a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	0c9b      	lsrs	r3, r3, #18
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800324a:	4413      	add	r3, r2
 800324c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003250:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d013      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800325c:	4b14      	ldr	r3, [pc, #80]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	0c5b      	lsrs	r3, r3, #17
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800326a:	4413      	add	r3, r2
 800326c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003270:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	4a0f      	ldr	r2, [pc, #60]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003276:	fb02 f203 	mul.w	r2, r2, r3
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
 8003282:	e004      	b.n	800328e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	4a0c      	ldr	r2, [pc, #48]	; (80032b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003288:	fb02 f303 	mul.w	r3, r2, r3
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	623b      	str	r3, [r7, #32]
      break;
 8003292:	e002      	b.n	800329a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003296:	623b      	str	r3, [r7, #32]
      break;
 8003298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800329a:	6a3b      	ldr	r3, [r7, #32]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3728      	adds	r7, #40	; 0x28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc90      	pop	{r4, r7}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	08006838 	.word	0x08006838
 80032ac:	08006848 	.word	0x08006848
 80032b0:	40021000 	.word	0x40021000
 80032b4:	007a1200 	.word	0x007a1200
 80032b8:	003d0900 	.word	0x003d0900

080032bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032c4:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <RCC_Delay+0x34>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a0a      	ldr	r2, [pc, #40]	; (80032f4 <RCC_Delay+0x38>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	0a5b      	lsrs	r3, r3, #9
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032d8:	bf00      	nop
  }
  while (Delay --);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1e5a      	subs	r2, r3, #1
 80032de:	60fa      	str	r2, [r7, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f9      	bne.n	80032d8 <RCC_Delay+0x1c>
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000000 	.word	0x20000000
 80032f4:	10624dd3 	.word	0x10624dd3

080032f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d07d      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003314:	2300      	movs	r3, #0
 8003316:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003318:	4b4f      	ldr	r3, [pc, #316]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10d      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003324:	4b4c      	ldr	r3, [pc, #304]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	4a4b      	ldr	r2, [pc, #300]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800332e:	61d3      	str	r3, [r2, #28]
 8003330:	4b49      	ldr	r3, [pc, #292]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333c:	2301      	movs	r3, #1
 800333e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003340:	4b46      	ldr	r3, [pc, #280]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003348:	2b00      	cmp	r3, #0
 800334a:	d118      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800334c:	4b43      	ldr	r3, [pc, #268]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a42      	ldr	r2, [pc, #264]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003356:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003358:	f7fd fb3e 	bl	80009d8 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335e:	e008      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003360:	f7fd fb3a 	bl	80009d8 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e06d      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003372:	4b3a      	ldr	r3, [pc, #232]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800337e:	4b36      	ldr	r3, [pc, #216]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003386:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d02e      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	429a      	cmp	r2, r3
 800339a:	d027      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800339c:	4b2e      	ldr	r3, [pc, #184]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033a6:	4b2e      	ldr	r3, [pc, #184]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033ac:	4b2c      	ldr	r3, [pc, #176]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033b2:	4a29      	ldr	r2, [pc, #164]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d014      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c2:	f7fd fb09 	bl	80009d8 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c8:	e00a      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ca:	f7fd fb05 	bl	80009d8 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d8:	4293      	cmp	r3, r2
 80033da:	d901      	bls.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e036      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e0:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0ee      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4917      	ldr	r1, [pc, #92]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033fe:	7dfb      	ldrb	r3, [r7, #23]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d105      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003404:	4b14      	ldr	r3, [pc, #80]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	4a13      	ldr	r2, [pc, #76]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800340e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d008      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800341c:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	490b      	ldr	r1, [pc, #44]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342a:	4313      	orrs	r3, r2
 800342c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800343a:	4b07      	ldr	r3, [pc, #28]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	4904      	ldr	r1, [pc, #16]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003448:	4313      	orrs	r3, r2
 800344a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000
 800345c:	40007000 	.word	0x40007000
 8003460:	42420440 	.word	0x42420440

08003464 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e053      	b.n	800351e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d106      	bne.n	8003496 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7fd f94d 	bl	8000730 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2202      	movs	r2, #2
 800349a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	ea42 0103 	orr.w	r1, r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	0c1a      	lsrs	r2, r3, #16
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f002 0204 	and.w	r2, r2, #4
 80034fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800350c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003526:	b084      	sub	sp, #16
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	f107 0014 	add.w	r0, r7, #20
 8003534:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	b004      	add	sp, #16
 8003544:	4770      	bx	lr

08003546 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003546:	b480      	push	{r7}
 8003548:	b085      	sub	sp, #20
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800354e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003552:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800355a:	b29a      	uxth	r2, r3
 800355c:	89fb      	ldrh	r3, [r7, #14]
 800355e:	4313      	orrs	r3, r2
 8003560:	b29a      	uxth	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800357c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003580:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003588:	b29b      	uxth	r3, r3
 800358a:	b21a      	sxth	r2, r3
 800358c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003590:	43db      	mvns	r3, r3
 8003592:	b21b      	sxth	r3, r3
 8003594:	4013      	ands	r3, r2
 8003596:	b21b      	sxth	r3, r3
 8003598:	b29a      	uxth	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr

080035ac <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80035c4:	b084      	sub	sp, #16
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b082      	sub	sp, #8
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	f107 0014 	add.w	r0, r7, #20
 80035d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff ffa5 	bl	8003546 <USB_EnableGlobalInt>

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003608:	b004      	add	sp, #16
 800360a:	4770      	bx	lr

0800360c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800360c:	b490      	push	{r4, r7}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800362c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003630:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	78db      	ldrb	r3, [r3, #3]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d819      	bhi.n	800366e <USB_ActivateEndpoint+0x62>
 800363a:	a201      	add	r2, pc, #4	; (adr r2, 8003640 <USB_ActivateEndpoint+0x34>)
 800363c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003640:	08003651 	.word	0x08003651
 8003644:	08003665 	.word	0x08003665
 8003648:	08003675 	.word	0x08003675
 800364c:	0800365b 	.word	0x0800365b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003650:	89bb      	ldrh	r3, [r7, #12]
 8003652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003656:	81bb      	strh	r3, [r7, #12]
      break;
 8003658:	e00d      	b.n	8003676 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800365a:	89bb      	ldrh	r3, [r7, #12]
 800365c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003660:	81bb      	strh	r3, [r7, #12]
      break;
 8003662:	e008      	b.n	8003676 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003664:	89bb      	ldrh	r3, [r7, #12]
 8003666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800366a:	81bb      	strh	r3, [r7, #12]
      break;
 800366c:	e003      	b.n	8003676 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
      break;
 8003672:	e000      	b.n	8003676 <USB_ActivateEndpoint+0x6a>
      break;
 8003674:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	441a      	add	r2, r3
 8003680:	89bb      	ldrh	r3, [r7, #12]
 8003682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800368a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800368e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003692:	b29b      	uxth	r3, r3
 8003694:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	4313      	orrs	r3, r2
 80036b6:	b29c      	uxth	r4, r3
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	441a      	add	r2, r3
 80036c2:	4b8a      	ldr	r3, [pc, #552]	; (80038ec <USB_ActivateEndpoint+0x2e0>)
 80036c4:	4323      	orrs	r3, r4
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	7b1b      	ldrb	r3, [r3, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f040 8112 	bne.w	80038f8 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	785b      	ldrb	r3, [r3, #1]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d067      	beq.n	80037ac <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80036dc:	687c      	ldr	r4, [r7, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	441c      	add	r4, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	4423      	add	r3, r4
 80036f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036f4:	461c      	mov	r4, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	88db      	ldrh	r3, [r3, #6]
 80036fa:	085b      	lsrs	r3, r3, #1
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	b29b      	uxth	r3, r3
 8003702:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	b29c      	uxth	r4, r3
 8003712:	4623      	mov	r3, r4
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	d014      	beq.n	8003746 <USB_ActivateEndpoint+0x13a>
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	b29c      	uxth	r4, r3
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	441a      	add	r2, r3
 800373e:	4b6c      	ldr	r3, [pc, #432]	; (80038f0 <USB_ActivateEndpoint+0x2e4>)
 8003740:	4323      	orrs	r3, r4
 8003742:	b29b      	uxth	r3, r3
 8003744:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	78db      	ldrb	r3, [r3, #3]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d018      	beq.n	8003780 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	b29b      	uxth	r3, r3
 800375c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003764:	b29c      	uxth	r4, r3
 8003766:	f084 0320 	eor.w	r3, r4, #32
 800376a:	b29c      	uxth	r4, r3
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	441a      	add	r2, r3
 8003776:	4b5d      	ldr	r3, [pc, #372]	; (80038ec <USB_ActivateEndpoint+0x2e0>)
 8003778:	4323      	orrs	r3, r4
 800377a:	b29b      	uxth	r3, r3
 800377c:	8013      	strh	r3, [r2, #0]
 800377e:	e22b      	b.n	8003bd8 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	b29b      	uxth	r3, r3
 800378e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003796:	b29c      	uxth	r4, r3
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	441a      	add	r2, r3
 80037a2:	4b52      	ldr	r3, [pc, #328]	; (80038ec <USB_ActivateEndpoint+0x2e0>)
 80037a4:	4323      	orrs	r3, r4
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	8013      	strh	r3, [r2, #0]
 80037aa:	e215      	b.n	8003bd8 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037ac:	687c      	ldr	r4, [r7, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	441c      	add	r4, r3
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	4423      	add	r3, r4
 80037c0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80037c4:	461c      	mov	r4, r3
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	88db      	ldrh	r3, [r3, #6]
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80037d4:	687c      	ldr	r4, [r7, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037dc:	b29b      	uxth	r3, r3
 80037de:	441c      	add	r4, r3
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	4423      	add	r3, r4
 80037e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037ec:	461c      	mov	r4, r3
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10e      	bne.n	8003814 <USB_ActivateEndpoint+0x208>
 80037f6:	8823      	ldrh	r3, [r4, #0]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037fe:	b29b      	uxth	r3, r3
 8003800:	8023      	strh	r3, [r4, #0]
 8003802:	8823      	ldrh	r3, [r4, #0]
 8003804:	b29b      	uxth	r3, r3
 8003806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800380a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800380e:	b29b      	uxth	r3, r3
 8003810:	8023      	strh	r3, [r4, #0]
 8003812:	e02d      	b.n	8003870 <USB_ActivateEndpoint+0x264>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	2b3e      	cmp	r3, #62	; 0x3e
 800381a:	d812      	bhi.n	8003842 <USB_ActivateEndpoint+0x236>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	60bb      	str	r3, [r7, #8]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <USB_ActivateEndpoint+0x22a>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	3301      	adds	r3, #1
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	b29b      	uxth	r3, r3
 800383a:	029b      	lsls	r3, r3, #10
 800383c:	b29b      	uxth	r3, r3
 800383e:	8023      	strh	r3, [r4, #0]
 8003840:	e016      	b.n	8003870 <USB_ActivateEndpoint+0x264>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f003 031f 	and.w	r3, r3, #31
 8003852:	2b00      	cmp	r3, #0
 8003854:	d102      	bne.n	800385c <USB_ActivateEndpoint+0x250>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	3b01      	subs	r3, #1
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	b29b      	uxth	r3, r3
 8003860:	029b      	lsls	r3, r3, #10
 8003862:	b29b      	uxth	r3, r3
 8003864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800386c:	b29b      	uxth	r3, r3
 800386e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	b29c      	uxth	r4, r3
 800387e:	4623      	mov	r3, r4
 8003880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d014      	beq.n	80038b2 <USB_ActivateEndpoint+0x2a6>
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	b29b      	uxth	r3, r3
 8003896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800389a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389e:	b29c      	uxth	r4, r3
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	441a      	add	r2, r3
 80038aa:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <USB_ActivateEndpoint+0x2e8>)
 80038ac:	4323      	orrs	r3, r4
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c8:	b29c      	uxth	r4, r3
 80038ca:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80038ce:	b29c      	uxth	r4, r3
 80038d0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80038d4:	b29c      	uxth	r4, r3
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	441a      	add	r2, r3
 80038e0:	4b02      	ldr	r3, [pc, #8]	; (80038ec <USB_ActivateEndpoint+0x2e0>)
 80038e2:	4323      	orrs	r3, r4
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	8013      	strh	r3, [r2, #0]
 80038e8:	e176      	b.n	8003bd8 <USB_ActivateEndpoint+0x5cc>
 80038ea:	bf00      	nop
 80038ec:	ffff8080 	.word	0xffff8080
 80038f0:	ffff80c0 	.word	0xffff80c0
 80038f4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800390a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390e:	b29c      	uxth	r4, r3
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	441a      	add	r2, r3
 800391a:	4b96      	ldr	r3, [pc, #600]	; (8003b74 <USB_ActivateEndpoint+0x568>)
 800391c:	4323      	orrs	r3, r4
 800391e:	b29b      	uxth	r3, r3
 8003920:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003922:	687c      	ldr	r4, [r7, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800392a:	b29b      	uxth	r3, r3
 800392c:	441c      	add	r4, r3
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	4423      	add	r3, r4
 8003936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800393a:	461c      	mov	r4, r3
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	891b      	ldrh	r3, [r3, #8]
 8003940:	085b      	lsrs	r3, r3, #1
 8003942:	b29b      	uxth	r3, r3
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	b29b      	uxth	r3, r3
 8003948:	8023      	strh	r3, [r4, #0]
 800394a:	687c      	ldr	r4, [r7, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003952:	b29b      	uxth	r3, r3
 8003954:	441c      	add	r4, r3
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	4423      	add	r3, r4
 800395e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003962:	461c      	mov	r4, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	895b      	ldrh	r3, [r3, #10]
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	b29b      	uxth	r3, r3
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	b29b      	uxth	r3, r3
 8003970:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	785b      	ldrb	r3, [r3, #1]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f040 8088 	bne.w	8003a8c <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29c      	uxth	r4, r3
 800398a:	4623      	mov	r3, r4
 800398c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d014      	beq.n	80039be <USB_ActivateEndpoint+0x3b2>
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039aa:	b29c      	uxth	r4, r3
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	441a      	add	r2, r3
 80039b6:	4b70      	ldr	r3, [pc, #448]	; (8003b78 <USB_ActivateEndpoint+0x56c>)
 80039b8:	4323      	orrs	r3, r4
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	b29c      	uxth	r4, r3
 80039cc:	4623      	mov	r3, r4
 80039ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d014      	beq.n	8003a00 <USB_ActivateEndpoint+0x3f4>
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ec:	b29c      	uxth	r4, r3
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	441a      	add	r2, r3
 80039f8:	4b60      	ldr	r3, [pc, #384]	; (8003b7c <USB_ActivateEndpoint+0x570>)
 80039fa:	4323      	orrs	r3, r4
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a16:	b29c      	uxth	r4, r3
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	441a      	add	r2, r3
 8003a22:	4b56      	ldr	r3, [pc, #344]	; (8003b7c <USB_ActivateEndpoint+0x570>)
 8003a24:	4323      	orrs	r3, r4
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a40:	b29c      	uxth	r4, r3
 8003a42:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003a46:	b29c      	uxth	r4, r3
 8003a48:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003a4c:	b29c      	uxth	r4, r3
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	441a      	add	r2, r3
 8003a58:	4b49      	ldr	r3, [pc, #292]	; (8003b80 <USB_ActivateEndpoint+0x574>)
 8003a5a:	4323      	orrs	r3, r4
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a76:	b29c      	uxth	r4, r3
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	441a      	add	r2, r3
 8003a82:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <USB_ActivateEndpoint+0x574>)
 8003a84:	4323      	orrs	r3, r4
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	8013      	strh	r3, [r2, #0]
 8003a8a:	e0a5      	b.n	8003bd8 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	b29c      	uxth	r4, r3
 8003a9a:	4623      	mov	r3, r4
 8003a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d014      	beq.n	8003ace <USB_ActivateEndpoint+0x4c2>
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aba:	b29c      	uxth	r4, r3
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	441a      	add	r2, r3
 8003ac6:	4b2c      	ldr	r3, [pc, #176]	; (8003b78 <USB_ActivateEndpoint+0x56c>)
 8003ac8:	4323      	orrs	r3, r4
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	b29c      	uxth	r4, r3
 8003adc:	4623      	mov	r3, r4
 8003ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d014      	beq.n	8003b10 <USB_ActivateEndpoint+0x504>
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afc:	b29c      	uxth	r4, r3
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	441a      	add	r2, r3
 8003b08:	4b1c      	ldr	r3, [pc, #112]	; (8003b7c <USB_ActivateEndpoint+0x570>)
 8003b0a:	4323      	orrs	r3, r4
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	b29c      	uxth	r4, r3
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	441a      	add	r2, r3
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <USB_ActivateEndpoint+0x56c>)
 8003b34:	4323      	orrs	r3, r4
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	78db      	ldrb	r3, [r3, #3]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d020      	beq.n	8003b84 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b58:	b29c      	uxth	r4, r3
 8003b5a:	f084 0320 	eor.w	r3, r4, #32
 8003b5e:	b29c      	uxth	r4, r3
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	441a      	add	r2, r3
 8003b6a:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <USB_ActivateEndpoint+0x574>)
 8003b6c:	4323      	orrs	r3, r4
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	8013      	strh	r3, [r2, #0]
 8003b72:	e01c      	b.n	8003bae <USB_ActivateEndpoint+0x5a2>
 8003b74:	ffff8180 	.word	0xffff8180
 8003b78:	ffffc080 	.word	0xffffc080
 8003b7c:	ffff80c0 	.word	0xffff80c0
 8003b80:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b9a:	b29c      	uxth	r4, r3
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	441a      	add	r2, r3
 8003ba6:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <USB_ActivateEndpoint+0x5d8>)
 8003ba8:	4323      	orrs	r3, r4
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc4:	b29c      	uxth	r4, r3
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	441a      	add	r2, r3
 8003bd0:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <USB_ActivateEndpoint+0x5d8>)
 8003bd2:	4323      	orrs	r3, r4
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc90      	pop	{r4, r7}
 8003be2:	4770      	bx	lr
 8003be4:	ffff8080 	.word	0xffff8080

08003be8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003be8:	b490      	push	{r4, r7}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	7b1b      	ldrb	r3, [r3, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d171      	bne.n	8003cde <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	785b      	ldrb	r3, [r3, #1]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d036      	beq.n	8003c70 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b29c      	uxth	r4, r3
 8003c10:	4623      	mov	r3, r4
 8003c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d014      	beq.n	8003c44 <USB_DeactivateEndpoint+0x5c>
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c30:	b29c      	uxth	r4, r3
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	441a      	add	r2, r3
 8003c3c:	4b6b      	ldr	r3, [pc, #428]	; (8003dec <USB_DeactivateEndpoint+0x204>)
 8003c3e:	4323      	orrs	r3, r4
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c5a:	b29c      	uxth	r4, r3
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	441a      	add	r2, r3
 8003c66:	4b62      	ldr	r3, [pc, #392]	; (8003df0 <USB_DeactivateEndpoint+0x208>)
 8003c68:	4323      	orrs	r3, r4
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	8013      	strh	r3, [r2, #0]
 8003c6e:	e144      	b.n	8003efa <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	b29c      	uxth	r4, r3
 8003c7e:	4623      	mov	r3, r4
 8003c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d014      	beq.n	8003cb2 <USB_DeactivateEndpoint+0xca>
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9e:	b29c      	uxth	r4, r3
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	441a      	add	r2, r3
 8003caa:	4b52      	ldr	r3, [pc, #328]	; (8003df4 <USB_DeactivateEndpoint+0x20c>)
 8003cac:	4323      	orrs	r3, r4
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc8:	b29c      	uxth	r4, r3
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	441a      	add	r2, r3
 8003cd4:	4b46      	ldr	r3, [pc, #280]	; (8003df0 <USB_DeactivateEndpoint+0x208>)
 8003cd6:	4323      	orrs	r3, r4
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	8013      	strh	r3, [r2, #0]
 8003cdc:	e10d      	b.n	8003efa <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	785b      	ldrb	r3, [r3, #1]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f040 8088 	bne.w	8003df8 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	b29c      	uxth	r4, r3
 8003cf6:	4623      	mov	r3, r4
 8003cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d014      	beq.n	8003d2a <USB_DeactivateEndpoint+0x142>
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d16:	b29c      	uxth	r4, r3
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	441a      	add	r2, r3
 8003d22:	4b34      	ldr	r3, [pc, #208]	; (8003df4 <USB_DeactivateEndpoint+0x20c>)
 8003d24:	4323      	orrs	r3, r4
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	b29c      	uxth	r4, r3
 8003d38:	4623      	mov	r3, r4
 8003d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d014      	beq.n	8003d6c <USB_DeactivateEndpoint+0x184>
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d58:	b29c      	uxth	r4, r3
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	441a      	add	r2, r3
 8003d64:	4b21      	ldr	r3, [pc, #132]	; (8003dec <USB_DeactivateEndpoint+0x204>)
 8003d66:	4323      	orrs	r3, r4
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d82:	b29c      	uxth	r4, r3
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	441a      	add	r2, r3
 8003d8e:	4b17      	ldr	r3, [pc, #92]	; (8003dec <USB_DeactivateEndpoint+0x204>)
 8003d90:	4323      	orrs	r3, r4
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dac:	b29c      	uxth	r4, r3
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	441a      	add	r2, r3
 8003db8:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <USB_DeactivateEndpoint+0x208>)
 8003dba:	4323      	orrs	r3, r4
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd6:	b29c      	uxth	r4, r3
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	441a      	add	r2, r3
 8003de2:	4b03      	ldr	r3, [pc, #12]	; (8003df0 <USB_DeactivateEndpoint+0x208>)
 8003de4:	4323      	orrs	r3, r4
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	8013      	strh	r3, [r2, #0]
 8003dea:	e086      	b.n	8003efa <USB_DeactivateEndpoint+0x312>
 8003dec:	ffff80c0 	.word	0xffff80c0
 8003df0:	ffff8080 	.word	0xffff8080
 8003df4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	b29c      	uxth	r4, r3
 8003e06:	4623      	mov	r3, r4
 8003e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d014      	beq.n	8003e3a <USB_DeactivateEndpoint+0x252>
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e26:	b29c      	uxth	r4, r3
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	441a      	add	r2, r3
 8003e32:	4b35      	ldr	r3, [pc, #212]	; (8003f08 <USB_DeactivateEndpoint+0x320>)
 8003e34:	4323      	orrs	r3, r4
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	b29c      	uxth	r4, r3
 8003e48:	4623      	mov	r3, r4
 8003e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d014      	beq.n	8003e7c <USB_DeactivateEndpoint+0x294>
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e68:	b29c      	uxth	r4, r3
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	441a      	add	r2, r3
 8003e74:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <USB_DeactivateEndpoint+0x324>)
 8003e76:	4323      	orrs	r3, r4
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e92:	b29c      	uxth	r4, r3
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	441a      	add	r2, r3
 8003e9e:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <USB_DeactivateEndpoint+0x320>)
 8003ea0:	4323      	orrs	r3, r4
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ebc:	b29c      	uxth	r4, r3
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	441a      	add	r2, r3
 8003ec8:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <USB_DeactivateEndpoint+0x328>)
 8003eca:	4323      	orrs	r3, r4
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee6:	b29c      	uxth	r4, r3
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	441a      	add	r2, r3
 8003ef2:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <USB_DeactivateEndpoint+0x328>)
 8003ef4:	4323      	orrs	r3, r4
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc90      	pop	{r4, r7}
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	ffffc080 	.word	0xffffc080
 8003f0c:	ffff80c0 	.word	0xffff80c0
 8003f10:	ffff8080 	.word	0xffff8080

08003f14 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f14:	b590      	push	{r4, r7, lr}
 8003f16:	b08d      	sub	sp, #52	; 0x34
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	785b      	ldrb	r3, [r3, #1]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	f040 8160 	bne.w	80041e8 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	699a      	ldr	r2, [r3, #24]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d909      	bls.n	8003f48 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	699a      	ldr	r2, [r3, #24]
 8003f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f40:	1ad2      	subs	r2, r2, r3
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	619a      	str	r2, [r3, #24]
 8003f46:	e005      	b.n	8003f54 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2200      	movs	r2, #0
 8003f52:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	7b1b      	ldrb	r3, [r3, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d119      	bne.n	8003f90 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	6959      	ldr	r1, [r3, #20]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	88da      	ldrh	r2, [r3, #6]
 8003f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fba2 	bl	80046b2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003f6e:	687c      	ldr	r4, [r7, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	441c      	add	r4, r3
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	4423      	add	r3, r4
 8003f82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f86:	461c      	mov	r4, r3
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	8023      	strh	r3, [r4, #0]
 8003f8e:	e10f      	b.n	80041b0 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d065      	beq.n	8004072 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003fa6:	687c      	ldr	r4, [r7, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	785b      	ldrb	r3, [r3, #1]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d148      	bne.n	8004042 <USB_EPStartXfer+0x12e>
 8003fb0:	687c      	ldr	r4, [r7, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	441c      	add	r4, r3
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	4423      	add	r3, r4
 8003fc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fc8:	461c      	mov	r4, r3
 8003fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10e      	bne.n	8003fee <USB_EPStartXfer+0xda>
 8003fd0:	8823      	ldrh	r3, [r4, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	8023      	strh	r3, [r4, #0]
 8003fdc:	8823      	ldrh	r3, [r4, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	8023      	strh	r3, [r4, #0]
 8003fec:	e03d      	b.n	800406a <USB_EPStartXfer+0x156>
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	2b3e      	cmp	r3, #62	; 0x3e
 8003ff2:	d810      	bhi.n	8004016 <USB_EPStartXfer+0x102>
 8003ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff6:	085b      	lsrs	r3, r3, #1
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <USB_EPStartXfer+0xf6>
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	3301      	adds	r3, #1
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	b29b      	uxth	r3, r3
 800400e:	029b      	lsls	r3, r3, #10
 8004010:	b29b      	uxth	r3, r3
 8004012:	8023      	strh	r3, [r4, #0]
 8004014:	e029      	b.n	800406a <USB_EPStartXfer+0x156>
 8004016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
 800401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	2b00      	cmp	r3, #0
 8004024:	d102      	bne.n	800402c <USB_EPStartXfer+0x118>
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	3b01      	subs	r3, #1
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	b29b      	uxth	r3, r3
 8004030:	029b      	lsls	r3, r3, #10
 8004032:	b29b      	uxth	r3, r3
 8004034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800403c:	b29b      	uxth	r3, r3
 800403e:	8023      	strh	r3, [r4, #0]
 8004040:	e013      	b.n	800406a <USB_EPStartXfer+0x156>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	785b      	ldrb	r3, [r3, #1]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d10f      	bne.n	800406a <USB_EPStartXfer+0x156>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004050:	b29b      	uxth	r3, r3
 8004052:	441c      	add	r4, r3
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	4423      	add	r3, r4
 800405c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	895b      	ldrh	r3, [r3, #10]
 800406e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004070:	e063      	b.n	800413a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	785b      	ldrb	r3, [r3, #1]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d148      	bne.n	800410c <USB_EPStartXfer+0x1f8>
 800407a:	687c      	ldr	r4, [r7, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004082:	b29b      	uxth	r3, r3
 8004084:	441c      	add	r4, r3
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	4423      	add	r3, r4
 800408e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004092:	461c      	mov	r4, r3
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10e      	bne.n	80040b8 <USB_EPStartXfer+0x1a4>
 800409a:	8823      	ldrh	r3, [r4, #0]
 800409c:	b29b      	uxth	r3, r3
 800409e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	8023      	strh	r3, [r4, #0]
 80040a6:	8823      	ldrh	r3, [r4, #0]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	8023      	strh	r3, [r4, #0]
 80040b6:	e03d      	b.n	8004134 <USB_EPStartXfer+0x220>
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	2b3e      	cmp	r3, #62	; 0x3e
 80040bc:	d810      	bhi.n	80040e0 <USB_EPStartXfer+0x1cc>
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	085b      	lsrs	r3, r3, #1
 80040c2:	623b      	str	r3, [r7, #32]
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <USB_EPStartXfer+0x1c0>
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	3301      	adds	r3, #1
 80040d2:	623b      	str	r3, [r7, #32]
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	029b      	lsls	r3, r3, #10
 80040da:	b29b      	uxth	r3, r3
 80040dc:	8023      	strh	r3, [r4, #0]
 80040de:	e029      	b.n	8004134 <USB_EPStartXfer+0x220>
 80040e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	623b      	str	r3, [r7, #32]
 80040e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e8:	f003 031f 	and.w	r3, r3, #31
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <USB_EPStartXfer+0x1e2>
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	623b      	str	r3, [r7, #32]
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	029b      	lsls	r3, r3, #10
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004106:	b29b      	uxth	r3, r3
 8004108:	8023      	strh	r3, [r4, #0]
 800410a:	e013      	b.n	8004134 <USB_EPStartXfer+0x220>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	785b      	ldrb	r3, [r3, #1]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d10f      	bne.n	8004134 <USB_EPStartXfer+0x220>
 8004114:	687c      	ldr	r4, [r7, #4]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800411c:	b29b      	uxth	r3, r3
 800411e:	441c      	add	r4, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	4423      	add	r3, r4
 8004128:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800412c:	461c      	mov	r4, r3
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	b29b      	uxth	r3, r3
 8004132:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	891b      	ldrh	r3, [r3, #8]
 8004138:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6959      	ldr	r1, [r3, #20]
 800413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004140:	b29b      	uxth	r3, r3
 8004142:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fab4 	bl	80046b2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	785b      	ldrb	r3, [r3, #1]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d115      	bne.n	800417e <USB_EPStartXfer+0x26a>
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	b29b      	uxth	r3, r3
 8004160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004168:	b29c      	uxth	r4, r3
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	441a      	add	r2, r3
 8004174:	4b9a      	ldr	r3, [pc, #616]	; (80043e0 <USB_EPStartXfer+0x4cc>)
 8004176:	4323      	orrs	r3, r4
 8004178:	b29b      	uxth	r3, r3
 800417a:	8013      	strh	r3, [r2, #0]
 800417c:	e018      	b.n	80041b0 <USB_EPStartXfer+0x29c>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	785b      	ldrb	r3, [r3, #1]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d114      	bne.n	80041b0 <USB_EPStartXfer+0x29c>
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419c:	b29c      	uxth	r4, r3
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	441a      	add	r2, r3
 80041a8:	4b8e      	ldr	r3, [pc, #568]	; (80043e4 <USB_EPStartXfer+0x4d0>)
 80041aa:	4323      	orrs	r3, r4
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c6:	b29c      	uxth	r4, r3
 80041c8:	f084 0310 	eor.w	r3, r4, #16
 80041cc:	b29c      	uxth	r4, r3
 80041ce:	f084 0320 	eor.w	r3, r4, #32
 80041d2:	b29c      	uxth	r4, r3
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	441a      	add	r2, r3
 80041de:	4b82      	ldr	r3, [pc, #520]	; (80043e8 <USB_EPStartXfer+0x4d4>)
 80041e0:	4323      	orrs	r3, r4
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	8013      	strh	r3, [r2, #0]
 80041e6:	e146      	b.n	8004476 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	699a      	ldr	r2, [r3, #24]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d909      	bls.n	8004208 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	1ad2      	subs	r2, r2, r3
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	619a      	str	r2, [r3, #24]
 8004206:	e005      	b.n	8004214 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2200      	movs	r2, #0
 8004212:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	7b1b      	ldrb	r3, [r3, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d148      	bne.n	80042ae <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800421c:	687c      	ldr	r4, [r7, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004224:	b29b      	uxth	r3, r3
 8004226:	441c      	add	r4, r3
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	4423      	add	r3, r4
 8004230:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004234:	461c      	mov	r4, r3
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10e      	bne.n	800425a <USB_EPStartXfer+0x346>
 800423c:	8823      	ldrh	r3, [r4, #0]
 800423e:	b29b      	uxth	r3, r3
 8004240:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004244:	b29b      	uxth	r3, r3
 8004246:	8023      	strh	r3, [r4, #0]
 8004248:	8823      	ldrh	r3, [r4, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004250:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004254:	b29b      	uxth	r3, r3
 8004256:	8023      	strh	r3, [r4, #0]
 8004258:	e0f2      	b.n	8004440 <USB_EPStartXfer+0x52c>
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	2b3e      	cmp	r3, #62	; 0x3e
 800425e:	d810      	bhi.n	8004282 <USB_EPStartXfer+0x36e>
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	085b      	lsrs	r3, r3, #1
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <USB_EPStartXfer+0x362>
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	3301      	adds	r3, #1
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	b29b      	uxth	r3, r3
 800427a:	029b      	lsls	r3, r3, #10
 800427c:	b29b      	uxth	r3, r3
 800427e:	8023      	strh	r3, [r4, #0]
 8004280:	e0de      	b.n	8004440 <USB_EPStartXfer+0x52c>
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	2b00      	cmp	r3, #0
 8004290:	d102      	bne.n	8004298 <USB_EPStartXfer+0x384>
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3b01      	subs	r3, #1
 8004296:	61fb      	str	r3, [r7, #28]
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	b29b      	uxth	r3, r3
 800429c:	029b      	lsls	r3, r3, #10
 800429e:	b29b      	uxth	r3, r3
 80042a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	8023      	strh	r3, [r4, #0]
 80042ac:	e0c8      	b.n	8004440 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	785b      	ldrb	r3, [r3, #1]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d148      	bne.n	8004348 <USB_EPStartXfer+0x434>
 80042b6:	687c      	ldr	r4, [r7, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042be:	b29b      	uxth	r3, r3
 80042c0:	441c      	add	r4, r3
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	4423      	add	r3, r4
 80042ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042ce:	461c      	mov	r4, r3
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10e      	bne.n	80042f4 <USB_EPStartXfer+0x3e0>
 80042d6:	8823      	ldrh	r3, [r4, #0]
 80042d8:	b29b      	uxth	r3, r3
 80042da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042de:	b29b      	uxth	r3, r3
 80042e0:	8023      	strh	r3, [r4, #0]
 80042e2:	8823      	ldrh	r3, [r4, #0]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	8023      	strh	r3, [r4, #0]
 80042f2:	e03d      	b.n	8004370 <USB_EPStartXfer+0x45c>
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	2b3e      	cmp	r3, #62	; 0x3e
 80042f8:	d810      	bhi.n	800431c <USB_EPStartXfer+0x408>
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	085b      	lsrs	r3, r3, #1
 80042fe:	61bb      	str	r3, [r7, #24]
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <USB_EPStartXfer+0x3fc>
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	3301      	adds	r3, #1
 800430e:	61bb      	str	r3, [r7, #24]
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	b29b      	uxth	r3, r3
 8004314:	029b      	lsls	r3, r3, #10
 8004316:	b29b      	uxth	r3, r3
 8004318:	8023      	strh	r3, [r4, #0]
 800431a:	e029      	b.n	8004370 <USB_EPStartXfer+0x45c>
 800431c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	61bb      	str	r3, [r7, #24]
 8004322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004324:	f003 031f 	and.w	r3, r3, #31
 8004328:	2b00      	cmp	r3, #0
 800432a:	d102      	bne.n	8004332 <USB_EPStartXfer+0x41e>
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	3b01      	subs	r3, #1
 8004330:	61bb      	str	r3, [r7, #24]
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	b29b      	uxth	r3, r3
 8004336:	029b      	lsls	r3, r3, #10
 8004338:	b29b      	uxth	r3, r3
 800433a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800433e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004342:	b29b      	uxth	r3, r3
 8004344:	8023      	strh	r3, [r4, #0]
 8004346:	e013      	b.n	8004370 <USB_EPStartXfer+0x45c>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	785b      	ldrb	r3, [r3, #1]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d10f      	bne.n	8004370 <USB_EPStartXfer+0x45c>
 8004350:	687c      	ldr	r4, [r7, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004358:	b29b      	uxth	r3, r3
 800435a:	441c      	add	r4, r3
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	4423      	add	r3, r4
 8004364:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004368:	461c      	mov	r4, r3
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	b29b      	uxth	r3, r3
 800436e:	8023      	strh	r3, [r4, #0]
 8004370:	687c      	ldr	r4, [r7, #4]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	785b      	ldrb	r3, [r3, #1]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d14e      	bne.n	8004418 <USB_EPStartXfer+0x504>
 800437a:	687c      	ldr	r4, [r7, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004382:	b29b      	uxth	r3, r3
 8004384:	441c      	add	r4, r3
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	4423      	add	r3, r4
 800438e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004392:	461c      	mov	r4, r3
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10e      	bne.n	80043b8 <USB_EPStartXfer+0x4a4>
 800439a:	8823      	ldrh	r3, [r4, #0]
 800439c:	b29b      	uxth	r3, r3
 800439e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	8023      	strh	r3, [r4, #0]
 80043a6:	8823      	ldrh	r3, [r4, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	8023      	strh	r3, [r4, #0]
 80043b6:	e043      	b.n	8004440 <USB_EPStartXfer+0x52c>
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	2b3e      	cmp	r3, #62	; 0x3e
 80043bc:	d816      	bhi.n	80043ec <USB_EPStartXfer+0x4d8>
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	085b      	lsrs	r3, r3, #1
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <USB_EPStartXfer+0x4c0>
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	3301      	adds	r3, #1
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	029b      	lsls	r3, r3, #10
 80043da:	b29b      	uxth	r3, r3
 80043dc:	8023      	strh	r3, [r4, #0]
 80043de:	e02f      	b.n	8004440 <USB_EPStartXfer+0x52c>
 80043e0:	ffff80c0 	.word	0xffff80c0
 80043e4:	ffffc080 	.word	0xffffc080
 80043e8:	ffff8080 	.word	0xffff8080
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	617b      	str	r3, [r7, #20]
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d102      	bne.n	8004402 <USB_EPStartXfer+0x4ee>
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	3b01      	subs	r3, #1
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	b29b      	uxth	r3, r3
 8004406:	029b      	lsls	r3, r3, #10
 8004408:	b29b      	uxth	r3, r3
 800440a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800440e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004412:	b29b      	uxth	r3, r3
 8004414:	8023      	strh	r3, [r4, #0]
 8004416:	e013      	b.n	8004440 <USB_EPStartXfer+0x52c>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	785b      	ldrb	r3, [r3, #1]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d10f      	bne.n	8004440 <USB_EPStartXfer+0x52c>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004426:	b29b      	uxth	r3, r3
 8004428:	441c      	add	r4, r3
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	4423      	add	r3, r4
 8004432:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	b29a      	uxth	r2, r3
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	b29b      	uxth	r3, r3
 800444e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004456:	b29c      	uxth	r4, r3
 8004458:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800445c:	b29c      	uxth	r4, r3
 800445e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004462:	b29c      	uxth	r4, r3
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	441a      	add	r2, r3
 800446e:	4b04      	ldr	r3, [pc, #16]	; (8004480 <USB_EPStartXfer+0x56c>)
 8004470:	4323      	orrs	r3, r4
 8004472:	b29b      	uxth	r3, r3
 8004474:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3734      	adds	r7, #52	; 0x34
 800447c:	46bd      	mov	sp, r7
 800447e:	bd90      	pop	{r4, r7, pc}
 8004480:	ffff8080 	.word	0xffff8080

08004484 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004484:	b490      	push	{r4, r7}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	785b      	ldrb	r3, [r3, #1]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d018      	beq.n	80044c8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ac:	b29c      	uxth	r4, r3
 80044ae:	f084 0310 	eor.w	r3, r4, #16
 80044b2:	b29c      	uxth	r4, r3
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	441a      	add	r2, r3
 80044be:	4b11      	ldr	r3, [pc, #68]	; (8004504 <USB_EPSetStall+0x80>)
 80044c0:	4323      	orrs	r3, r4
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	8013      	strh	r3, [r2, #0]
 80044c6:	e017      	b.n	80044f8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044de:	b29c      	uxth	r4, r3
 80044e0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80044e4:	b29c      	uxth	r4, r3
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	441a      	add	r2, r3
 80044f0:	4b04      	ldr	r3, [pc, #16]	; (8004504 <USB_EPSetStall+0x80>)
 80044f2:	4323      	orrs	r3, r4
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc90      	pop	{r4, r7}
 8004502:	4770      	bx	lr
 8004504:	ffff8080 	.word	0xffff8080

08004508 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004508:	b490      	push	{r4, r7}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	7b1b      	ldrb	r3, [r3, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d17d      	bne.n	8004616 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	785b      	ldrb	r3, [r3, #1]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d03d      	beq.n	800459e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	b29c      	uxth	r4, r3
 8004530:	4623      	mov	r3, r4
 8004532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	d014      	beq.n	8004564 <USB_EPClearStall+0x5c>
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	b29b      	uxth	r3, r3
 8004548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800454c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004550:	b29c      	uxth	r4, r3
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	441a      	add	r2, r3
 800455c:	4b31      	ldr	r3, [pc, #196]	; (8004624 <USB_EPClearStall+0x11c>)
 800455e:	4323      	orrs	r3, r4
 8004560:	b29b      	uxth	r3, r3
 8004562:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	78db      	ldrb	r3, [r3, #3]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d054      	beq.n	8004616 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	b29b      	uxth	r3, r3
 800457a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004582:	b29c      	uxth	r4, r3
 8004584:	f084 0320 	eor.w	r3, r4, #32
 8004588:	b29c      	uxth	r4, r3
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	441a      	add	r2, r3
 8004594:	4b24      	ldr	r3, [pc, #144]	; (8004628 <USB_EPClearStall+0x120>)
 8004596:	4323      	orrs	r3, r4
 8004598:	b29b      	uxth	r3, r3
 800459a:	8013      	strh	r3, [r2, #0]
 800459c:	e03b      	b.n	8004616 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	b29c      	uxth	r4, r3
 80045ac:	4623      	mov	r3, r4
 80045ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d014      	beq.n	80045e0 <USB_EPClearStall+0xd8>
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045cc:	b29c      	uxth	r4, r3
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	441a      	add	r2, r3
 80045d8:	4b14      	ldr	r3, [pc, #80]	; (800462c <USB_EPClearStall+0x124>)
 80045da:	4323      	orrs	r3, r4
 80045dc:	b29b      	uxth	r3, r3
 80045de:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f6:	b29c      	uxth	r4, r3
 80045f8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80045fc:	b29c      	uxth	r4, r3
 80045fe:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004602:	b29c      	uxth	r4, r3
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	441a      	add	r2, r3
 800460e:	4b06      	ldr	r3, [pc, #24]	; (8004628 <USB_EPClearStall+0x120>)
 8004610:	4323      	orrs	r3, r4
 8004612:	b29b      	uxth	r3, r3
 8004614:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bc90      	pop	{r4, r7}
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	ffff80c0 	.word	0xffff80c0
 8004628:	ffff8080 	.word	0xffff8080
 800462c:	ffffc080 	.word	0xffffc080

08004630 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	460b      	mov	r3, r1
 800463a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d103      	bne.n	800464a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2280      	movs	r2, #128	; 0x80
 8004646:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr

08004656 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr

0800466a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr

0800467e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800467e:	b480      	push	{r7}
 8004680:	b085      	sub	sp, #20
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800468c:	b29b      	uxth	r3, r3
 800468e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004690:	68fb      	ldr	r3, [r7, #12]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr

0800469c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr

080046b2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b08d      	sub	sp, #52	; 0x34
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	4611      	mov	r1, r2
 80046be:	461a      	mov	r2, r3
 80046c0:	460b      	mov	r3, r1
 80046c2:	80fb      	strh	r3, [r7, #6]
 80046c4:	4613      	mov	r3, r2
 80046c6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80046c8:	88bb      	ldrh	r3, [r7, #4]
 80046ca:	3301      	adds	r3, #1
 80046cc:	085b      	lsrs	r3, r3, #1
 80046ce:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80046d8:	88fb      	ldrh	r3, [r7, #6]
 80046da:	005a      	lsls	r2, r3, #1
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046e4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ea:	e01e      	b.n	800472a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	3301      	adds	r3, #1
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	b29b      	uxth	r3, r3
 8004702:	461a      	mov	r2, r3
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	b29a      	uxth	r2, r3
 800470e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004710:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	3302      	adds	r3, #2
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	3302      	adds	r3, #2
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	3301      	adds	r3, #1
 8004722:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004726:	3b01      	subs	r3, #1
 8004728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1dd      	bne.n	80046ec <USB_WritePMA+0x3a>
  }
}
 8004730:	bf00      	nop
 8004732:	3734      	adds	r7, #52	; 0x34
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr

0800473a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800473a:	b480      	push	{r7}
 800473c:	b08b      	sub	sp, #44	; 0x2c
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	4611      	mov	r1, r2
 8004746:	461a      	mov	r2, r3
 8004748:	460b      	mov	r3, r1
 800474a:	80fb      	strh	r3, [r7, #6]
 800474c:	4613      	mov	r3, r2
 800474e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004750:	88bb      	ldrh	r3, [r7, #4]
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	b29b      	uxth	r3, r3
 8004756:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004760:	88fb      	ldrh	r3, [r7, #6]
 8004762:	005a      	lsls	r2, r3, #1
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800476c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
 8004772:	e01b      	b.n	80047ac <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b29b      	uxth	r3, r3
 800477a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	3302      	adds	r3, #2
 8004780:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	b2da      	uxtb	r2, r3
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	3301      	adds	r3, #1
 800478e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	b2da      	uxtb	r2, r3
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	3301      	adds	r3, #1
 800479e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80047a0:	6a3b      	ldr	r3, [r7, #32]
 80047a2:	3302      	adds	r3, #2
 80047a4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	3b01      	subs	r3, #1
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1e0      	bne.n	8004774 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80047b2:	88bb      	ldrh	r3, [r7, #4]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	701a      	strb	r2, [r3, #0]
  }
}
 80047ce:	bf00      	nop
 80047d0:	372c      	adds	r7, #44	; 0x2c
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr

080047d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	460b      	mov	r3, r1
 80047e2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	7c1b      	ldrb	r3, [r3, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d115      	bne.n	800481c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80047f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047f4:	2202      	movs	r2, #2
 80047f6:	2181      	movs	r1, #129	; 0x81
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f001 fe6c 	bl	80064d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004804:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004808:	2202      	movs	r2, #2
 800480a:	2101      	movs	r1, #1
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f001 fe62 	bl	80064d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800481a:	e012      	b.n	8004842 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800481c:	2340      	movs	r3, #64	; 0x40
 800481e:	2202      	movs	r2, #2
 8004820:	2181      	movs	r1, #129	; 0x81
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f001 fe57 	bl	80064d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800482e:	2340      	movs	r3, #64	; 0x40
 8004830:	2202      	movs	r2, #2
 8004832:	2101      	movs	r1, #1
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f001 fe4e 	bl	80064d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004842:	2308      	movs	r3, #8
 8004844:	2203      	movs	r2, #3
 8004846:	2182      	movs	r1, #130	; 0x82
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f001 fe44 	bl	80064d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004854:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004858:	f001 ff5e 	bl	8006718 <USBD_static_malloc>
 800485c:	4602      	mov	r2, r0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d102      	bne.n	8004874 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800486e:	2301      	movs	r3, #1
 8004870:	73fb      	strb	r3, [r7, #15]
 8004872:	e026      	b.n	80048c2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800487a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2200      	movs	r2, #0
 800488a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2200      	movs	r2, #0
 8004892:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	7c1b      	ldrb	r3, [r3, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d109      	bne.n	80048b2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80048a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048a8:	2101      	movs	r1, #1
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f001 fefd 	bl	80066aa <USBD_LL_PrepareReceive>
 80048b0:	e007      	b.n	80048c2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80048b8:	2340      	movs	r3, #64	; 0x40
 80048ba:	2101      	movs	r1, #1
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f001 fef4 	bl	80066aa <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80048dc:	2181      	movs	r1, #129	; 0x81
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f001 fe1f 	bl	8006522 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80048ea:	2101      	movs	r1, #1
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f001 fe18 	bl	8006522 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80048fa:	2182      	movs	r1, #130	; 0x82
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f001 fe10 	bl	8006522 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00e      	beq.n	8004930 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004922:	4618      	mov	r0, r3
 8004924:	f001 ff04 	bl	8006730 <USBD_static_free>
    pdev->pClassData = NULL;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004930:	7bfb      	ldrb	r3, [r7, #15]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b086      	sub	sp, #24
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800494a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004960:	2b00      	cmp	r3, #0
 8004962:	d039      	beq.n	80049d8 <USBD_CDC_Setup+0x9e>
 8004964:	2b20      	cmp	r3, #32
 8004966:	d17c      	bne.n	8004a62 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	88db      	ldrh	r3, [r3, #6]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d029      	beq.n	80049c4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	b25b      	sxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	da11      	bge.n	800499e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004986:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	88d2      	ldrh	r2, [r2, #6]
 800498c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800498e:	6939      	ldr	r1, [r7, #16]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	88db      	ldrh	r3, [r3, #6]
 8004994:	461a      	mov	r2, r3
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f001 f9f6 	bl	8005d88 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800499c:	e068      	b.n	8004a70 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	785a      	ldrb	r2, [r3, #1]
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	88db      	ldrh	r3, [r3, #6]
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80049b4:	6939      	ldr	r1, [r7, #16]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	88db      	ldrh	r3, [r3, #6]
 80049ba:	461a      	mov	r2, r3
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f001 fa11 	bl	8005de4 <USBD_CtlPrepareRx>
      break;
 80049c2:	e055      	b.n	8004a70 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	7850      	ldrb	r0, [r2, #1]
 80049d0:	2200      	movs	r2, #0
 80049d2:	6839      	ldr	r1, [r7, #0]
 80049d4:	4798      	blx	r3
      break;
 80049d6:	e04b      	b.n	8004a70 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	785b      	ldrb	r3, [r3, #1]
 80049dc:	2b0a      	cmp	r3, #10
 80049de:	d017      	beq.n	8004a10 <USBD_CDC_Setup+0xd6>
 80049e0:	2b0b      	cmp	r3, #11
 80049e2:	d029      	beq.n	8004a38 <USBD_CDC_Setup+0xfe>
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d133      	bne.n	8004a50 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d107      	bne.n	8004a02 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80049f2:	f107 030c 	add.w	r3, r7, #12
 80049f6:	2202      	movs	r2, #2
 80049f8:	4619      	mov	r1, r3
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f001 f9c4 	bl	8005d88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a00:	e02e      	b.n	8004a60 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004a02:	6839      	ldr	r1, [r7, #0]
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f001 f955 	bl	8005cb4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	75fb      	strb	r3, [r7, #23]
          break;
 8004a0e:	e027      	b.n	8004a60 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d107      	bne.n	8004a2a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004a1a:	f107 030f 	add.w	r3, r7, #15
 8004a1e:	2201      	movs	r2, #1
 8004a20:	4619      	mov	r1, r3
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f001 f9b0 	bl	8005d88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a28:	e01a      	b.n	8004a60 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004a2a:	6839      	ldr	r1, [r7, #0]
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f001 f941 	bl	8005cb4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a32:	2302      	movs	r3, #2
 8004a34:	75fb      	strb	r3, [r7, #23]
          break;
 8004a36:	e013      	b.n	8004a60 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	d00d      	beq.n	8004a5e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004a42:	6839      	ldr	r1, [r7, #0]
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f001 f935 	bl	8005cb4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004a4e:	e006      	b.n	8004a5e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004a50:	6839      	ldr	r1, [r7, #0]
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f001 f92e 	bl	8005cb4 <USBD_CtlError>
          ret = USBD_FAIL;
 8004a58:	2302      	movs	r3, #2
 8004a5a:	75fb      	strb	r3, [r7, #23]
          break;
 8004a5c:	e000      	b.n	8004a60 <USBD_CDC_Setup+0x126>
          break;
 8004a5e:	bf00      	nop
      }
      break;
 8004a60:	e006      	b.n	8004a70 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004a62:	6839      	ldr	r1, [r7, #0]
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f001 f925 	bl	8005cb4 <USBD_CtlError>
      ret = USBD_FAIL;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8004a6e:	bf00      	nop
  }

  return ret;
 8004a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	460b      	mov	r3, r1
 8004a84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a8c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004a94:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d037      	beq.n	8004b10 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004aa0:	78fa      	ldrb	r2, [r7, #3]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	331c      	adds	r3, #28
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d026      	beq.n	8004b04 <USBD_CDC_DataIn+0x8a>
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	331c      	adds	r3, #28
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	78fa      	ldrb	r2, [r7, #3]
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	0152      	lsls	r2, r2, #5
 8004ace:	440a      	add	r2, r1
 8004ad0:	3238      	adds	r2, #56	; 0x38
 8004ad2:	6812      	ldr	r2, [r2, #0]
 8004ad4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ad8:	fb02 f201 	mul.w	r2, r2, r1
 8004adc:	1a9b      	subs	r3, r3, r2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d110      	bne.n	8004b04 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004ae2:	78fa      	ldrb	r2, [r7, #3]
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	331c      	adds	r3, #28
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004af6:	78f9      	ldrb	r1, [r7, #3]
 8004af8:	2300      	movs	r3, #0
 8004afa:	2200      	movs	r2, #0
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f001 fdb1 	bl	8006664 <USBD_LL_Transmit>
 8004b02:	e003      	b.n	8004b0c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	e000      	b.n	8004b12 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8004b10:	2302      	movs	r3, #2
  }
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	460b      	mov	r3, r1
 8004b24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004b2e:	78fb      	ldrb	r3, [r7, #3]
 8004b30:	4619      	mov	r1, r3
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f001 fddc 	bl	80066f0 <USBD_LL_GetRxDataSize>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00d      	beq.n	8004b66 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004b5e:	4611      	mov	r1, r2
 8004b60:	4798      	blx	r3

    return USBD_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	e000      	b.n	8004b68 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004b66:	2302      	movs	r3, #2
  }
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b7e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d015      	beq.n	8004bb6 <USBD_CDC_EP0_RxReady+0x46>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004b90:	2bff      	cmp	r3, #255	; 0xff
 8004b92:	d010      	beq.n	8004bb6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004ba2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004baa:	b292      	uxth	r2, r2
 8004bac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	22ff      	movs	r2, #255	; 0xff
 8004bb2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2243      	movs	r2, #67	; 0x43
 8004bcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004bce:	4b03      	ldr	r3, [pc, #12]	; (8004bdc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	20000094 	.word	0x20000094

08004be0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2243      	movs	r2, #67	; 0x43
 8004bec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004bee:	4b03      	ldr	r3, [pc, #12]	; (8004bfc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bc80      	pop	{r7}
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	20000050 	.word	0x20000050

08004c00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2243      	movs	r2, #67	; 0x43
 8004c0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004c0e:	4b03      	ldr	r3, [pc, #12]	; (8004c1c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	200000d8 	.word	0x200000d8

08004c20 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	220a      	movs	r2, #10
 8004c2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004c2e:	4b03      	ldr	r3, [pc, #12]	; (8004c3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	2000000c 	.word	0x2000000c

08004c40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d005      	beq.n	8004c60 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr

08004c6c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	4613      	mov	r3, r2
 8004c78:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c80:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004c8a:	88fa      	ldrh	r2, [r7, #6]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr

08004c9e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01c      	beq.n	8004d18 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d115      	bne.n	8004d14 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2181      	movs	r1, #129	; 0x81
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f001 fcaa 	bl	8006664 <USBD_LL_Transmit>

      return USBD_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	e002      	b.n	8004d1a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004d18:	2302      	movs	r3, #2
  }
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d017      	beq.n	8004d6c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	7c1b      	ldrb	r3, [r3, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d109      	bne.n	8004d58 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d4e:	2101      	movs	r1, #1
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f001 fcaa 	bl	80066aa <USBD_LL_PrepareReceive>
 8004d56:	e007      	b.n	8004d68 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d5e:	2340      	movs	r3, #64	; 0x40
 8004d60:	2101      	movs	r1, #1
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f001 fca1 	bl	80066aa <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e000      	b.n	8004d6e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004d6c:	2302      	movs	r3, #2
  }
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	4613      	mov	r3, r2
 8004d82:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e01a      	b.n	8004dc4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	79fa      	ldrb	r2, [r7, #7]
 8004dba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f001 fb15 	bl	80063ec <USBD_LL_Init>

  return USBD_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d006      	beq.n	8004dee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	73fb      	strb	r3, [r7, #15]
 8004dec:	e001      	b.n	8004df2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004dee:	2302      	movs	r3, #2
 8004df0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bc80      	pop	{r7}
 8004dfc:	4770      	bx	lr

08004dfe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f001 fb4a 	bl	80064a0 <USBD_LL_Start>

  return USBD_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc80      	pop	{r7}
 8004e28:	4770      	bx	lr

08004e2a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	460b      	mov	r3, r1
 8004e34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004e36:	2302      	movs	r3, #2
 8004e38:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00c      	beq.n	8004e5e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	78fa      	ldrb	r2, [r7, #3]
 8004e4e:	4611      	mov	r1, r2
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	4798      	blx	r3
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	460b      	mov	r3, r1
 8004e72:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	78fa      	ldrb	r2, [r7, #3]
 8004e7e:	4611      	mov	r1, r2
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	4798      	blx	r3

  return USBD_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fecb 	bl	8005c3c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ec2:	f003 031f 	and.w	r3, r3, #31
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d00c      	beq.n	8004ee4 <USBD_LL_SetupStage+0x56>
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d302      	bcc.n	8004ed4 <USBD_LL_SetupStage+0x46>
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d010      	beq.n	8004ef4 <USBD_LL_SetupStage+0x66>
 8004ed2:	e017      	b.n	8004f04 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004eda:	4619      	mov	r1, r3
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f9cb 	bl	8005278 <USBD_StdDevReq>
      break;
 8004ee2:	e01a      	b.n	8004f1a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004eea:	4619      	mov	r1, r3
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fa2d 	bl	800534c <USBD_StdItfReq>
      break;
 8004ef2:	e012      	b.n	8004f1a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004efa:	4619      	mov	r1, r3
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fa6b 	bl	80053d8 <USBD_StdEPReq>
      break;
 8004f02:	e00a      	b.n	8004f1a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	4619      	mov	r1, r3
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f001 fb24 	bl	8006560 <USBD_LL_StallEP>
      break;
 8004f18:	bf00      	nop
  }

  return USBD_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004f32:	7afb      	ldrb	r3, [r7, #11]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d14b      	bne.n	8004fd0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004f3e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d134      	bne.n	8004fb4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d919      	bls.n	8004f8a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	1ad2      	subs	r2, r2, r3
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d203      	bcs.n	8004f78 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	e002      	b.n	8004f7e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 ff4c 	bl	8005e20 <USBD_CtlContinueRx>
 8004f88:	e038      	b.n	8004ffc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d105      	bne.n	8004fac <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 ff49 	bl	8005e44 <USBD_CtlSendStatus>
 8004fb2:	e023      	b.n	8004ffc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004fba:	2b05      	cmp	r3, #5
 8004fbc:	d11e      	bne.n	8004ffc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f001 fac9 	bl	8006560 <USBD_LL_StallEP>
 8004fce:	e015      	b.n	8004ffc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00d      	beq.n	8004ff8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d108      	bne.n	8004ff8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	7afa      	ldrb	r2, [r7, #11]
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	4798      	blx	r3
 8004ff6:	e001      	b.n	8004ffc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e000      	b.n	8004ffe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b086      	sub	sp, #24
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	460b      	mov	r3, r1
 8005010:	607a      	str	r2, [r7, #4]
 8005012:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005014:	7afb      	ldrb	r3, [r7, #11]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d17f      	bne.n	800511a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3314      	adds	r3, #20
 800501e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005026:	2b02      	cmp	r3, #2
 8005028:	d15c      	bne.n	80050e4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	429a      	cmp	r2, r3
 8005034:	d915      	bls.n	8005062 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	1ad2      	subs	r2, r2, r3
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	b29b      	uxth	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 feb6 	bl	8005dc0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005054:	2300      	movs	r3, #0
 8005056:	2200      	movs	r2, #0
 8005058:	2100      	movs	r1, #0
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f001 fb25 	bl	80066aa <USBD_LL_PrepareReceive>
 8005060:	e04e      	b.n	8005100 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	6912      	ldr	r2, [r2, #16]
 800506a:	fbb3 f1f2 	udiv	r1, r3, r2
 800506e:	fb02 f201 	mul.w	r2, r2, r1
 8005072:	1a9b      	subs	r3, r3, r2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d11c      	bne.n	80050b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005080:	429a      	cmp	r2, r3
 8005082:	d316      	bcc.n	80050b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800508e:	429a      	cmp	r2, r3
 8005090:	d20f      	bcs.n	80050b2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005092:	2200      	movs	r2, #0
 8005094:	2100      	movs	r1, #0
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 fe92 	bl	8005dc0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80050a4:	2300      	movs	r3, #0
 80050a6:	2200      	movs	r2, #0
 80050a8:	2100      	movs	r1, #0
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f001 fafd 	bl	80066aa <USBD_LL_PrepareReceive>
 80050b0:	e026      	b.n	8005100 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d105      	bne.n	80050d4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80050d4:	2180      	movs	r1, #128	; 0x80
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f001 fa42 	bl	8006560 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 fec4 	bl	8005e6a <USBD_CtlReceiveStatus>
 80050e2:	e00d      	b.n	8005100 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d004      	beq.n	80050f8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d103      	bne.n	8005100 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80050f8:	2180      	movs	r1, #128	; 0x80
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f001 fa30 	bl	8006560 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005106:	2b01      	cmp	r3, #1
 8005108:	d11d      	bne.n	8005146 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f7ff fe83 	bl	8004e16 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005118:	e015      	b.n	8005146 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00d      	beq.n	8005142 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800512c:	2b03      	cmp	r3, #3
 800512e:	d108      	bne.n	8005142 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	7afa      	ldrb	r2, [r7, #11]
 800513a:	4611      	mov	r1, r2
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	4798      	blx	r3
 8005140:	e001      	b.n	8005146 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005142:	2302      	movs	r3, #2
 8005144:	e000      	b.n	8005148 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005158:	2340      	movs	r3, #64	; 0x40
 800515a:	2200      	movs	r2, #0
 800515c:	2100      	movs	r1, #0
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f001 f9b9 	bl	80064d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2240      	movs	r2, #64	; 0x40
 8005170:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005174:	2340      	movs	r3, #64	; 0x40
 8005176:	2200      	movs	r2, #0
 8005178:	2180      	movs	r1, #128	; 0x80
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f001 f9ab 	bl	80064d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2240      	movs	r2, #64	; 0x40
 800518a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d009      	beq.n	80051c8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6852      	ldr	r2, [r2, #4]
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	4611      	mov	r1, r2
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	4798      	blx	r3
  }

  return USBD_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	460b      	mov	r3, r1
 80051dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	78fa      	ldrb	r2, [r7, #3]
 80051e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr

080051f0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2204      	movs	r2, #4
 8005208:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	bc80      	pop	{r7}
 8005216:	4770      	bx	lr

08005218 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005226:	2b04      	cmp	r3, #4
 8005228:	d105      	bne.n	8005236 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr

08005242 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005250:	2b03      	cmp	r3, #3
 8005252:	d10b      	bne.n	800526c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
	...

08005278 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800528e:	2b20      	cmp	r3, #32
 8005290:	d004      	beq.n	800529c <USBD_StdDevReq+0x24>
 8005292:	2b40      	cmp	r3, #64	; 0x40
 8005294:	d002      	beq.n	800529c <USBD_StdDevReq+0x24>
 8005296:	2b00      	cmp	r3, #0
 8005298:	d008      	beq.n	80052ac <USBD_StdDevReq+0x34>
 800529a:	e04c      	b.n	8005336 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	6839      	ldr	r1, [r7, #0]
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	4798      	blx	r3
      break;
 80052aa:	e049      	b.n	8005340 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	785b      	ldrb	r3, [r3, #1]
 80052b0:	2b09      	cmp	r3, #9
 80052b2:	d83a      	bhi.n	800532a <USBD_StdDevReq+0xb2>
 80052b4:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <USBD_StdDevReq+0x44>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	0800530d 	.word	0x0800530d
 80052c0:	08005321 	.word	0x08005321
 80052c4:	0800532b 	.word	0x0800532b
 80052c8:	08005317 	.word	0x08005317
 80052cc:	0800532b 	.word	0x0800532b
 80052d0:	080052ef 	.word	0x080052ef
 80052d4:	080052e5 	.word	0x080052e5
 80052d8:	0800532b 	.word	0x0800532b
 80052dc:	08005303 	.word	0x08005303
 80052e0:	080052f9 	.word	0x080052f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80052e4:	6839      	ldr	r1, [r7, #0]
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f9d4 	bl	8005694 <USBD_GetDescriptor>
          break;
 80052ec:	e022      	b.n	8005334 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80052ee:	6839      	ldr	r1, [r7, #0]
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fb37 	bl	8005964 <USBD_SetAddress>
          break;
 80052f6:	e01d      	b.n	8005334 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80052f8:	6839      	ldr	r1, [r7, #0]
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fb74 	bl	80059e8 <USBD_SetConfig>
          break;
 8005300:	e018      	b.n	8005334 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005302:	6839      	ldr	r1, [r7, #0]
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fbfd 	bl	8005b04 <USBD_GetConfig>
          break;
 800530a:	e013      	b.n	8005334 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800530c:	6839      	ldr	r1, [r7, #0]
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fc2c 	bl	8005b6c <USBD_GetStatus>
          break;
 8005314:	e00e      	b.n	8005334 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005316:	6839      	ldr	r1, [r7, #0]
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fc5a 	bl	8005bd2 <USBD_SetFeature>
          break;
 800531e:	e009      	b.n	8005334 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005320:	6839      	ldr	r1, [r7, #0]
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fc69 	bl	8005bfa <USBD_ClrFeature>
          break;
 8005328:	e004      	b.n	8005334 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800532a:	6839      	ldr	r1, [r7, #0]
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fcc1 	bl	8005cb4 <USBD_CtlError>
          break;
 8005332:	bf00      	nop
      }
      break;
 8005334:	e004      	b.n	8005340 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005336:	6839      	ldr	r1, [r7, #0]
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fcbb 	bl	8005cb4 <USBD_CtlError>
      break;
 800533e:	bf00      	nop
  }

  return ret;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop

0800534c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005356:	2300      	movs	r3, #0
 8005358:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005362:	2b20      	cmp	r3, #32
 8005364:	d003      	beq.n	800536e <USBD_StdItfReq+0x22>
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d001      	beq.n	800536e <USBD_StdItfReq+0x22>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d12a      	bne.n	80053c4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005374:	3b01      	subs	r3, #1
 8005376:	2b02      	cmp	r3, #2
 8005378:	d81d      	bhi.n	80053b6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	889b      	ldrh	r3, [r3, #4]
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b01      	cmp	r3, #1
 8005382:	d813      	bhi.n	80053ac <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	6839      	ldr	r1, [r7, #0]
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	4798      	blx	r3
 8005392:	4603      	mov	r3, r0
 8005394:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	88db      	ldrh	r3, [r3, #6]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d110      	bne.n	80053c0 <USBD_StdItfReq+0x74>
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10d      	bne.n	80053c0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fd4d 	bl	8005e44 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80053aa:	e009      	b.n	80053c0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fc80 	bl	8005cb4 <USBD_CtlError>
          break;
 80053b4:	e004      	b.n	80053c0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80053b6:	6839      	ldr	r1, [r7, #0]
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fc7b 	bl	8005cb4 <USBD_CtlError>
          break;
 80053be:	e000      	b.n	80053c2 <USBD_StdItfReq+0x76>
          break;
 80053c0:	bf00      	nop
      }
      break;
 80053c2:	e004      	b.n	80053ce <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80053c4:	6839      	ldr	r1, [r7, #0]
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fc74 	bl	8005cb4 <USBD_CtlError>
      break;
 80053cc:	bf00      	nop
  }

  return USBD_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	889b      	ldrh	r3, [r3, #4]
 80053ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d004      	beq.n	8005402 <USBD_StdEPReq+0x2a>
 80053f8:	2b40      	cmp	r3, #64	; 0x40
 80053fa:	d002      	beq.n	8005402 <USBD_StdEPReq+0x2a>
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <USBD_StdEPReq+0x3a>
 8005400:	e13d      	b.n	800567e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	6839      	ldr	r1, [r7, #0]
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	4798      	blx	r3
      break;
 8005410:	e13a      	b.n	8005688 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800541a:	2b20      	cmp	r3, #32
 800541c:	d10a      	bne.n	8005434 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	6839      	ldr	r1, [r7, #0]
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	4798      	blx	r3
 800542c:	4603      	mov	r3, r0
 800542e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	e12a      	b.n	800568a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d03e      	beq.n	80054ba <USBD_StdEPReq+0xe2>
 800543c:	2b03      	cmp	r3, #3
 800543e:	d002      	beq.n	8005446 <USBD_StdEPReq+0x6e>
 8005440:	2b00      	cmp	r3, #0
 8005442:	d070      	beq.n	8005526 <USBD_StdEPReq+0x14e>
 8005444:	e115      	b.n	8005672 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800544c:	2b02      	cmp	r3, #2
 800544e:	d002      	beq.n	8005456 <USBD_StdEPReq+0x7e>
 8005450:	2b03      	cmp	r3, #3
 8005452:	d015      	beq.n	8005480 <USBD_StdEPReq+0xa8>
 8005454:	e02b      	b.n	80054ae <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005456:	7bbb      	ldrb	r3, [r7, #14]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00c      	beq.n	8005476 <USBD_StdEPReq+0x9e>
 800545c:	7bbb      	ldrb	r3, [r7, #14]
 800545e:	2b80      	cmp	r3, #128	; 0x80
 8005460:	d009      	beq.n	8005476 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005462:	7bbb      	ldrb	r3, [r7, #14]
 8005464:	4619      	mov	r1, r3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f001 f87a 	bl	8006560 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800546c:	2180      	movs	r1, #128	; 0x80
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f001 f876 	bl	8006560 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005474:	e020      	b.n	80054b8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005476:	6839      	ldr	r1, [r7, #0]
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fc1b 	bl	8005cb4 <USBD_CtlError>
              break;
 800547e:	e01b      	b.n	80054b8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	885b      	ldrh	r3, [r3, #2]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10e      	bne.n	80054a6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005488:	7bbb      	ldrb	r3, [r7, #14]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00b      	beq.n	80054a6 <USBD_StdEPReq+0xce>
 800548e:	7bbb      	ldrb	r3, [r7, #14]
 8005490:	2b80      	cmp	r3, #128	; 0x80
 8005492:	d008      	beq.n	80054a6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	88db      	ldrh	r3, [r3, #6]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d104      	bne.n	80054a6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800549c:	7bbb      	ldrb	r3, [r7, #14]
 800549e:	4619      	mov	r1, r3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f001 f85d 	bl	8006560 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fccc 	bl	8005e44 <USBD_CtlSendStatus>

              break;
 80054ac:	e004      	b.n	80054b8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80054ae:	6839      	ldr	r1, [r7, #0]
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 fbff 	bl	8005cb4 <USBD_CtlError>
              break;
 80054b6:	bf00      	nop
          }
          break;
 80054b8:	e0e0      	b.n	800567c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d002      	beq.n	80054ca <USBD_StdEPReq+0xf2>
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	d015      	beq.n	80054f4 <USBD_StdEPReq+0x11c>
 80054c8:	e026      	b.n	8005518 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054ca:	7bbb      	ldrb	r3, [r7, #14]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00c      	beq.n	80054ea <USBD_StdEPReq+0x112>
 80054d0:	7bbb      	ldrb	r3, [r7, #14]
 80054d2:	2b80      	cmp	r3, #128	; 0x80
 80054d4:	d009      	beq.n	80054ea <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80054d6:	7bbb      	ldrb	r3, [r7, #14]
 80054d8:	4619      	mov	r1, r3
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f001 f840 	bl	8006560 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80054e0:	2180      	movs	r1, #128	; 0x80
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f001 f83c 	bl	8006560 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80054e8:	e01c      	b.n	8005524 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80054ea:	6839      	ldr	r1, [r7, #0]
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fbe1 	bl	8005cb4 <USBD_CtlError>
              break;
 80054f2:	e017      	b.n	8005524 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	885b      	ldrh	r3, [r3, #2]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d112      	bne.n	8005522 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80054fc:	7bbb      	ldrb	r3, [r7, #14]
 80054fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005506:	7bbb      	ldrb	r3, [r7, #14]
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f001 f847 	bl	800659e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fc97 	bl	8005e44 <USBD_CtlSendStatus>
              }
              break;
 8005516:	e004      	b.n	8005522 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fbca 	bl	8005cb4 <USBD_CtlError>
              break;
 8005520:	e000      	b.n	8005524 <USBD_StdEPReq+0x14c>
              break;
 8005522:	bf00      	nop
          }
          break;
 8005524:	e0aa      	b.n	800567c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800552c:	2b02      	cmp	r3, #2
 800552e:	d002      	beq.n	8005536 <USBD_StdEPReq+0x15e>
 8005530:	2b03      	cmp	r3, #3
 8005532:	d032      	beq.n	800559a <USBD_StdEPReq+0x1c2>
 8005534:	e097      	b.n	8005666 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005536:	7bbb      	ldrb	r3, [r7, #14]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d007      	beq.n	800554c <USBD_StdEPReq+0x174>
 800553c:	7bbb      	ldrb	r3, [r7, #14]
 800553e:	2b80      	cmp	r3, #128	; 0x80
 8005540:	d004      	beq.n	800554c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005542:	6839      	ldr	r1, [r7, #0]
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fbb5 	bl	8005cb4 <USBD_CtlError>
                break;
 800554a:	e091      	b.n	8005670 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800554c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005550:	2b00      	cmp	r3, #0
 8005552:	da0b      	bge.n	800556c <USBD_StdEPReq+0x194>
 8005554:	7bbb      	ldrb	r3, [r7, #14]
 8005556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	3310      	adds	r3, #16
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	4413      	add	r3, r2
 8005568:	3304      	adds	r3, #4
 800556a:	e00b      	b.n	8005584 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800556c:	7bbb      	ldrb	r3, [r7, #14]
 800556e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	4413      	add	r3, r2
 8005582:	3304      	adds	r3, #4
 8005584:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2202      	movs	r2, #2
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fbf8 	bl	8005d88 <USBD_CtlSendData>
              break;
 8005598:	e06a      	b.n	8005670 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800559a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	da11      	bge.n	80055c6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80055a2:	7bbb      	ldrb	r3, [r7, #14]
 80055a4:	f003 020f 	and.w	r2, r3, #15
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	440b      	add	r3, r1
 80055b4:	3318      	adds	r3, #24
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d117      	bne.n	80055ec <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fb78 	bl	8005cb4 <USBD_CtlError>
                  break;
 80055c4:	e054      	b.n	8005670 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80055c6:	7bbb      	ldrb	r3, [r7, #14]
 80055c8:	f003 020f 	and.w	r2, r3, #15
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d104      	bne.n	80055ec <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80055e2:	6839      	ldr	r1, [r7, #0]
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fb65 	bl	8005cb4 <USBD_CtlError>
                  break;
 80055ea:	e041      	b.n	8005670 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	da0b      	bge.n	800560c <USBD_StdEPReq+0x234>
 80055f4:	7bbb      	ldrb	r3, [r7, #14]
 80055f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	3310      	adds	r3, #16
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	4413      	add	r3, r2
 8005608:	3304      	adds	r3, #4
 800560a:	e00b      	b.n	8005624 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800560c:	7bbb      	ldrb	r3, [r7, #14]
 800560e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	4413      	add	r3, r2
 8005622:	3304      	adds	r3, #4
 8005624:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005626:	7bbb      	ldrb	r3, [r7, #14]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <USBD_StdEPReq+0x25a>
 800562c:	7bbb      	ldrb	r3, [r7, #14]
 800562e:	2b80      	cmp	r3, #128	; 0x80
 8005630:	d103      	bne.n	800563a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	e00e      	b.n	8005658 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800563a:	7bbb      	ldrb	r3, [r7, #14]
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 ffcc 	bl	80065dc <USBD_LL_IsStallEP>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2201      	movs	r2, #1
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	e002      	b.n	8005658 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2202      	movs	r2, #2
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fb92 	bl	8005d88 <USBD_CtlSendData>
              break;
 8005664:	e004      	b.n	8005670 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005666:	6839      	ldr	r1, [r7, #0]
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fb23 	bl	8005cb4 <USBD_CtlError>
              break;
 800566e:	bf00      	nop
          }
          break;
 8005670:	e004      	b.n	800567c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fb1d 	bl	8005cb4 <USBD_CtlError>
          break;
 800567a:	bf00      	nop
      }
      break;
 800567c:	e004      	b.n	8005688 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800567e:	6839      	ldr	r1, [r7, #0]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fb17 	bl	8005cb4 <USBD_CtlError>
      break;
 8005686:	bf00      	nop
  }

  return ret;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	885b      	ldrh	r3, [r3, #2]
 80056ae:	0a1b      	lsrs	r3, r3, #8
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	2b06      	cmp	r3, #6
 80056b6:	f200 8128 	bhi.w	800590a <USBD_GetDescriptor+0x276>
 80056ba:	a201      	add	r2, pc, #4	; (adr r2, 80056c0 <USBD_GetDescriptor+0x2c>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	080056dd 	.word	0x080056dd
 80056c4:	080056f5 	.word	0x080056f5
 80056c8:	08005735 	.word	0x08005735
 80056cc:	0800590b 	.word	0x0800590b
 80056d0:	0800590b 	.word	0x0800590b
 80056d4:	080058ab 	.word	0x080058ab
 80056d8:	080058d7 	.word	0x080058d7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	7c12      	ldrb	r2, [r2, #16]
 80056e8:	f107 0108 	add.w	r1, r7, #8
 80056ec:	4610      	mov	r0, r2
 80056ee:	4798      	blx	r3
 80056f0:	60f8      	str	r0, [r7, #12]
      break;
 80056f2:	e112      	b.n	800591a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	7c1b      	ldrb	r3, [r3, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10d      	bne.n	8005718 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	f107 0208 	add.w	r2, r7, #8
 8005708:	4610      	mov	r0, r2
 800570a:	4798      	blx	r3
 800570c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3301      	adds	r3, #1
 8005712:	2202      	movs	r2, #2
 8005714:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005716:	e100      	b.n	800591a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	f107 0208 	add.w	r2, r7, #8
 8005724:	4610      	mov	r0, r2
 8005726:	4798      	blx	r3
 8005728:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3301      	adds	r3, #1
 800572e:	2202      	movs	r2, #2
 8005730:	701a      	strb	r2, [r3, #0]
      break;
 8005732:	e0f2      	b.n	800591a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	885b      	ldrh	r3, [r3, #2]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b05      	cmp	r3, #5
 800573c:	f200 80ac 	bhi.w	8005898 <USBD_GetDescriptor+0x204>
 8005740:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <USBD_GetDescriptor+0xb4>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	08005761 	.word	0x08005761
 800574c:	08005795 	.word	0x08005795
 8005750:	080057c9 	.word	0x080057c9
 8005754:	080057fd 	.word	0x080057fd
 8005758:	08005831 	.word	0x08005831
 800575c:	08005865 	.word	0x08005865
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00b      	beq.n	8005784 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	7c12      	ldrb	r2, [r2, #16]
 8005778:	f107 0108 	add.w	r1, r7, #8
 800577c:	4610      	mov	r0, r2
 800577e:	4798      	blx	r3
 8005780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005782:	e091      	b.n	80058a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005784:	6839      	ldr	r1, [r7, #0]
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fa94 	bl	8005cb4 <USBD_CtlError>
            err++;
 800578c:	7afb      	ldrb	r3, [r7, #11]
 800578e:	3301      	adds	r3, #1
 8005790:	72fb      	strb	r3, [r7, #11]
          break;
 8005792:	e089      	b.n	80058a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00b      	beq.n	80057b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	7c12      	ldrb	r2, [r2, #16]
 80057ac:	f107 0108 	add.w	r1, r7, #8
 80057b0:	4610      	mov	r0, r2
 80057b2:	4798      	blx	r3
 80057b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057b6:	e077      	b.n	80058a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fa7a 	bl	8005cb4 <USBD_CtlError>
            err++;
 80057c0:	7afb      	ldrb	r3, [r7, #11]
 80057c2:	3301      	adds	r3, #1
 80057c4:	72fb      	strb	r3, [r7, #11]
          break;
 80057c6:	e06f      	b.n	80058a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00b      	beq.n	80057ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	7c12      	ldrb	r2, [r2, #16]
 80057e0:	f107 0108 	add.w	r1, r7, #8
 80057e4:	4610      	mov	r0, r2
 80057e6:	4798      	blx	r3
 80057e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057ea:	e05d      	b.n	80058a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057ec:	6839      	ldr	r1, [r7, #0]
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fa60 	bl	8005cb4 <USBD_CtlError>
            err++;
 80057f4:	7afb      	ldrb	r3, [r7, #11]
 80057f6:	3301      	adds	r3, #1
 80057f8:	72fb      	strb	r3, [r7, #11]
          break;
 80057fa:	e055      	b.n	80058a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00b      	beq.n	8005820 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	7c12      	ldrb	r2, [r2, #16]
 8005814:	f107 0108 	add.w	r1, r7, #8
 8005818:	4610      	mov	r0, r2
 800581a:	4798      	blx	r3
 800581c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800581e:	e043      	b.n	80058a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fa46 	bl	8005cb4 <USBD_CtlError>
            err++;
 8005828:	7afb      	ldrb	r3, [r7, #11]
 800582a:	3301      	adds	r3, #1
 800582c:	72fb      	strb	r3, [r7, #11]
          break;
 800582e:	e03b      	b.n	80058a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00b      	beq.n	8005854 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	7c12      	ldrb	r2, [r2, #16]
 8005848:	f107 0108 	add.w	r1, r7, #8
 800584c:	4610      	mov	r0, r2
 800584e:	4798      	blx	r3
 8005850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005852:	e029      	b.n	80058a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fa2c 	bl	8005cb4 <USBD_CtlError>
            err++;
 800585c:	7afb      	ldrb	r3, [r7, #11]
 800585e:	3301      	adds	r3, #1
 8005860:	72fb      	strb	r3, [r7, #11]
          break;
 8005862:	e021      	b.n	80058a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00b      	beq.n	8005888 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	7c12      	ldrb	r2, [r2, #16]
 800587c:	f107 0108 	add.w	r1, r7, #8
 8005880:	4610      	mov	r0, r2
 8005882:	4798      	blx	r3
 8005884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005886:	e00f      	b.n	80058a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005888:	6839      	ldr	r1, [r7, #0]
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fa12 	bl	8005cb4 <USBD_CtlError>
            err++;
 8005890:	7afb      	ldrb	r3, [r7, #11]
 8005892:	3301      	adds	r3, #1
 8005894:	72fb      	strb	r3, [r7, #11]
          break;
 8005896:	e007      	b.n	80058a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005898:	6839      	ldr	r1, [r7, #0]
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fa0a 	bl	8005cb4 <USBD_CtlError>
          err++;
 80058a0:	7afb      	ldrb	r3, [r7, #11]
 80058a2:	3301      	adds	r3, #1
 80058a4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80058a6:	e038      	b.n	800591a <USBD_GetDescriptor+0x286>
 80058a8:	e037      	b.n	800591a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	7c1b      	ldrb	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d109      	bne.n	80058c6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ba:	f107 0208 	add.w	r2, r7, #8
 80058be:	4610      	mov	r0, r2
 80058c0:	4798      	blx	r3
 80058c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80058c4:	e029      	b.n	800591a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80058c6:	6839      	ldr	r1, [r7, #0]
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f9f3 	bl	8005cb4 <USBD_CtlError>
        err++;
 80058ce:	7afb      	ldrb	r3, [r7, #11]
 80058d0:	3301      	adds	r3, #1
 80058d2:	72fb      	strb	r3, [r7, #11]
      break;
 80058d4:	e021      	b.n	800591a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	7c1b      	ldrb	r3, [r3, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10d      	bne.n	80058fa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	f107 0208 	add.w	r2, r7, #8
 80058ea:	4610      	mov	r0, r2
 80058ec:	4798      	blx	r3
 80058ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3301      	adds	r3, #1
 80058f4:	2207      	movs	r2, #7
 80058f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80058f8:	e00f      	b.n	800591a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f9d9 	bl	8005cb4 <USBD_CtlError>
        err++;
 8005902:	7afb      	ldrb	r3, [r7, #11]
 8005904:	3301      	adds	r3, #1
 8005906:	72fb      	strb	r3, [r7, #11]
      break;
 8005908:	e007      	b.n	800591a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800590a:	6839      	ldr	r1, [r7, #0]
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f9d1 	bl	8005cb4 <USBD_CtlError>
      err++;
 8005912:	7afb      	ldrb	r3, [r7, #11]
 8005914:	3301      	adds	r3, #1
 8005916:	72fb      	strb	r3, [r7, #11]
      break;
 8005918:	bf00      	nop
  }

  if (err != 0U)
 800591a:	7afb      	ldrb	r3, [r7, #11]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d11c      	bne.n	800595a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005920:	893b      	ldrh	r3, [r7, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d011      	beq.n	800594a <USBD_GetDescriptor+0x2b6>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	88db      	ldrh	r3, [r3, #6]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00d      	beq.n	800594a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	88da      	ldrh	r2, [r3, #6]
 8005932:	893b      	ldrh	r3, [r7, #8]
 8005934:	4293      	cmp	r3, r2
 8005936:	bf28      	it	cs
 8005938:	4613      	movcs	r3, r2
 800593a:	b29b      	uxth	r3, r3
 800593c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800593e:	893b      	ldrh	r3, [r7, #8]
 8005940:	461a      	mov	r2, r3
 8005942:	68f9      	ldr	r1, [r7, #12]
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fa1f 	bl	8005d88 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	88db      	ldrh	r3, [r3, #6]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d104      	bne.n	800595c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fa76 	bl	8005e44 <USBD_CtlSendStatus>
 8005958:	e000      	b.n	800595c <USBD_GetDescriptor+0x2c8>
    return;
 800595a:	bf00      	nop
    }
  }
}
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop

08005964 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	889b      	ldrh	r3, [r3, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d130      	bne.n	80059d8 <USBD_SetAddress+0x74>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	88db      	ldrh	r3, [r3, #6]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d12c      	bne.n	80059d8 <USBD_SetAddress+0x74>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	885b      	ldrh	r3, [r3, #2]
 8005982:	2b7f      	cmp	r3, #127	; 0x7f
 8005984:	d828      	bhi.n	80059d8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	885b      	ldrh	r3, [r3, #2]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005990:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005998:	2b03      	cmp	r3, #3
 800599a:	d104      	bne.n	80059a6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800599c:	6839      	ldr	r1, [r7, #0]
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f988 	bl	8005cb4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059a4:	e01c      	b.n	80059e0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	7bfa      	ldrb	r2, [r7, #15]
 80059aa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	4619      	mov	r1, r3
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fe37 	bl	8006626 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fa43 	bl	8005e44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059cc:	e008      	b.n	80059e0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059d6:	e003      	b.n	80059e0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f96a 	bl	8005cb4 <USBD_CtlError>
  }
}
 80059e0:	bf00      	nop
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	885b      	ldrh	r3, [r3, #2]
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	4b41      	ldr	r3, [pc, #260]	; (8005b00 <USBD_SetConfig+0x118>)
 80059fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80059fc:	4b40      	ldr	r3, [pc, #256]	; (8005b00 <USBD_SetConfig+0x118>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d904      	bls.n	8005a0e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005a04:	6839      	ldr	r1, [r7, #0]
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f954 	bl	8005cb4 <USBD_CtlError>
 8005a0c:	e075      	b.n	8005afa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d002      	beq.n	8005a1e <USBD_SetConfig+0x36>
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d023      	beq.n	8005a64 <USBD_SetConfig+0x7c>
 8005a1c:	e062      	b.n	8005ae4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005a1e:	4b38      	ldr	r3, [pc, #224]	; (8005b00 <USBD_SetConfig+0x118>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d01a      	beq.n	8005a5c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005a26:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <USBD_SetConfig+0x118>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2203      	movs	r2, #3
 8005a34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005a38:	4b31      	ldr	r3, [pc, #196]	; (8005b00 <USBD_SetConfig+0x118>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff f9f3 	bl	8004e2a <USBD_SetClassConfig>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d104      	bne.n	8005a54 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f931 	bl	8005cb4 <USBD_CtlError>
            return;
 8005a52:	e052      	b.n	8005afa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f9f5 	bl	8005e44 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005a5a:	e04e      	b.n	8005afa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f9f1 	bl	8005e44 <USBD_CtlSendStatus>
        break;
 8005a62:	e04a      	b.n	8005afa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005a64:	4b26      	ldr	r3, [pc, #152]	; (8005b00 <USBD_SetConfig+0x118>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d112      	bne.n	8005a92 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005a74:	4b22      	ldr	r3, [pc, #136]	; (8005b00 <USBD_SetConfig+0x118>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005a7e:	4b20      	ldr	r3, [pc, #128]	; (8005b00 <USBD_SetConfig+0x118>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff f9ef 	bl	8004e68 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f9da 	bl	8005e44 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005a90:	e033      	b.n	8005afa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005a92:	4b1b      	ldr	r3, [pc, #108]	; (8005b00 <USBD_SetConfig+0x118>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d01d      	beq.n	8005adc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7ff f9dd 	bl	8004e68 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005aae:	4b14      	ldr	r3, [pc, #80]	; (8005b00 <USBD_SetConfig+0x118>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005ab8:	4b11      	ldr	r3, [pc, #68]	; (8005b00 <USBD_SetConfig+0x118>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff f9b3 	bl	8004e2a <USBD_SetClassConfig>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d104      	bne.n	8005ad4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f8f1 	bl	8005cb4 <USBD_CtlError>
            return;
 8005ad2:	e012      	b.n	8005afa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f9b5 	bl	8005e44 <USBD_CtlSendStatus>
        break;
 8005ada:	e00e      	b.n	8005afa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f9b1 	bl	8005e44 <USBD_CtlSendStatus>
        break;
 8005ae2:	e00a      	b.n	8005afa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f8e4 	bl	8005cb4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005aec:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <USBD_SetConfig+0x118>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	4619      	mov	r1, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7ff f9b8 	bl	8004e68 <USBD_ClrClassConfig>
        break;
 8005af8:	bf00      	nop
    }
  }
}
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	20000198 	.word	0x20000198

08005b04 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	88db      	ldrh	r3, [r3, #6]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d004      	beq.n	8005b20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f8cb 	bl	8005cb4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005b1e:	e021      	b.n	8005b64 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	db17      	blt.n	8005b5a <USBD_GetConfig+0x56>
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	dd02      	ble.n	8005b34 <USBD_GetConfig+0x30>
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d00b      	beq.n	8005b4a <USBD_GetConfig+0x46>
 8005b32:	e012      	b.n	8005b5a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	2201      	movs	r2, #1
 8005b40:	4619      	mov	r1, r3
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f920 	bl	8005d88 <USBD_CtlSendData>
        break;
 8005b48:	e00c      	b.n	8005b64 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	2201      	movs	r2, #1
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f918 	bl	8005d88 <USBD_CtlSendData>
        break;
 8005b58:	e004      	b.n	8005b64 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005b5a:	6839      	ldr	r1, [r7, #0]
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f8a9 	bl	8005cb4 <USBD_CtlError>
        break;
 8005b62:	bf00      	nop
}
 8005b64:	bf00      	nop
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d81e      	bhi.n	8005bc0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	88db      	ldrh	r3, [r3, #6]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d004      	beq.n	8005b94 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005b8a:	6839      	ldr	r1, [r7, #0]
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f891 	bl	8005cb4 <USBD_CtlError>
        break;
 8005b92:	e01a      	b.n	8005bca <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d005      	beq.n	8005bb0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f043 0202 	orr.w	r2, r3, #2
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	330c      	adds	r3, #12
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f8e5 	bl	8005d88 <USBD_CtlSendData>
      break;
 8005bbe:	e004      	b.n	8005bca <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005bc0:	6839      	ldr	r1, [r7, #0]
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f876 	bl	8005cb4 <USBD_CtlError>
      break;
 8005bc8:	bf00      	nop
  }
}
 8005bca:	bf00      	nop
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b082      	sub	sp, #8
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	885b      	ldrh	r3, [r3, #2]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d106      	bne.n	8005bf2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f929 	bl	8005e44 <USBD_CtlSendStatus>
  }
}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d80b      	bhi.n	8005c28 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	885b      	ldrh	r3, [r3, #2]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d10c      	bne.n	8005c32 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f90f 	bl	8005e44 <USBD_CtlSendStatus>
      }
      break;
 8005c26:	e004      	b.n	8005c32 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f842 	bl	8005cb4 <USBD_CtlError>
      break;
 8005c30:	e000      	b.n	8005c34 <USBD_ClrFeature+0x3a>
      break;
 8005c32:	bf00      	nop
  }
}
 8005c34:	bf00      	nop
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781a      	ldrb	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	785a      	ldrb	r2, [r3, #1]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	3302      	adds	r3, #2
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	3303      	adds	r3, #3
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	3304      	adds	r3, #4
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	3305      	adds	r3, #5
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	021b      	lsls	r3, r3, #8
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	4413      	add	r3, r2
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	3306      	adds	r3, #6
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	3307      	adds	r3, #7
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	021b      	lsls	r3, r3, #8
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	80da      	strh	r2, [r3, #6]

}
 8005caa:	bf00      	nop
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bc80      	pop	{r7}
 8005cb2:	4770      	bx	lr

08005cb4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005cbe:	2180      	movs	r1, #128	; 0x80
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fc4d 	bl	8006560 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fc49 	bl	8006560 <USBD_LL_StallEP>
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b086      	sub	sp, #24
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d032      	beq.n	8005d52 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f834 	bl	8005d5a <USBD_GetLen>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	75fa      	strb	r2, [r7, #23]
 8005d06:	461a      	mov	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	7812      	ldrb	r2, [r2, #0]
 8005d10:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	75fa      	strb	r2, [r7, #23]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	2203      	movs	r2, #3
 8005d20:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005d22:	e012      	b.n	8005d4a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	60fa      	str	r2, [r7, #12]
 8005d2a:	7dfa      	ldrb	r2, [r7, #23]
 8005d2c:	1c51      	adds	r1, r2, #1
 8005d2e:	75f9      	strb	r1, [r7, #23]
 8005d30:	4611      	mov	r1, r2
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	440a      	add	r2, r1
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	75fa      	strb	r2, [r7, #23]
 8005d40:	461a      	mov	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4413      	add	r3, r2
 8005d46:	2200      	movs	r2, #0
 8005d48:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e8      	bne.n	8005d24 <USBD_GetString+0x4e>
    }
  }
}
 8005d52:	bf00      	nop
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005d66:	e005      	b.n	8005d74 <USBD_GetLen+0x1a>
  {
    len++;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3301      	adds	r3, #1
 8005d72:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1f5      	bne.n	8005d68 <USBD_GetLen+0xe>
  }

  return len;
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bc80      	pop	{r7}
 8005d86:	4770      	bx	lr

08005d88 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005d9e:	88fa      	ldrh	r2, [r7, #6]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005da4:	88fa      	ldrh	r2, [r7, #6]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005daa:	88fb      	ldrh	r3, [r7, #6]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	2100      	movs	r1, #0
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 fc57 	bl	8006664 <USBD_LL_Transmit>

  return USBD_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 fc45 	bl	8006664 <USBD_LL_Transmit>

  return USBD_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	4613      	mov	r3, r2
 8005df0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2203      	movs	r2, #3
 8005df6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005dfa:	88fa      	ldrh	r2, [r7, #6]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005e02:	88fa      	ldrh	r2, [r7, #6]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	2100      	movs	r1, #0
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 fc4a 	bl	80066aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e2e:	88fb      	ldrh	r3, [r7, #6]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	2100      	movs	r1, #0
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 fc38 	bl	80066aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2204      	movs	r2, #4
 8005e50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005e54:	2300      	movs	r3, #0
 8005e56:	2200      	movs	r2, #0
 8005e58:	2100      	movs	r1, #0
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fc02 	bl	8006664 <USBD_LL_Transmit>

  return USBD_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b082      	sub	sp, #8
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2205      	movs	r2, #5
 8005e76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2100      	movs	r1, #0
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fc12 	bl	80066aa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005e94:	2200      	movs	r2, #0
 8005e96:	4912      	ldr	r1, [pc, #72]	; (8005ee0 <MX_USB_DEVICE_Init+0x50>)
 8005e98:	4812      	ldr	r0, [pc, #72]	; (8005ee4 <MX_USB_DEVICE_Init+0x54>)
 8005e9a:	f7fe ff6c 	bl	8004d76 <USBD_Init>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005ea4:	f7fa fb9c 	bl	80005e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005ea8:	490f      	ldr	r1, [pc, #60]	; (8005ee8 <MX_USB_DEVICE_Init+0x58>)
 8005eaa:	480e      	ldr	r0, [pc, #56]	; (8005ee4 <MX_USB_DEVICE_Init+0x54>)
 8005eac:	f7fe ff8e 	bl	8004dcc <USBD_RegisterClass>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005eb6:	f7fa fb93 	bl	80005e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005eba:	490c      	ldr	r1, [pc, #48]	; (8005eec <MX_USB_DEVICE_Init+0x5c>)
 8005ebc:	4809      	ldr	r0, [pc, #36]	; (8005ee4 <MX_USB_DEVICE_Init+0x54>)
 8005ebe:	f7fe febf 	bl	8004c40 <USBD_CDC_RegisterInterface>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005ec8:	f7fa fb8a 	bl	80005e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005ecc:	4805      	ldr	r0, [pc, #20]	; (8005ee4 <MX_USB_DEVICE_Init+0x54>)
 8005ece:	f7fe ff96 	bl	8004dfe <USBD_Start>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005ed8:	f7fa fb82 	bl	80005e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005edc:	bf00      	nop
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	2000012c 	.word	0x2000012c
 8005ee4:	2000143c 	.word	0x2000143c
 8005ee8:	20000018 	.word	0x20000018
 8005eec:	2000011c 	.word	0x2000011c

08005ef0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	4905      	ldr	r1, [pc, #20]	; (8005f0c <CDC_Init_FS+0x1c>)
 8005ef8:	4805      	ldr	r0, [pc, #20]	; (8005f10 <CDC_Init_FS+0x20>)
 8005efa:	f7fe feb7 	bl	8004c6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005efe:	4905      	ldr	r1, [pc, #20]	; (8005f14 <CDC_Init_FS+0x24>)
 8005f00:	4803      	ldr	r0, [pc, #12]	; (8005f10 <CDC_Init_FS+0x20>)
 8005f02:	f7fe fecc 	bl	8004c9e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005f06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	20001ae8 	.word	0x20001ae8
 8005f10:	2000143c 	.word	0x2000143c
 8005f14:	20001700 	.word	0x20001700

08005f18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005f1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr
	...

08005f28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	4603      	mov	r3, r0
 8005f30:	6039      	str	r1, [r7, #0]
 8005f32:	71fb      	strb	r3, [r7, #7]
 8005f34:	4613      	mov	r3, r2
 8005f36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	2b23      	cmp	r3, #35	; 0x23
 8005f3c:	d84a      	bhi.n	8005fd4 <CDC_Control_FS+0xac>
 8005f3e:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <CDC_Control_FS+0x1c>)
 8005f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f44:	08005fd5 	.word	0x08005fd5
 8005f48:	08005fd5 	.word	0x08005fd5
 8005f4c:	08005fd5 	.word	0x08005fd5
 8005f50:	08005fd5 	.word	0x08005fd5
 8005f54:	08005fd5 	.word	0x08005fd5
 8005f58:	08005fd5 	.word	0x08005fd5
 8005f5c:	08005fd5 	.word	0x08005fd5
 8005f60:	08005fd5 	.word	0x08005fd5
 8005f64:	08005fd5 	.word	0x08005fd5
 8005f68:	08005fd5 	.word	0x08005fd5
 8005f6c:	08005fd5 	.word	0x08005fd5
 8005f70:	08005fd5 	.word	0x08005fd5
 8005f74:	08005fd5 	.word	0x08005fd5
 8005f78:	08005fd5 	.word	0x08005fd5
 8005f7c:	08005fd5 	.word	0x08005fd5
 8005f80:	08005fd5 	.word	0x08005fd5
 8005f84:	08005fd5 	.word	0x08005fd5
 8005f88:	08005fd5 	.word	0x08005fd5
 8005f8c:	08005fd5 	.word	0x08005fd5
 8005f90:	08005fd5 	.word	0x08005fd5
 8005f94:	08005fd5 	.word	0x08005fd5
 8005f98:	08005fd5 	.word	0x08005fd5
 8005f9c:	08005fd5 	.word	0x08005fd5
 8005fa0:	08005fd5 	.word	0x08005fd5
 8005fa4:	08005fd5 	.word	0x08005fd5
 8005fa8:	08005fd5 	.word	0x08005fd5
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005fd5 	.word	0x08005fd5
 8005fb8:	08005fd5 	.word	0x08005fd5
 8005fbc:	08005fd5 	.word	0x08005fd5
 8005fc0:	08005fd5 	.word	0x08005fd5
 8005fc4:	08005fd5 	.word	0x08005fd5
 8005fc8:	08005fd5 	.word	0x08005fd5
 8005fcc:	08005fd5 	.word	0x08005fd5
 8005fd0:	08005fd5 	.word	0x08005fd5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005fd4:	bf00      	nop
  }

  return (USBD_OK);
 8005fd6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bc80      	pop	{r7}
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop

08005fe4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	4805      	ldr	r0, [pc, #20]	; (8006008 <CDC_Receive_FS+0x24>)
 8005ff2:	f7fe fe54 	bl	8004c9e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005ff6:	4804      	ldr	r0, [pc, #16]	; (8006008 <CDC_Receive_FS+0x24>)
 8005ff8:	f7fe fe93 	bl	8004d22 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005ffc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	2000143c 	.word	0x2000143c

0800600c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	460b      	mov	r3, r1
 8006016:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800601c:	4b0d      	ldr	r3, [pc, #52]	; (8006054 <CDC_Transmit_FS+0x48>)
 800601e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006022:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800602e:	2301      	movs	r3, #1
 8006030:	e00b      	b.n	800604a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006032:	887b      	ldrh	r3, [r7, #2]
 8006034:	461a      	mov	r2, r3
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4806      	ldr	r0, [pc, #24]	; (8006054 <CDC_Transmit_FS+0x48>)
 800603a:	f7fe fe17 	bl	8004c6c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800603e:	4805      	ldr	r0, [pc, #20]	; (8006054 <CDC_Transmit_FS+0x48>)
 8006040:	f7fe fe40 	bl	8004cc4 <USBD_CDC_TransmitPacket>
 8006044:	4603      	mov	r3, r0
 8006046:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006048:	7bfb      	ldrb	r3, [r7, #15]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	2000143c 	.word	0x2000143c

08006058 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	4603      	mov	r3, r0
 8006060:	6039      	str	r1, [r7, #0]
 8006062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2212      	movs	r2, #18
 8006068:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800606a:	4b03      	ldr	r3, [pc, #12]	; (8006078 <USBD_FS_DeviceDescriptor+0x20>)
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	bc80      	pop	{r7}
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	20000148 	.word	0x20000148

0800607c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	4603      	mov	r3, r0
 8006084:	6039      	str	r1, [r7, #0]
 8006086:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	2204      	movs	r2, #4
 800608c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800608e:	4b03      	ldr	r3, [pc, #12]	; (800609c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	bc80      	pop	{r7}
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	2000015c 	.word	0x2000015c

080060a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	4603      	mov	r3, r0
 80060a8:	6039      	str	r1, [r7, #0]
 80060aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80060ac:	79fb      	ldrb	r3, [r7, #7]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d105      	bne.n	80060be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	4907      	ldr	r1, [pc, #28]	; (80060d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80060b6:	4808      	ldr	r0, [pc, #32]	; (80060d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80060b8:	f7ff fe0d 	bl	8005cd6 <USBD_GetString>
 80060bc:	e004      	b.n	80060c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	4904      	ldr	r1, [pc, #16]	; (80060d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80060c2:	4805      	ldr	r0, [pc, #20]	; (80060d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80060c4:	f7ff fe07 	bl	8005cd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80060c8:	4b02      	ldr	r3, [pc, #8]	; (80060d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20001ed0 	.word	0x20001ed0
 80060d8:	0800684c 	.word	0x0800684c

080060dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	4603      	mov	r3, r0
 80060e4:	6039      	str	r1, [r7, #0]
 80060e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	4904      	ldr	r1, [pc, #16]	; (80060fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80060ec:	4804      	ldr	r0, [pc, #16]	; (8006100 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80060ee:	f7ff fdf2 	bl	8005cd6 <USBD_GetString>
  return USBD_StrDesc;
 80060f2:	4b02      	ldr	r3, [pc, #8]	; (80060fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	20001ed0 	.word	0x20001ed0
 8006100:	08006864 	.word	0x08006864

08006104 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	4603      	mov	r3, r0
 800610c:	6039      	str	r1, [r7, #0]
 800610e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	221a      	movs	r2, #26
 8006114:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006116:	f000 f843 	bl	80061a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800611a:	4b02      	ldr	r3, [pc, #8]	; (8006124 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800611c:	4618      	mov	r0, r3
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	20000160 	.word	0x20000160

08006128 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	6039      	str	r1, [r7, #0]
 8006132:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d105      	bne.n	8006146 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	4907      	ldr	r1, [pc, #28]	; (800615c <USBD_FS_ConfigStrDescriptor+0x34>)
 800613e:	4808      	ldr	r0, [pc, #32]	; (8006160 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006140:	f7ff fdc9 	bl	8005cd6 <USBD_GetString>
 8006144:	e004      	b.n	8006150 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	4904      	ldr	r1, [pc, #16]	; (800615c <USBD_FS_ConfigStrDescriptor+0x34>)
 800614a:	4805      	ldr	r0, [pc, #20]	; (8006160 <USBD_FS_ConfigStrDescriptor+0x38>)
 800614c:	f7ff fdc3 	bl	8005cd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006150:	4b02      	ldr	r3, [pc, #8]	; (800615c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006152:	4618      	mov	r0, r3
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20001ed0 	.word	0x20001ed0
 8006160:	08006878 	.word	0x08006878

08006164 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	4603      	mov	r3, r0
 800616c:	6039      	str	r1, [r7, #0]
 800616e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006170:	79fb      	ldrb	r3, [r7, #7]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d105      	bne.n	8006182 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	4907      	ldr	r1, [pc, #28]	; (8006198 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800617a:	4808      	ldr	r0, [pc, #32]	; (800619c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800617c:	f7ff fdab 	bl	8005cd6 <USBD_GetString>
 8006180:	e004      	b.n	800618c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	4904      	ldr	r1, [pc, #16]	; (8006198 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006186:	4805      	ldr	r0, [pc, #20]	; (800619c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006188:	f7ff fda5 	bl	8005cd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800618c:	4b02      	ldr	r3, [pc, #8]	; (8006198 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800618e:	4618      	mov	r0, r3
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	20001ed0 	.word	0x20001ed0
 800619c:	08006884 	.word	0x08006884

080061a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80061a6:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <Get_SerialNum+0x44>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80061ac:	4b0e      	ldr	r3, [pc, #56]	; (80061e8 <Get_SerialNum+0x48>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80061b2:	4b0e      	ldr	r3, [pc, #56]	; (80061ec <Get_SerialNum+0x4c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4413      	add	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d009      	beq.n	80061da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80061c6:	2208      	movs	r2, #8
 80061c8:	4909      	ldr	r1, [pc, #36]	; (80061f0 <Get_SerialNum+0x50>)
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 f814 	bl	80061f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80061d0:	2204      	movs	r2, #4
 80061d2:	4908      	ldr	r1, [pc, #32]	; (80061f4 <Get_SerialNum+0x54>)
 80061d4:	68b8      	ldr	r0, [r7, #8]
 80061d6:	f000 f80f 	bl	80061f8 <IntToUnicode>
  }
}
 80061da:	bf00      	nop
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	1ffff7e8 	.word	0x1ffff7e8
 80061e8:	1ffff7ec 	.word	0x1ffff7ec
 80061ec:	1ffff7f0 	.word	0x1ffff7f0
 80061f0:	20000162 	.word	0x20000162
 80061f4:	20000172 	.word	0x20000172

080061f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	4613      	mov	r3, r2
 8006204:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006206:	2300      	movs	r3, #0
 8006208:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800620a:	2300      	movs	r3, #0
 800620c:	75fb      	strb	r3, [r7, #23]
 800620e:	e027      	b.n	8006260 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	0f1b      	lsrs	r3, r3, #28
 8006214:	2b09      	cmp	r3, #9
 8006216:	d80b      	bhi.n	8006230 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	0f1b      	lsrs	r3, r3, #28
 800621c:	b2da      	uxtb	r2, r3
 800621e:	7dfb      	ldrb	r3, [r7, #23]
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	4619      	mov	r1, r3
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	440b      	add	r3, r1
 8006228:	3230      	adds	r2, #48	; 0x30
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	701a      	strb	r2, [r3, #0]
 800622e:	e00a      	b.n	8006246 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	0f1b      	lsrs	r3, r3, #28
 8006234:	b2da      	uxtb	r2, r3
 8006236:	7dfb      	ldrb	r3, [r7, #23]
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	4619      	mov	r1, r3
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	440b      	add	r3, r1
 8006240:	3237      	adds	r2, #55	; 0x37
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	3301      	adds	r3, #1
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	4413      	add	r3, r2
 8006256:	2200      	movs	r2, #0
 8006258:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800625a:	7dfb      	ldrb	r3, [r7, #23]
 800625c:	3301      	adds	r3, #1
 800625e:	75fb      	strb	r3, [r7, #23]
 8006260:	7dfa      	ldrb	r2, [r7, #23]
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	429a      	cmp	r2, r3
 8006266:	d3d3      	bcc.n	8006210 <IntToUnicode+0x18>
  }
}
 8006268:	bf00      	nop
 800626a:	371c      	adds	r7, #28
 800626c:	46bd      	mov	sp, r7
 800626e:	bc80      	pop	{r7}
 8006270:	4770      	bx	lr
	...

08006274 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a0d      	ldr	r2, [pc, #52]	; (80062b8 <HAL_PCD_MspInit+0x44>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d113      	bne.n	80062ae <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006286:	4b0d      	ldr	r3, [pc, #52]	; (80062bc <HAL_PCD_MspInit+0x48>)
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	4a0c      	ldr	r2, [pc, #48]	; (80062bc <HAL_PCD_MspInit+0x48>)
 800628c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006290:	61d3      	str	r3, [r2, #28]
 8006292:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <HAL_PCD_MspInit+0x48>)
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800629e:	2200      	movs	r2, #0
 80062a0:	2100      	movs	r1, #0
 80062a2:	2014      	movs	r0, #20
 80062a4:	f7fb f98b 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80062a8:	2014      	movs	r0, #20
 80062aa:	f7fb f9a4 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80062ae:	bf00      	nop
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	40005c00 	.word	0x40005c00
 80062bc:	40021000 	.word	0x40021000

080062c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80062d4:	4619      	mov	r1, r3
 80062d6:	4610      	mov	r0, r2
 80062d8:	f7fe fdd9 	bl	8004e8e <USBD_LL_SetupStage>
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80062f6:	78fb      	ldrb	r3, [r7, #3]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	015b      	lsls	r3, r3, #5
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	4619      	mov	r1, r3
 8006308:	f7fe fe0c 	bl	8004f24 <USBD_LL_DataOutStage>
}
 800630c:	bf00      	nop
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006326:	78fb      	ldrb	r3, [r7, #3]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	015b      	lsls	r3, r3, #5
 800632c:	4413      	add	r3, r2
 800632e:	333c      	adds	r3, #60	; 0x3c
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	78fb      	ldrb	r3, [r7, #3]
 8006334:	4619      	mov	r1, r3
 8006336:	f7fe fe66 	bl	8005006 <USBD_LL_DataInStage>
}
 800633a:	bf00      	nop
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006350:	4618      	mov	r0, r3
 8006352:	f7fe ff76 	bl	8005242 <USBD_LL_SOF>
}
 8006356:	bf00      	nop
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800635e:	b580      	push	{r7, lr}
 8006360:	b084      	sub	sp, #16
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006366:	2301      	movs	r3, #1
 8006368:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	2b02      	cmp	r3, #2
 8006370:	d001      	beq.n	8006376 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006372:	f7fa f935 	bl	80005e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800637c:	7bfa      	ldrb	r2, [r7, #15]
 800637e:	4611      	mov	r1, r2
 8006380:	4618      	mov	r0, r3
 8006382:	f7fe ff26 	bl	80051d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe fedf 	bl	8005150 <USBD_LL_Reset>
}
 8006392:	bf00      	nop
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe ff20 	bl	80051f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80063b8:	4b04      	ldr	r3, [pc, #16]	; (80063cc <HAL_PCD_SuspendCallback+0x30>)
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	4a03      	ldr	r2, [pc, #12]	; (80063cc <HAL_PCD_SuspendCallback+0x30>)
 80063be:	f043 0306 	orr.w	r3, r3, #6
 80063c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80063c4:	bf00      	nop
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	e000ed00 	.word	0xe000ed00

080063d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe ff1a 	bl	8005218 <USBD_LL_Resume>
}
 80063e4:	bf00      	nop
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80063f4:	4a28      	ldr	r2, [pc, #160]	; (8006498 <USBD_LL_Init+0xac>)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a26      	ldr	r2, [pc, #152]	; (8006498 <USBD_LL_Init+0xac>)
 8006400:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006404:	4b24      	ldr	r3, [pc, #144]	; (8006498 <USBD_LL_Init+0xac>)
 8006406:	4a25      	ldr	r2, [pc, #148]	; (800649c <USBD_LL_Init+0xb0>)
 8006408:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800640a:	4b23      	ldr	r3, [pc, #140]	; (8006498 <USBD_LL_Init+0xac>)
 800640c:	2208      	movs	r2, #8
 800640e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006410:	4b21      	ldr	r3, [pc, #132]	; (8006498 <USBD_LL_Init+0xac>)
 8006412:	2202      	movs	r2, #2
 8006414:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006416:	4b20      	ldr	r3, [pc, #128]	; (8006498 <USBD_LL_Init+0xac>)
 8006418:	2200      	movs	r2, #0
 800641a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800641c:	4b1e      	ldr	r3, [pc, #120]	; (8006498 <USBD_LL_Init+0xac>)
 800641e:	2200      	movs	r2, #0
 8006420:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006422:	4b1d      	ldr	r3, [pc, #116]	; (8006498 <USBD_LL_Init+0xac>)
 8006424:	2200      	movs	r2, #0
 8006426:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006428:	481b      	ldr	r0, [pc, #108]	; (8006498 <USBD_LL_Init+0xac>)
 800642a:	f7fb fc99 	bl	8001d60 <HAL_PCD_Init>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006434:	f7fa f8d4 	bl	80005e0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800643e:	2318      	movs	r3, #24
 8006440:	2200      	movs	r2, #0
 8006442:	2100      	movs	r1, #0
 8006444:	f7fc fb32 	bl	8002aac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800644e:	2358      	movs	r3, #88	; 0x58
 8006450:	2200      	movs	r2, #0
 8006452:	2180      	movs	r1, #128	; 0x80
 8006454:	f7fc fb2a 	bl	8002aac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800645e:	23c0      	movs	r3, #192	; 0xc0
 8006460:	2200      	movs	r2, #0
 8006462:	2181      	movs	r1, #129	; 0x81
 8006464:	f7fc fb22 	bl	8002aac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800646e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006472:	2200      	movs	r2, #0
 8006474:	2101      	movs	r1, #1
 8006476:	f7fc fb19 	bl	8002aac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006484:	2200      	movs	r2, #0
 8006486:	2182      	movs	r1, #130	; 0x82
 8006488:	f7fc fb10 	bl	8002aac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20001fd0 	.word	0x20001fd0
 800649c:	40005c00 	.word	0x40005c00

080064a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fb fd33 	bl	8001f22 <HAL_PCD_Start>
 80064bc:	4603      	mov	r3, r0
 80064be:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 f948 	bl	8006758 <USBD_Get_USB_Status>
 80064c8:	4603      	mov	r3, r0
 80064ca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80064cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	4608      	mov	r0, r1
 80064e0:	4611      	mov	r1, r2
 80064e2:	461a      	mov	r2, r3
 80064e4:	4603      	mov	r3, r0
 80064e6:	70fb      	strb	r3, [r7, #3]
 80064e8:	460b      	mov	r3, r1
 80064ea:	70bb      	strb	r3, [r7, #2]
 80064ec:	4613      	mov	r3, r2
 80064ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80064fe:	78bb      	ldrb	r3, [r7, #2]
 8006500:	883a      	ldrh	r2, [r7, #0]
 8006502:	78f9      	ldrb	r1, [r7, #3]
 8006504:	f7fb fe66 	bl	80021d4 <HAL_PCD_EP_Open>
 8006508:	4603      	mov	r3, r0
 800650a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	4618      	mov	r0, r3
 8006510:	f000 f922 	bl	8006758 <USBD_Get_USB_Status>
 8006514:	4603      	mov	r3, r0
 8006516:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006518:	7bbb      	ldrb	r3, [r7, #14]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	460b      	mov	r3, r1
 800652c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800653c:	78fa      	ldrb	r2, [r7, #3]
 800653e:	4611      	mov	r1, r2
 8006540:	4618      	mov	r0, r3
 8006542:	f7fb fea7 	bl	8002294 <HAL_PCD_EP_Close>
 8006546:	4603      	mov	r3, r0
 8006548:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800654a:	7bfb      	ldrb	r3, [r7, #15]
 800654c:	4618      	mov	r0, r3
 800654e:	f000 f903 	bl	8006758 <USBD_Get_USB_Status>
 8006552:	4603      	mov	r3, r0
 8006554:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8006556:	7bbb      	ldrb	r3, [r7, #14]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800657a:	78fa      	ldrb	r2, [r7, #3]
 800657c:	4611      	mov	r1, r2
 800657e:	4618      	mov	r0, r3
 8006580:	f7fb ff51 	bl	8002426 <HAL_PCD_EP_SetStall>
 8006584:	4603      	mov	r3, r0
 8006586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006588:	7bfb      	ldrb	r3, [r7, #15]
 800658a:	4618      	mov	r0, r3
 800658c:	f000 f8e4 	bl	8006758 <USBD_Get_USB_Status>
 8006590:	4603      	mov	r3, r0
 8006592:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006594:	7bbb      	ldrb	r3, [r7, #14]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	460b      	mov	r3, r1
 80065a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065b8:	78fa      	ldrb	r2, [r7, #3]
 80065ba:	4611      	mov	r1, r2
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fb ff8c 	bl	80024da <HAL_PCD_EP_ClrStall>
 80065c2:	4603      	mov	r3, r0
 80065c4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 f8c5 	bl	8006758 <USBD_Get_USB_Status>
 80065ce:	4603      	mov	r3, r0
 80065d0:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80065d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	460b      	mov	r3, r1
 80065e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065ee:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80065f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	da08      	bge.n	800660a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	015b      	lsls	r3, r3, #5
 8006602:	4413      	add	r3, r2
 8006604:	332a      	adds	r3, #42	; 0x2a
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	e008      	b.n	800661c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	015b      	lsls	r3, r3, #5
 8006614:	4413      	add	r3, r2
 8006616:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800661a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr

08006626 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	460b      	mov	r3, r1
 8006630:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006640:	78fa      	ldrb	r2, [r7, #3]
 8006642:	4611      	mov	r1, r2
 8006644:	4618      	mov	r0, r3
 8006646:	f7fb fda0 	bl	800218a <HAL_PCD_SetAddress>
 800664a:	4603      	mov	r3, r0
 800664c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800664e:	7bfb      	ldrb	r3, [r7, #15]
 8006650:	4618      	mov	r0, r3
 8006652:	f000 f881 	bl	8006758 <USBD_Get_USB_Status>
 8006656:	4603      	mov	r3, r0
 8006658:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800665a:	7bbb      	ldrb	r3, [r7, #14]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	607a      	str	r2, [r7, #4]
 800666e:	461a      	mov	r2, r3
 8006670:	460b      	mov	r3, r1
 8006672:	72fb      	strb	r3, [r7, #11]
 8006674:	4613      	mov	r3, r2
 8006676:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006686:	893b      	ldrh	r3, [r7, #8]
 8006688:	7af9      	ldrb	r1, [r7, #11]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	f7fb fe92 	bl	80023b4 <HAL_PCD_EP_Transmit>
 8006690:	4603      	mov	r3, r0
 8006692:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006694:	7dfb      	ldrb	r3, [r7, #23]
 8006696:	4618      	mov	r0, r3
 8006698:	f000 f85e 	bl	8006758 <USBD_Get_USB_Status>
 800669c:	4603      	mov	r3, r0
 800669e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80066a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b086      	sub	sp, #24
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	461a      	mov	r2, r3
 80066b6:	460b      	mov	r3, r1
 80066b8:	72fb      	strb	r3, [r7, #11]
 80066ba:	4613      	mov	r3, r2
 80066bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80066cc:	893b      	ldrh	r3, [r7, #8]
 80066ce:	7af9      	ldrb	r1, [r7, #11]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	f7fb fe21 	bl	8002318 <HAL_PCD_EP_Receive>
 80066d6:	4603      	mov	r3, r0
 80066d8:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80066da:	7dfb      	ldrb	r3, [r7, #23]
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 f83b 	bl	8006758 <USBD_Get_USB_Status>
 80066e2:	4603      	mov	r3, r0
 80066e4:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80066e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006702:	78fa      	ldrb	r2, [r7, #3]
 8006704:	4611      	mov	r1, r2
 8006706:	4618      	mov	r0, r3
 8006708:	f7fb fe40 	bl	800238c <HAL_PCD_EP_GetRxCount>
 800670c:	4603      	mov	r3, r0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006720:	4b02      	ldr	r3, [pc, #8]	; (800672c <USBD_static_malloc+0x14>)
}
 8006722:	4618      	mov	r0, r3
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	bc80      	pop	{r7}
 800672a:	4770      	bx	lr
 800672c:	2000019c 	.word	0x2000019c

08006730 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]

}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	bc80      	pop	{r7}
 8006740:	4770      	bx	lr

08006742 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	460b      	mov	r3, r1
 800674c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	4603      	mov	r3, r0
 8006760:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006766:	79fb      	ldrb	r3, [r7, #7]
 8006768:	2b03      	cmp	r3, #3
 800676a:	d817      	bhi.n	800679c <USBD_Get_USB_Status+0x44>
 800676c:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <USBD_Get_USB_Status+0x1c>)
 800676e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006772:	bf00      	nop
 8006774:	08006785 	.word	0x08006785
 8006778:	0800678b 	.word	0x0800678b
 800677c:	08006791 	.word	0x08006791
 8006780:	08006797 	.word	0x08006797
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	73fb      	strb	r3, [r7, #15]
    break;
 8006788:	e00b      	b.n	80067a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800678a:	2302      	movs	r3, #2
 800678c:	73fb      	strb	r3, [r7, #15]
    break;
 800678e:	e008      	b.n	80067a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006790:	2301      	movs	r3, #1
 8006792:	73fb      	strb	r3, [r7, #15]
    break;
 8006794:	e005      	b.n	80067a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006796:	2302      	movs	r3, #2
 8006798:	73fb      	strb	r3, [r7, #15]
    break;
 800679a:	e002      	b.n	80067a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800679c:	2302      	movs	r3, #2
 800679e:	73fb      	strb	r3, [r7, #15]
    break;
 80067a0:	bf00      	nop
  }
  return usb_status;
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bc80      	pop	{r7}
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop

080067b0 <__libc_init_array>:
 80067b0:	b570      	push	{r4, r5, r6, lr}
 80067b2:	2500      	movs	r5, #0
 80067b4:	4e0c      	ldr	r6, [pc, #48]	; (80067e8 <__libc_init_array+0x38>)
 80067b6:	4c0d      	ldr	r4, [pc, #52]	; (80067ec <__libc_init_array+0x3c>)
 80067b8:	1ba4      	subs	r4, r4, r6
 80067ba:	10a4      	asrs	r4, r4, #2
 80067bc:	42a5      	cmp	r5, r4
 80067be:	d109      	bne.n	80067d4 <__libc_init_array+0x24>
 80067c0:	f000 f82e 	bl	8006820 <_init>
 80067c4:	2500      	movs	r5, #0
 80067c6:	4e0a      	ldr	r6, [pc, #40]	; (80067f0 <__libc_init_array+0x40>)
 80067c8:	4c0a      	ldr	r4, [pc, #40]	; (80067f4 <__libc_init_array+0x44>)
 80067ca:	1ba4      	subs	r4, r4, r6
 80067cc:	10a4      	asrs	r4, r4, #2
 80067ce:	42a5      	cmp	r5, r4
 80067d0:	d105      	bne.n	80067de <__libc_init_array+0x2e>
 80067d2:	bd70      	pop	{r4, r5, r6, pc}
 80067d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067d8:	4798      	blx	r3
 80067da:	3501      	adds	r5, #1
 80067dc:	e7ee      	b.n	80067bc <__libc_init_array+0xc>
 80067de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067e2:	4798      	blx	r3
 80067e4:	3501      	adds	r5, #1
 80067e6:	e7f2      	b.n	80067ce <__libc_init_array+0x1e>
 80067e8:	080068a4 	.word	0x080068a4
 80067ec:	080068a4 	.word	0x080068a4
 80067f0:	080068a4 	.word	0x080068a4
 80067f4:	080068a8 	.word	0x080068a8

080067f8 <memcpy>:
 80067f8:	b510      	push	{r4, lr}
 80067fa:	1e43      	subs	r3, r0, #1
 80067fc:	440a      	add	r2, r1
 80067fe:	4291      	cmp	r1, r2
 8006800:	d100      	bne.n	8006804 <memcpy+0xc>
 8006802:	bd10      	pop	{r4, pc}
 8006804:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006808:	f803 4f01 	strb.w	r4, [r3, #1]!
 800680c:	e7f7      	b.n	80067fe <memcpy+0x6>

0800680e <memset>:
 800680e:	4603      	mov	r3, r0
 8006810:	4402      	add	r2, r0
 8006812:	4293      	cmp	r3, r2
 8006814:	d100      	bne.n	8006818 <memset+0xa>
 8006816:	4770      	bx	lr
 8006818:	f803 1b01 	strb.w	r1, [r3], #1
 800681c:	e7f9      	b.n	8006812 <memset+0x4>
	...

08006820 <_init>:
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006822:	bf00      	nop
 8006824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006826:	bc08      	pop	{r3}
 8006828:	469e      	mov	lr, r3
 800682a:	4770      	bx	lr

0800682c <_fini>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	bf00      	nop
 8006830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006832:	bc08      	pop	{r3}
 8006834:	469e      	mov	lr, r3
 8006836:	4770      	bx	lr
